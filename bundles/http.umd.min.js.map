{"version":3,"sources":["/home/travis/build/angular/angular/dist/packages-dist/http/bundles/http.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","http","core","Rx","platformBrowser","this","_angular_core","rxjs_Observable","_angular_platformBrowser","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","RequestOptionsArgs","RequestArgs","ResponseOptionsArgs","normalizeMethodName","method","toUpperCase","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","Error","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","length","i","strLen","charCodeAt","buffer","paramParser","rawParams","map","Map","params","split","forEach","param","eqIdx","indexOf","_a","slice","key","val","list","get","push","set","standardEncoding","v","encodeURIComponent","replace","_getJsonpConnections","w","window","_jsonpConnections","JSONP_HOME","urlEncodeParams","searchParams","URLSearchParams","keys","value","Array","isArray","element","append","toString","httpRequest","backend","request","createConnection","response","mergeOptions","defaultOpts","providedOpts","url","newOptions","merge","RequestOptions","search","headers","body","withCredentials","responseType","_createDefaultCookieXSRFStrategy","CookieXSRFStrategy","httpFactory","xhrBackend","requestOptions","Http","jsonpFactory","jsonpBackend","Jsonp","setPrototypeOf","__proto__","p","hasOwnProperty","BrowserXhr","build","XMLHttpRequest","decorators","type","Injectable","ctorParameters","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","Headers","_this","_headers","_normalizedNames","values","name","delete","fromResponseHeaderString","headersString","line","index","name_1","trim","getAll","lcName","toLowerCase","fn","has","from","join","mayBeSetNormalizedName","toJSON","serialized","apply","entries","ResponseOptions","opts","status","statusText","options","BaseResponseOptions","_super","call","ConnectionBackend","Connection","XSRFStrategy","isSuccess","QueryEncoder","encodeKey","k","encodeValue","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","replaceAll","paramsList","Body","json","_body","parse","text","encodingHint","String","fromCharCode","Uint8Array","stringify","arrayBuffer","blob","Response","responseOptions","ok","_nextRequestId","BrowserJsonp","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","connections","removeConnection","send","appendChild","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","JSONPConnection_","req","_dom","baseResponseOptions","_finished","TypeError","Observable","responseObserver","readyState","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","responseOptions_1","error","_responseData","next","complete","onError","message","addEventListener","removeEventListener","finished","data","JSONPBackend","arguments","JSONPBackend_","_browserJSONP","_baseResponseOptions","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","responseText","err","setDetectedContentType","setRequestHeader","getBody","abort","contentType","_cookieName","_headerName","configureRequest","xsrfToken","ɵgetDOM","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","_mergeSearchParams","defineProperty","enumerable","configurable","_parseParams","objParams","item","_appendParam","BaseRequestOptions","Request","paramsArg","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","noop","_backend","_defaultOptions","responseObservable","post","put","patch","head","defaultOptions","HttpModule","NgModule","args","providers","provide","useFactory","deps","useClass","JsonpModule","VERSION","Version","ɵg","ɵa","ɵf","ɵb","ɵc","ɵd","ɵe"],"mappings":";;;;;CAKC,SAAUA,OAAQC,SACC,gBAAZC,UAA0C,mBAAXC,QAAyBF,QAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,mBAAoBA,QAAQ,8BAC5H,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,UAAW,gBAAiB,kBAAmB,6BAA8BJ,SACjIA,SAASD,OAAOO,GAAKP,OAAOO,OAAUP,OAAOO,GAAGC,SAAWR,OAAOO,GAAGE,KAAKT,OAAOU,GAAGV,OAAOO,GAAGI,kBAC9FC,KAAM,SAAWV,QAAQW,cAAcC,gBAAgBC,0BAA4B,YAsBrF,SAASC,WAAUC,EAAGC,GAElB,QAASC,MAAOP,KAAKQ,YAAcH,EADnCI,cAAcJ,EAAGC,GAEjBD,EAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,GAAGG,UAAYJ,EAAEI,UAAW,GAAIH,KAggBnF,QAASM,uBAKT,QAASC,gBAQT,QAASC;;;;;;;AAiBT,QAASC,qBAAoBC,QACzB,GAAsB,gBAAXA,QACP,MAAOA,OACX,QAAQA,OAAOC,eACX,IAAK,MACD,MAAOC,eAAcC,GACzB,KAAK,OACD,MAAOD,eAAcE,IACzB,KAAK,MACD,MAAOF,eAAcG,GACzB,KAAK,SACD,MAAOH,eAAcI,MACzB,KAAK,UACD,MAAOJ,eAAcK,OACzB,KAAK,OACD,MAAOL,eAAcM,IACzB,KAAK,QACD,MAAON,eAAcO,MAE7B,KAAM,IAAIC,OAAM,uCAA0CV,OAAS,uBAOvE,QAASW,gBAAeC,KACpB,MAAI,eAAiBA,KACVA,IAAIC,YAEX,mBAAmBC,KAAKF,IAAIG,yBACrBH,IAAII,kBAAkB,iBAE1B,KAWX,QAASC,qBAAoBC,OAEzB,IAAK,GADgBC,MAAO,GAAIC,aAAYF,MAAMG,QACxBC,EAAI,EAAoBC,OAASL,MAAMG,OAAQC,EAAIC,OAAQD,IACjFH,KAAKG,GAAKJ,MAAMM,WAAWF,EAE/B,OAAOH,MAAKM;;;;;;;;;AAgBhB,QAASC,aAAYC,WACC,SAAdA,YAAwBA,UAAY,GACxC,IAAqBC,KAAM,GAAIC,IAC/B,IAAIF,UAAUN,OAAS,EAAG,CACtB,GAAqBS,QAASH,UAAUI,MAAM,IAC9CD,QAAOE,QAAQ,SAAUC,OACrB,GAAqBC,OAAQD,MAAME,QAAQ,KACvCC,GAAKF,QAAS,GAAMD,MAAO,KAAOA,MAAMI,MAAM,EAAGH,OAAQD,MAAMI,MAAMH,MAAQ,IAAKI,IAAMF,GAAG,GAAIG,IAAMH,GAAG,GACvFI,KAAOZ,IAAIa,IAAIH,QACpCE,MAAKE,KAAKH,KACVX,IAAIe,IAAIL,IAAKE,QAGrB,MAAOZ,KAyBX,QAASgB,kBAAiBC,GACtB,MAAOC,oBAAmBD,GACrBE,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KAsU1B,QAASC,wBACL,GAAqBC,GAAqB,gBAAVC,QAAqBA,SAIrD,OAH0B,QAAtBC,oBACAA,kBAAoBF,EAAEG,gBAEnBD,kBAo0BX,QAASE,iBAAgBvB,QACrB,GAAqBwB,cAAe,GAAIC,gBAUxC,OATA7D,QAAO8D,KAAK1B,QAAQE,QAAQ,SAAUM,KAClC,GAAqBmB,OAAQ3B,OAAOQ,IAChCmB,QAASC,MAAMC,QAAQF,OACvBA,MAAMzB,QAAQ,SAAU4B,SAAW,MAAON,cAAaO,OAAOvB,IAAKsB,QAAQE,cAG3ER,aAAaO,OAAOvB,IAAKmB,MAAMK,cAGhCR;;;;;;;AAwBX,QAASS,aAAYC,QAASC,SAC1B,MAAOD,SAAQE,iBAAiBD,SAASE,SAS7C,QAASC,cAAaC,YAAaC,aAActE,OAAQuE,KACrD,GAAqBC,YAAaH,WAClC,OAAIC,cAEQE,WAAWC,MAAM,GAAIC,iBACzB1E,OAAQsE,aAAatE,QAAUA,OAC/BuE,IAAKD,aAAaC,KAAOA,IACzBI,OAAQL,aAAaK,OACrB7C,OAAQwC,aAAaxC,OACrB8C,QAASN,aAAaM,QACtBC,KAAMP,aAAaO,KACnBC,gBAAiBR,aAAaQ,gBAC9BC,aAAcT,aAAaS,gBAG3BP,WAAWC,MAAM,GAAIC,iBAAiB1E,OAAQA,OAAQuE,IAAKA;;;;;;;AAsPvE,QAASS,oCACL,MAAO,IAAIC,oBAOf,QAASC,aAAYC,WAAYC,gBAC7B,MAAO,IAAIC,MAAKF,WAAYC,gBAOhC,QAASE,cAAaC,aAAcH,gBAChC,MAAO,IAAII,OAAMD,aAAcH,gBAxmEnC,GAAI5F,eAAgBE,OAAO+F,iBACpBC,uBAA2BhC,QAAS,SAAUtE,EAAGC,GAAKD,EAAEsG,UAAYrG,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIsG,KAAKtG,GAAOA,EAAEuG,eAAeD,KAAIvG,EAAEuG,GAAKtG,EAAEsG,KA+BrEE,WAAc,WACd,QAASA,eAMT,MADAA,YAAWpG,UAAUqG,MAAQ,WAAc,MAAO,IAAMC,iBACjDF,aAEXA,YAAWG,aACLC,KAAMjH,cAAckH,aAG1BL,WAAWM,eAAiB,WAAc,SAO1C,IAAIjG,gBACAC,IAAK,EACLC,KAAM,EACNC,IAAK,EACLC,OAAQ,EACRC,QAAS,EACTC,KAAM,EACNC,MAAO,EAEXP,eAAcA,cAAcC,KAAO,MACnCD,cAAcA,cAAcE,MAAQ,OACpCF,cAAcA,cAAcG,KAAO,MACnCH,cAAcA,cAAcI,QAAU,SACtCJ,cAAcA,cAAcK,SAAW,UACvCL,cAAcA,cAAcM,MAAQ,OACpCN,cAAcA,cAAcO,OAAS,OAErC,IAAI2F,aACAC,OAAQ,EACRC,KAAM,EACNC,gBAAiB,EACjBC,QAAS,EACTC,KAAM,EACNC,UAAW,EAEfN,YAAWA,WAAWC,QAAU,SAChCD,WAAWA,WAAWE,MAAQ,OAC9BF,WAAWA,WAAWG,iBAAmB,kBACzCH,WAAWA,WAAWI,SAAW,UACjCJ,WAAWA,WAAWK,MAAQ,OAC9BL,WAAWA,WAAWM,WAAa,WAEnC,IAAIC,eACAC,MAAO,EACPC,KAAM,EACNC,QAAS,EACTpG,MAAO,EACPqG,OAAQ,EAEZJ,cAAaA,aAAaC,OAAS,QACnCD,aAAaA,aAAaE,MAAQ,OAClCF,aAAaA,aAAaG,SAAW,UACrCH,aAAaA,aAAajG,OAAS,QACnCiG,aAAaA,aAAaI,QAAU,QAEpC,IAAIC,cACAC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,UAAW,EACXC,KAAM,EACNC,KAAM,EACNC,aAAc,EAElBP,aAAYA,YAAYC,MAAQ,OAChCD,YAAYA,YAAYE,MAAQ,OAChCF,YAAYA,YAAYG,MAAQ,OAChCH,YAAYA,YAAYI,WAAa,YACrCJ,YAAYA,YAAYK,MAAQ,OAChCL,YAAYA,YAAYM,MAAQ,OAChCN,YAAYA,YAAYO,cAAgB,cAExC,IAAIC,sBACAC,KAAM,EACNC,KAAM,EACNC,YAAa,EACbC,KAAM,EAEVJ,qBAAoBA,oBAAoBC,MAAQ,OAChDD,oBAAoBA,oBAAoBE,MAAQ,OAChDF,oBAAoBA,oBAAoBG,aAAe,cACvDH,oBAAoBA,oBAAoBI,MAAQ,MAkChD,IAAIC,SAAW,WAIX,QAASA,SAAQjD,SACb,GAAIkD,OAAQ/I,IASZ,IALAA,KAAKgJ,SAAW,GAAIlG,KAIpB9C,KAAKiJ,iBAAmB,GAAInG,KACvB+C,QAGL,MAAIA,mBAAmBiD,aACnBjD,SAAQ5C,QAAQ,SAAUiG,OAAQC,MAC9BD,OAAOjG,QAAQ,SAAUyB,OAAS,MAAOqE,OAAMjE,OAAOqE,KAAMzE,eAIpE/D,QAAO8D,KAAKoB,SAAS5C,QAAQ,SAAUkG,MACnC,GAAqBD,QAASvE,MAAMC,QAAQiB,QAAQsD,OAAStD,QAAQsD,OAAStD,QAAQsD,MACtFJ,OAAMK,OAAOD,MACbD,OAAOjG,QAAQ,SAAUyB,OAAS,MAAOqE,OAAMjE,OAAOqE,KAAMzE,WAsIpE,MA9HAoE,SAAQO,yBAA2B,SAAUC,eACzC,GAAqBzD,SAAU,GAAIiD,QASnC,OARAQ,eAActG,MAAM,MAAMC,QAAQ,SAAUsG,MACxC,GAAqBC,OAAQD,KAAKnG,QAAQ,IAC1C,IAAIoG,MAAQ,EAAG,CACX,GAAqBC,QAASF,KAAKjG,MAAM,EAAGkG,OACvB9E,MAAQ6E,KAAKjG,MAAMkG,MAAQ,GAAGE,MACnD7D,SAAQjC,IAAI6F,OAAQ/E,UAGrBmB,SAQXiD,QAAQpI,UAAUoE,OAAS,SAAUqE,KAAMzE,OACvC,GAAqBwE,QAASlJ,KAAK2J,OAAOR,KAC3B,QAAXD,OACAlJ,KAAK4D,IAAIuF,KAAMzE,OAGfwE,OAAOvF,KAAKe,QAQpBoE,QAAQpI,UAAU0I,OAAS,SAAUD,MACjC,GAAqBS,QAAST,KAAKU,aACnC7J,MAAKiJ,iBAAiBG,OAAOQ,QAC7B5J,KAAKgJ,SAASI,OAAOQ,SAMzBd,QAAQpI,UAAUuC,QAAU,SAAU6G,IAClC,GAAIf,OAAQ/I,IACZA,MAAKgJ,SAAS/F,QAAQ,SAAUiG,OAAQU,QAAU,MAAOE,IAAGZ,OAAQH,MAAME,iBAAiBvF,IAAIkG,QAASb,MAAMC,aAOlHF,QAAQpI,UAAUgD,IAAM,SAAUyF,MAC9B,GAAqBD,QAASlJ,KAAK2J,OAAOR,KAC1C,OAAe,QAAXD,OACO,KAEJA,OAAO5G,OAAS,EAAI4G,OAAO,GAAK,MAO3CJ,QAAQpI,UAAUqJ,IAAM,SAAUZ,MAAQ,MAAOnJ,MAAKgJ,SAASe,IAAIZ,KAAKU,gBAKxEf,QAAQpI,UAAU+D,KAAO,WAAc,MAAOE,OAAMqF,KAAKhK,KAAKiJ,iBAAiBC,WAO/EJ,QAAQpI,UAAUkD,IAAM,SAAUuF,KAAMzE,OAChCC,MAAMC,QAAQF,OACVA,MAAMpC,QACNtC,KAAKgJ,SAASpF,IAAIuF,KAAKU,eAAgBnF,MAAMuF,KAAK,OAItDjK,KAAKgJ,SAASpF,IAAIuF,KAAKU,eAAgBnF,QAE3C1E,KAAKkK,uBAAuBf,OAMhCL,QAAQpI,UAAUwI,OAAS,WAAc,MAAOvE,OAAMqF,KAAKhK,KAAKgJ,SAASE,WAIzEJ,QAAQpI,UAAUyJ,OAAS,WACvB,GAAIpB,OAAQ/I,KACSoK,aAMrB,OALApK,MAAKgJ,SAAS/F,QAAQ,SAAUiG,OAAQC,MACpC,GAAqBnG,SACrBkG,QAAOjG,QAAQ,SAAUa,GAAK,MAAOd,OAAMW,KAAK0G,MAAMrH,MAAOc,EAAEd,MAAM,QACrEoH,WAAarB,MAAME,iBAAiBvF,IAAIyF,OAAWnG,QAEhDoH,YAOXtB,QAAQpI,UAAUiJ,OAAS,SAAUR,MACjC,MAAOnJ,MAAK+J,IAAIZ,MAAQnJ,KAAKgJ,SAAStF,IAAIyF,KAAKU,gBAAkB,KAAO,MAM5Ef,QAAQpI,UAAU4J,QAAU,WAAc,KAAM,IAAI3I,OAAM,yDAK1DmH,QAAQpI,UAAUwJ,uBAAyB,SAAUf,MACjD,GAAqBS,QAAST,KAAKU,aAC9B7J,MAAKiJ,iBAAiBc,IAAIH,SAC3B5J,KAAKiJ,iBAAiBrF,IAAIgG,OAAQT,OAGnCL,WA0CPyB,gBAAmB,WAInB,QAASA,iBAAgBC,MACR,SAATA,OAAmBA,QACvB,IAAI1E,MAAO0E,KAAK1E,KAAM2E,OAASD,KAAKC,OAAQ5E,QAAU2E,KAAK3E,QAAS6E,WAAaF,KAAKE,WAAYxD,KAAOsD,KAAKtD,KAAM1B,IAAMgF,KAAKhF,GAC/HxF,MAAK8F,KAAe,MAARA,KAAeA,KAAO,KAClC9F,KAAKyK,OAAmB,MAAVA,OAAiBA,OAAS,KACxCzK,KAAK6F,QAAqB,MAAXA,QAAkBA,QAAU,KAC3C7F,KAAK0K,WAA2B,MAAdA,WAAqBA,WAAa,KACpD1K,KAAKkH,KAAe,MAARA,KAAeA,KAAO,KAClClH,KAAKwF,IAAa,MAAPA,IAAcA,IAAM,KAuCnC,MAVA+E,iBAAgB7J,UAAUgF,MAAQ,SAAUiF,SACxC,MAAO,IAAIJ,kBACPzE,KAAM6E,SAA2B,MAAhBA,QAAQ7E,KAAe6E,QAAQ7E,KAAO9F,KAAK8F,KAC5D2E,OAAQE,SAA6B,MAAlBA,QAAQF,OAAiBE,QAAQF,OAASzK,KAAKyK,OAClE5E,QAAS8E,SAA8B,MAAnBA,QAAQ9E,QAAkB8E,QAAQ9E,QAAU7F,KAAK6F,QACrE6E,WAAYC,SAAiC,MAAtBA,QAAQD,WAAqBC,QAAQD,WAAa1K,KAAK0K,WAC9ExD,KAAMyD,SAA2B,MAAhBA,QAAQzD,KAAeyD,QAAQzD,KAAOlH,KAAKkH,KAC5D1B,IAAKmF,SAA0B,MAAfA,QAAQnF,IAAcmF,QAAQnF,IAAMxF,KAAKwF,OAG1D+E,mBAgDPK,oBAAuB,SAAUC,QAEjC,QAASD,uBACL,MAAOC,QAAOC,KAAK9K,MAAQyK,OAAQ,IAAKC,WAAY,KAAMxD,KAAMU,aAAaG,QAASlC,QAAS,GAAIiD,YAAgB9I,KAEvH,MAJAI,WAAUwK,oBAAqBC,QAIxBD,qBACTL,gBACFK,qBAAoB3D,aACdC,KAAMjH,cAAckH,aAG1ByD,oBAAoBxD,eAAiB,WAAc,SAenD,IAAI2D,mBAAqB,WACrB,QAASA,sBAET,MAAOA,sBAQPC,WAAc,WACd,QAASA,eAET,MAAOA,eAQPC,aAAgB,WAChB,QAASA,iBAET,MAAOA,iBA4DPC,UAAY,SAAUT,QAAU,MAAQA,SAAU,KAAOA,OAAS,KA+DlEU,aAAgB,WAChB,QAASA,iBAYT,MANAA,cAAazK,UAAU0K,UAAY,SAAUC,GAAK,MAAOxH,kBAAiBwH,IAK1EF,aAAazK,UAAU4K,YAAc,SAAUxH,GAAK,MAAOD,kBAAiBC,IACrEqH,gBAqDP3G,gBAAmB,WAKnB,QAASA,iBAAgB5B,UAAW2I,cACd,SAAd3I,YAAwBA,UAAY,IACnB,SAAjB2I,eAA2BA,aAAe,GAAIJ,eAClDnL,KAAK4C,UAAYA,UACjB5C,KAAKuL,aAAeA,aACpBvL,KAAKwL,UAAY7I,YAAYC,WAiHjC,MA5GA4B,iBAAgB9D,UAAU+K,MAAQ,WAC9B,GAAqBA,OAAQ,GAAIjH,iBAAgB,GAAIxE,KAAKuL,aAE1D,OADAE,OAAMC,UAAU1L,MACTyL,OAMXjH,gBAAgB9D,UAAUqJ,IAAM,SAAU7G,OAAS,MAAOlD,MAAKwL,UAAUzB,IAAI7G,QAK7EsB,gBAAgB9D,UAAUgD,IAAM,SAAUR,OACtC,GAAqByI,aAAc3L,KAAKwL,UAAU9H,IAAIR,MACtD,OAAOyB,OAAMC,QAAQ+G,aAAeA,YAAY,GAAK,MAMzDnH,gBAAgB9D,UAAUiJ,OAAS,SAAUzG,OAAS,MAAOlD,MAAKwL,UAAU9H,IAAIR,YAMhFsB,gBAAgB9D,UAAUkD,IAAM,SAAUV,MAAOM,KAC7C,GAAY,SAARA,KAA0B,OAARA,IAElB,WADAxD,MAAKoJ,OAAOlG,MAGhB,IAAqBO,MAAOzD,KAAKwL,UAAU9H,IAAIR,UAC/CO,MAAKnB,OAAS,EACdmB,KAAKE,KAAKH,KACVxD,KAAKwL,UAAU5H,IAAIV,MAAOO,OAM9Be,gBAAgB9D,UAAUkL,OAAS,SAAUrH,cACzC,GAAIwE,OAAQ/I,IACZuE,cAAaiH,UAAUvI,QAAQ,SAAUyB,MAAOxB,OAC5C,GAAqBO,MAAOsF,MAAMyC,UAAU9H,IAAIR,UAChDO,MAAKnB,OAAS,EACdmB,KAAKE,KAAKe,MAAM,IAChBqE,MAAMyC,UAAU5H,IAAIV,MAAOO,SAQnCe,gBAAgB9D,UAAUoE,OAAS,SAAU5B,MAAOM,KAChD,GAAY,SAARA,KAA0B,OAARA,IAAtB,CAEA,GAAqBC,MAAOzD,KAAKwL,UAAU9H,IAAIR,UAC/CO,MAAKE,KAAKH,KACVxD,KAAKwL,UAAU5H,IAAIV,MAAOO,QAM9Be,gBAAgB9D,UAAUgL,UAAY,SAAUnH,cAC5C,GAAIwE,OAAQ/I,IACZuE,cAAaiH,UAAUvI,QAAQ,SAAUyB,MAAOxB,OAE5C,IAAK,GADgBO,MAAOsF,MAAMyC,UAAU9H,IAAIR,WACtBX,EAAI,EAAGA,EAAImC,MAAMpC,SAAUC,EACjDkB,KAAKE,KAAKe,MAAMnC,GAEpBwG,OAAMyC,UAAU5H,IAAIV,MAAOO,SAOnCe,gBAAgB9D,UAAUmL,WAAa,SAAUtH,cAC7C,GAAIwE,OAAQ/I,IACZuE,cAAaiH,UAAUvI,QAAQ,SAAUyB,MAAOxB,OAC5C,GAAqBO,MAAOsF,MAAMyC,UAAU9H,IAAIR,UAChDO,MAAKnB,OAAS,CACd,KAAK,GAAqBC,GAAI,EAAGA,EAAImC,MAAMpC,SAAUC,EACjDkB,KAAKE,KAAKe,MAAMnC,GAEpBwG,OAAMyC,UAAU5H,IAAIV,MAAOO,SAMnCe,gBAAgB9D,UAAUqE,SAAW,WACjC,GAAIgE,OAAQ/I,KACS8L,aAIrB,OAHA9L,MAAKwL,UAAUvI,QAAQ,SAAUiG,OAAQmC,GACrCnC,OAAOjG,QAAQ,SAAUa,GAAK,MAAOgI,YAAWnI,KAAKoF,MAAMwC,aAAaH,UAAUC,GAAK,IAAMtC,MAAMwC,aAAaD,YAAYxH,QAEzHgI,WAAW7B,KAAK,MAM3BzF,gBAAgB9D,UAAU0I,OAAS,SAAUlG,OAASlD,KAAKwL,UAAUpC,OAAOlG,QACrEsB,mBAmBPuH,KAAQ,WACR,QAASA,SA6ET,MAvEAA,MAAKrL,UAAUsL,KAAO,WAClB,MAA0B,gBAAfhM,MAAKiM,MACL9D,KAAK+D,MAAwBlM,KAAU,OAE9CA,KAAKiM,gBAAiBrD,aACfT,KAAK+D,MAAMlM,KAAKmM,QAEpBnM,KAAKiM,OAkBhBF,KAAKrL,UAAUyL,KAAO,SAAUC,cAE5B,GADqB,SAAjBA,eAA2BA,aAAe,UAC1CpM,KAAKiM,gBAAiBzH,iBACtB,MAAOxE,MAAKiM,MAAMlH,UAEtB,IAAI/E,KAAKiM,gBAAiBrD,aACtB,OAAQwD,cACJ,IAAK,SACD,MAAOC,QAAOC,aAAajC,MAAM,KAAM,GAAIhI,aAA8BrC,KAAU,OACvF,KAAK,WACD,MAAOqM,QAAOC,aAAajC,MAAM,KAAM,GAAIkC,YAA6BvM,KAAU,OACtF,SACI,KAAM,IAAI2B,OAAM,mCAAqCyK,cAGjE,MAAkB,OAAdpM,KAAKiM,MACE,GAEe,gBAAfjM,MAAKiM,MACL9D,KAAKqE,UAAUxM,KAAKiM,MAAO,KAAM,GAErCjM,KAAKiM,MAAMlH,YAMtBgH,KAAKrL,UAAU+L,YAAc,WACzB,MAAIzM,MAAKiM,gBAAiBrD,aACd5I,KAAU,MAEfkC,oBAAoBlC,KAAKmM,SAMpCJ,KAAKrL,UAAUgM,KAAO,WAClB,GAAI1M,KAAKiM,gBAAiBpD,MACtB,MAAQ7I,MAAU,KAEtB,IAAIA,KAAKiM,gBAAiBrD,aACtB,MAAO,IAAIC,OAAM7I,KAAKiM,OAE1B,MAAM,IAAItK,OAAM,4DAEboK,QA2BPY,SAAY,SAAU9B,QAKtB,QAAS8B,UAASC,iBACd,GAAI7D,OAAQ8B,OAAOC,KAAK9K,OAASA,IAQjC,OAPA+I,OAAMkD,MAAQW,gBAAgB9G,KAC9BiD,MAAM0B,OAAWmC,gBAAuB,OACxC7D,MAAM8D,GAAM9D,MAAM0B,QAAU,KAAO1B,MAAM0B,QAAU,IACnD1B,MAAM2B,WAAakC,gBAAgBlC,WACnC3B,MAAMlD,QAAU+G,gBAAgB/G,QAChCkD,MAAM7B,KAAS0F,gBAAqB,KACpC7D,MAAMvD,IAAQoH,gBAAoB,IAC3B7D,MAQX,MArBA3I,WAAUuM,SAAU9B,QAkBpB8B,SAASjM,UAAUqE,SAAW,WAC1B,MAAO,yBAA2B/E,KAAKyK,OAAS,IAAMzK,KAAK0K,WAAa,aAAe1K,KAAKwF,KAEzFmH,UACTZ,MAaEe,eAAiB,EACjBzI,WAAa,eACbD,kBAAoB,KAWpB2I,aAAgB,WAChB,QAASA,iBAmDT,MA7CAA,cAAarM,UAAUqG,MAAQ,SAAUvB,KACrC,GAAqBwH,MAAOC,SAASC,cAAc,SAEnD,OADAF,MAAKG,IAAM3H,IACJwH,MAKXD,aAAarM,UAAU0M,cAAgB,WAAc,MAAO,QAAUN,kBAKtEC,aAAarM,UAAU2M,gBAAkB,SAAUC,IAAM,MAAOjJ,YAAa,IAAMiJ,GAAK,aAMxFP,aAAarM,UAAU6M,iBAAmB,SAAUD,GAAIE,YACpD,GAAqBC,aAAcxJ,sBACnCwJ,aAAYH,IAAME,YAMtBT,aAAarM,UAAUgN,iBAAmB,SAAUJ,IAChD,GAAqBG,aAAcxJ,sBACnCwJ,aAAYH,IAAM,MAMtBP,aAAarM,UAAUiN,KAAO,SAAUX,MAAQC,SAASnH,KAAK8H,YAA6B,OAK3Fb,aAAarM,UAAUmN,QAAU,SAAUb,MACnCA,KAAKc,YACLd,KAAKc,WAAWC,YAA6B,OAG9ChB,eAEXA,cAAa9F,aACPC,KAAMjH,cAAckH,aAG1B4F,aAAa3F,eAAiB,WAAc;;;;;;;AAa5C,GAAI4G,uBAAwB,iDACxBC,uBAAyB,8CAOzBC,gBAAmB,WACnB,QAASA,oBAET,MAAOA,oBAEPC,iBAAoB,SAAUtD,QAO9B,QAASsD,kBAAiBC,IAAKC,KAAMC,qBACjC,GAAIvF,OAAQ8B,OAAOC,KAAK9K,OAASA,IAIjC,IAHA+I,MAAMsF,KAAOA,KACbtF,MAAMuF,oBAAsBA,oBAC5BvF,MAAMwF,WAAY,EACdH,IAAInN,SAAWE,cAAcC,IAC7B,KAAM,IAAIoN,WAAUP,uBA2DxB,OAzDAlF,OAAM7D,QAAUkJ,IAChBrF,MAAM3D,SAAW,GAAIlF,iBAAgBuO,WAAW,SAAUC,kBACtD3F,MAAM4F,WAAatH,WAAWI,OAC9B,IAAqB6F,IAAKvE,MAAM6F,IAAMP,KAAKjB,eAC3CiB,MAAKd,iBAAiBD,GAAIvE,MAG1B,IAAqB8F,UAAWR,KAAKhB,gBAAgBtE,MAAM6F,KACtCpJ,IAAM4I,IAAI5I,GAC3BA,KAAIpC,QAAQ,qBAAsB,EAClCoC,IAAMA,IAAIxB,QAAQ,mBAAoB,IAAM6K,SAAW,KAElDrJ,IAAIsJ,YAAY,qBAAuBtJ,IAAIlD,OAAS,kBAAkBA,SAC3EkD,IAAMA,IAAIuJ,UAAU,EAAGvJ,IAAIlD,OAAS,kBAAkBA,SAAW,IAAMuM,UAE3E,IAAqBG,QAASjG,MAAMkG,QAAUZ,KAAKtH,MAAMvB,KACpC0J,OAAS,SAAUC,OACpC,GAAIpG,MAAM4F,aAAetH,WAAWM,UAApC,CAIA,GAFAoB,MAAM4F,WAAatH,WAAWK,KAC9B2G,KAAKR,QAAQmB,SACRjG,MAAMwF,UAAW,CAClB,GAAqBa,mBAAoB,GAAI7E,kBAAkBzE,KAAMkI,sBAAuB9G,KAAMU,aAAajG,MAAO6D,IAAKA,KAK3H,OAJI8I,uBACAc,kBAAoBd,oBAAoB5I,MAAM0J,wBAElDV,kBAAiBW,MAAM,GAAI1C,UAASyC,oBAGxC,GAAqBxC,iBAAkB,GAAIrC,kBAAkBzE,KAAMiD,MAAMuG,cAAe9J,IAAKA,KACzFuD,OAAMuF,sBACN1B,gBAAkB7D,MAAMuF,oBAAoB5I,MAAMkH,kBAEtD8B,iBAAiBa,KAAK,GAAI5C,UAASC,kBACnC8B,iBAAiBc,aAEAC,QAAU,SAAUJ,OACrC,GAAItG,MAAM4F,aAAetH,WAAWM,UAApC,CAEAoB,MAAM4F,WAAatH,WAAWK,KAC9B2G,KAAKR,QAAQmB,OACb,IAAqBpC,iBAAkB,GAAIrC,kBAAkBzE,KAAMuJ,MAAMK,QAASxI,KAAMU,aAAajG,OACjG2M,uBACA1B,gBAAkB0B,oBAAoB5I,MAAMkH,kBAEhD8B,iBAAiBW,MAAM,GAAI1C,UAASC,mBAKxC,OAHAoC,QAAOW,iBAAiB,OAAQT,QAChCF,OAAOW,iBAAiB,QAASF,SACjCpB,KAAKV,KAAKqB,QACH,WACHjG,MAAM4F,WAAatH,WAAWM,UAC9BqH,OAAOY,oBAAoB,OAAQV,QACnCF,OAAOY,oBAAoB,QAASH,SACpC1G,MAAMsF,KAAKR,QAAQmB,WAGpBjG,MAcX,MArFA3I,WAAU+N,iBAAkBtD,QA6E5BsD,iBAAiBzN,UAAUmP,SAAW,SAAUC,MAE5C9P,KAAKuO,WAAY,EACjBvO,KAAKqO,KAAKX,iBAAiB1N,KAAK4O,KAC5B5O,KAAK2O,aAAetH,WAAWM,YAEnC3H,KAAKsP,cAAgBQ,OAElB3B,kBACTD,iBAOE6B,aAAgB,SAAUlF,QAE1B,QAASkF,gBACL,MAAkB,QAAXlF,QAAmBA,OAAOR,MAAMrK,KAAMgQ,YAAchQ,KAE/D,MAJAI,WAAU2P,aAAclF,QAIjBkF,cACThF,mBACEkF,cAAiB,SAAUpF,QAM3B,QAASoF,eAAcC,cAAeC,sBAClC,GAAIpH,OAAQ8B,OAAOC,KAAK9K,OAASA,IAGjC,OAFA+I,OAAMmH,cAAgBA,cACtBnH,MAAMoH,qBAAuBA,qBACtBpH,MASX,MAlBA3I,WAAU6P,cAAepF,QAezBoF,cAAcvP,UAAUyE,iBAAmB,SAAUD,SACjD,MAAO,IAAIiJ,kBAAiBjJ,QAASlF,KAAKkQ,cAAelQ,KAAKmQ,uBAE3DF,eACTF,aACFE,eAAchJ,aACRC,KAAMjH,cAAckH,aAG1B8I,cAAc7I,eAAiB,WAAc,QACvCF,KAAM6F,eACN7F,KAAMqD;;;;;;;AAcZ,GAAI6F,aAAc,eAWdC,cAAiB,WAMjB,QAASA,eAAcjC,IAAKkC,WAAYhC,qBACpC,GAAIvF,OAAQ/I,IACZA,MAAKkF,QAAUkJ,IACfpO,KAAKoF,SAAW,GAAIlF,iBAAgBuO,WAAW,SAAUC,kBACrD,GAAqB6B,MAAOD,WAAWvJ,OACvCwJ,MAAKC,KAAKrP,cAAciN,IAAInN,QAAQC,cAAekN,IAAI5I,KAC5B,MAAvB4I,IAAIrI,kBACJwK,KAAKxK,gBAAkBqI,IAAIrI,gBAG/B,IAAqBmJ,QAAS,WAE1B,GAAqBzE,QAAyB,OAAhB8F,KAAK9F,OAAkB,IAAM8F,KAAK9F,OAC3C3E,KAAO,IAEb,OAAX2E,SAIA3E,KAAiC,mBAAlByK,MAAKnL,SAA4BmL,KAAKE,aAAeF,KAAKnL,SAErD,gBAATU,QACPA,KAAOA,KAAK9B,QAAQoM,YAAa,MAM1B,IAAX3F,SACAA,OAAS3E,KAAO,IAAM,EAE1B,IAAqBD,SAAUiD,QAAQO,yBAAyBkH,KAAKvO,yBAEhDwD,IAAM5D,eAAe2O,OAASnC,IAAI5I,IAClCkF,WAAa6F,KAAK7F,YAAc,KAChCkC,gBAAkB,GAAIrC,kBAAkBzE,KAAMA,KAAM2E,OAAQA,OAAQ5E,QAASA,QAAS6E,WAAYA,WAAYlF,IAAKA,KAC7G,OAAvB8I,sBACA1B,gBAAkB0B,oBAAoB5I,MAAMkH,iBAEhD,IAAqBxH,UAAW,GAAIuH,UAASC,gBAE7C,OADAxH,UAASyH,GAAK3B,UAAUT,QACpBrF,SAASyH,IACT6B,iBAAiBa,KAAKnK,cAEtBsJ,kBAAiBc,gBAGrBd,kBAAiBW,MAAMjK,WAGNqK,QAAU,SAAUiB,KACrC,GAAqB9D,iBAAkB,GAAIrC,kBACvCzE,KAAM4K,IACNxJ,KAAMU,aAAajG,MACnB8I,OAAQ8F,KAAK9F,OACbC,WAAY6F,KAAK7F,YAEM,OAAvB4D,sBACA1B,gBAAkB0B,oBAAoB5I,MAAMkH,kBAEhD8B,iBAAiBW,MAAM,GAAI1C,UAASC,kBAWxC,IATA7D,MAAM4H,uBAAuBvC,IAAKmC,MACf,MAAfnC,IAAIvI,UACJuI,IAAIvI,QAAU,GAAIiD,UAEjBsF,IAAIvI,QAAQkE,IAAI,WACjBqE,IAAIvI,QAAQf,OAAO,SAAU,qCAEjCsJ,IAAIvI,QAAQ5C,QAAQ,SAAUiG,OAAQC,MAAQ,MAAOoH,MAAKK,iBAAkC,KAAU1H,OAAOe,KAAK,QAE1F,MAApBmE,IAAIpI,cAA6C,MAArBuK,KAAKvK,aACjC,OAAQoI,IAAIpI,cACR,IAAKyC,qBAAoBG,YACrB2H,KAAKvK,aAAe,aACpB,MACJ,KAAKyC,qBAAoBE,KACrB4H,KAAKvK,aAAe,MACpB,MACJ,KAAKyC,qBAAoBC,KACrB6H,KAAKvK,aAAe,MACpB,MACJ,KAAKyC,qBAAoBI,KACrB0H,KAAKvK,aAAe,MACpB,MACJ,SACI,KAAM,IAAIrE,OAAM,8CAM5B,MAHA4O,MAAKZ,iBAAiB,OAAQT,QAC9BqB,KAAKZ,iBAAiB,QAASF,SAC/Bc,KAAK5C,KAAK5E,MAAM7D,QAAQ2L,WACjB,WACHN,KAAKX,oBAAoB,OAAQV,QACjCqB,KAAKX,oBAAoB,QAASH,SAClCc,KAAKO,WAmCjB,MA1BAT,eAAc3P,UAAUiQ,uBAAyB,SAAUvC,IAAyBmC,MAEhF,GAAmB,MAAfnC,IAAIvI,SAAsD,MAAnCuI,IAAIvI,QAAQnC,IAAI,gBAI3C,OAAQ0K,IAAI2C,aACR,IAAK9I,aAAYC,KACb,KACJ,KAAKD,aAAYE,KACboI,KAAKK,iBAAiB,eAAgB,mBACtC,MACJ,KAAK3I,aAAYG,KACbmI,KAAKK,iBAAiB,eAAgB,kDACtC,MACJ,KAAK3I,aAAYK,KACbiI,KAAKK,iBAAiB,eAAgB,aACtC,MACJ,KAAK3I,aAAYM,KACb,GAAqBmE,MAAO0B,IAAI1B,MAC5BA,MAAKxF,MACLqJ,KAAKK,iBAAiB,eAAgBlE,KAAKxF,QAKpDmJ,iBAaPnK,mBAAsB,WAKtB,QAASA,oBAAmB8K,YAAaC,aACjB,SAAhBD,cAA0BA,YAAc,cACxB,SAAhBC,cAA0BA,YAAc,gBAC5CjR,KAAKgR,YAAcA,YACnBhR,KAAKiR,YAAcA,YAYvB,MANA/K,oBAAmBxF,UAAUwQ,iBAAmB,SAAU9C,KACtD,GAAqB+C,WAAYhR,yBAAyBiR,UAAUC,UAAUrR,KAAKgR,YAC/EG,YACA/C,IAAIvI,QAAQjC,IAAI5D,KAAKiR,YAAaE,YAGnCjL,sBA4BPoL,WAAc,WAMd,QAASA,YAAWC,YAAapB,qBAAsBqB,eACnDxR,KAAKuR,YAAcA,YACnBvR,KAAKmQ,qBAAuBA,qBAC5BnQ,KAAKwR,cAAgBA,cAUzB,MAJAF,YAAW5Q,UAAUyE,iBAAmB,SAAUD,SAE9C,MADAlF,MAAKwR,cAAcN,iBAAiBhM,SAC7B,GAAImL,eAAcnL,QAASlF,KAAKuR,YAAavR,KAAKmQ,uBAEtDmB,aAEXA,YAAWrK,aACLC,KAAMjH,cAAckH,aAG1BmK,WAAWlK,eAAiB,WAAc,QACpCF,KAAMJ,aACNI,KAAMqD,kBACNrD,KAAM+D;;;;;;;AAsCZ,GAAItF,gBAAkB,WAIlB,QAASA,gBAAe6E,MACP,SAATA,OAAmBA,QACvB,IAAIvJ,QAASuJ,KAAKvJ,OAAQ4E,QAAU2E,KAAK3E,QAASC,KAAO0E,KAAK1E,KAAMN,IAAMgF,KAAKhF,IAAKI,OAAS4E,KAAK5E,OAAQ7C,OAASyH,KAAKzH,OAAQgD,gBAAkByE,KAAKzE,gBAAiBC,aAAewE,KAAKxE,YAC5LhG,MAAKiB,OAAmB,MAAVA,OAAiBD,oBAAoBC,QAAU,KAC7DjB,KAAK6F,QAAqB,MAAXA,QAAkBA,QAAU,KAC3C7F,KAAK8F,KAAe,MAARA,KAAeA,KAAO,KAClC9F,KAAKwF,IAAa,MAAPA,IAAcA,IAAM,KAC/BxF,KAAK+C,OAAS/C,KAAKyR,mBAAmB1O,QAAU6C,QAChD5F,KAAK+F,gBAAqC,MAAnBA,gBAA0BA,gBAAkB,KACnE/F,KAAKgG,aAA+B,MAAhBA,aAAuBA,aAAe,KAqG9D,MAnGArF,QAAO+Q,eAAe/L,eAAejF,UAAW,UAK5CgD,IAAK,WAAc,MAAO1D,MAAK+C,QAM/Ba,IAAK,SAAUb,QAAU/C,KAAK+C,OAASA,QACvC4O,YAAY,EACZC,cAAc,IA2BlBjM,eAAejF,UAAUgF,MAAQ,SAAUiF,SACvC,MAAO,IAAIhF,iBACP1E,OAAQ0J,SAA6B,MAAlBA,QAAQ1J,OAAiB0J,QAAQ1J,OAASjB,KAAKiB,OAClE4E,QAAS8E,SAA8B,MAAnBA,QAAQ9E,QAAkB8E,QAAQ9E,QAAU,GAAIiD,SAAQ9I,KAAK6F,SACjFC,KAAM6E,SAA2B,MAAhBA,QAAQ7E,KAAe6E,QAAQ7E,KAAO9F,KAAK8F,KAC5DN,IAAKmF,SAA0B,MAAfA,QAAQnF,IAAcmF,QAAQnF,IAAMxF,KAAKwF,IACzDzC,OAAQ4H,SAAW3K,KAAKyR,mBAAmB9G,QAAQ5H,QAAU4H,QAAQ/E,QACrEG,gBAAiB4E,SAAsC,MAA3BA,QAAQ5E,gBAA0B4E,QAAQ5E,gBAClE/F,KAAK+F,gBACTC,aAAc2E,SAAmC,MAAxBA,QAAQ3E,aAAuB2E,QAAQ3E,aAC5DhG,KAAKgG,gBAOjBL,eAAejF,UAAU+Q,mBAAqB,SAAU1O,QACpD,MAAKA,QAEDA,iBAAkByB,iBACXzB,OAAO0I,QAEI,gBAAX1I,QACA,GAAIyB,iBAAgBzB,QAExB/C,KAAK6R,aAAa9O,QAPd/C,KAAK+C,QAapB4C,eAAejF,UAAUmR,aAAe,SAAUC,WAC9C,GAAI/I,OAAQ/I,IACM,UAAd8R,YAAwBA,aAC5B,IAAqB/O,QAAS,GAAIyB,gBAUlC,OATA7D,QAAO8D,KAAKqN,WAAW7O,QAAQ,SAAUM,KACrC,GAAqBmB,OAAQoN,UAAUvO,IACnCoB,OAAMC,QAAQF,OACdA,MAAMzB,QAAQ,SAAU8O,MAAQ,MAAOhJ,OAAMiJ,aAAazO,IAAKwO,KAAMhP,UAGrEgG,MAAMiJ,aAAazO,IAAKmB,MAAO3B,UAGhCA,QAQX4C,eAAejF,UAAUsR,aAAe,SAAUzO,IAAKmB,MAAO3B,QACrC,gBAAV2B,SACPA,MAAQyD,KAAKqE,UAAU9H,QAE3B3B,OAAO+B,OAAOvB,IAAKmB,QAEhBiB,kBAyCPsM,mBAAsB,SAAUpH,QAEhC,QAASoH,sBACL,MAAOpH,QAAOC,KAAK9K,MAAQiB,OAAQE,cAAcC,IAAKyE,QAAS,GAAIiD,YAAgB9I,KAEvF,MAJAI,WAAU6R,mBAAoBpH,QAIvBoH,oBACTtM,eACFsM,oBAAmBhL,aACbC,KAAMjH,cAAckH,aAG1B8K,mBAAmB7K,eAAiB,WAAc;;;;;;;AAoDlD,GAAI8K,SAAW,SAAUrH,QAKrB,QAASqH,SAAQ7L,gBACb,GAAI0C,OAAQ8B,OAAOC,KAAK9K,OAASA,KAEZwF,IAAMa,eAAeb,GAC1CuD,OAAMvD,IAAQa,eAAmB,GACjC,IAAqB8L,WAAY9L,eAAetD,QAAUsD,eAAeT,MACzE,IAAIuM,UAAW,CACX,GAAqBpP,QAAS,MAO9B,IAFIA,OAJqB,gBAAdoP,YAA4BA,oBAAqB3N,iBAI/C2N,UAAUpN,WAHVT,gBAAgB6N,WAAWpN,WAKpChC,OAAOT,OAAS,EAAG,CACnB,GAAqB8P,QAAS,GAC1BrJ,OAAMvD,IAAIpC,QAAQ,OAAQ,IAC1BgP,OAA6C,KAAnCrJ,MAAMvD,IAAIuD,MAAMvD,IAAIlD,OAAS,GAAa,GAAK,KAG7DyG,MAAMvD,IAAMA,IAAM4M,OAASrP,QAWnC,MARAgG,OAAMkD,MAAQ5F,eAAeP,KAC7BiD,MAAM9H,OAASD,oBAAuCqF,eAAsB,QAG5E0C,MAAMlD,QAAU,GAAIiD,SAAQzC,eAAeR,SAC3CkD,MAAMgI,YAAchI,MAAMsJ,oBAC1BtJ,MAAMhD,gBAAoBM,eAA+B,gBACzD0C,MAAM/C,aAAiBK,eAA4B,aAC5C0C,MAyEX,MA5GA3I,WAAU8R,QAASrH,QAyCnBqH,QAAQxR,UAAU2R,kBAAoB,WAClC,OAAQrS,KAAK6F,QAAQnC,IAAI,iBACrB,IAAK,mBACD,MAAOuE,aAAYE,IACvB,KAAK,oCACD,MAAOF,aAAYG,IACvB,KAAK,sBACD,MAAOH,aAAYI,SACvB,KAAK,aACL,IAAK,YACD,MAAOJ,aAAYK,IACvB,KAAK,2BACD,MAAOtI,MAAKiM,gBAAiBqG,eAAgBrK,YAAYO,aAAeP,YAAYM,IACxF,SACI,MAAOvI,MAAKuS,8BAOxBL,QAAQxR,UAAU6R,0BAA4B,WAC1C,MAAkB,OAAdvS,KAAKiM,MACEhE,YAAYC,KAEdlI,KAAKiM,gBAAiBzH,iBACpByD,YAAYG,KAEdpI,KAAKiM,gBAAiBuG,UACpBvK,YAAYI,UAEdrI,KAAKiM,gBAAiBwG,QACpBxK,YAAYM,KAEdvI,KAAKiM,gBAAiBqG,eACpBrK,YAAYO,aAEdxI,KAAKiM,OAA+B,gBAAfjM,MAAKiM,MACxBhE,YAAYE,KAGZF,YAAYK,MAQ3B4J,QAAQxR,UAAUmQ,QAAU,WACxB,OAAQ7Q,KAAK+Q,aACT,IAAK9I,aAAYE,KACb,MAAOnI,MAAKmM,MAChB,KAAKlE,aAAYG,KACb,MAAOpI,MAAKmM,MAChB,KAAKlE,aAAYI,UACb,MAAOrI,MAAKiM,KAChB,KAAKhE,aAAYK,KACb,MAAOtI,MAAKmM,MAChB,KAAKlE,aAAYM,KACb,MAAOvI,MAAK0M,MAChB,KAAKzE,aAAYO,aACb,MAAOxI,MAAKyM,aAChB,SACI,MAAO,QAGZyF,SACTnG,MAkBE2G,KAAO,aACPxO,EAAqB,gBAAVC,QAAqBA,OAASuO,KACzCF,SAAW,EAAkC,UAAKE,KAClDD,OAAS,EAA8B,MAAKC,KAC5CJ,cAAgB,EAAqC,aAAKI,KAyG1DpM,KAAQ,WAKR,QAASA,MAAKqM,SAAUC,iBACpB5S,KAAK2S,SAAWA,SAChB3S,KAAK4S,gBAAkBA,gBA0F3B,MA/EAtM,MAAK5F,UAAUwE,QAAU,SAAUM,IAAKmF,SACpC,GAAqBkI,mBACrB,IAAmB,gBAARrN,KACPqN,mBAAqB7N,YAAYhF,KAAK2S,SAAU,GAAIT,SAAQ7M,aAAarF,KAAK4S,gBAAiBjI,QAASxJ,cAAcC,IAAsB,WAE3I,CAAA,KAAIoE,cAAe0M,UAIpB,KAAM,IAAIvQ,OAAM,2DAHhBkR,oBAAqB7N,YAAYhF,KAAK2S,SAAUnN,KAKpD,MAAOqN,qBAQXvM,KAAK5F,UAAUgD,IAAM,SAAU8B,IAAKmF,SAChC,MAAO3K,MAAKkF,QAAQ,GAAIgN,SAAQ7M,aAAarF,KAAK4S,gBAAiBjI,QAASxJ,cAAcC,IAAKoE,QASnGc,KAAK5F,UAAUoS,KAAO,SAAUtN,IAAKM,KAAM6E,SACvC,MAAO3K,MAAKkF,QAAQ,GAAIgN,SAAQ7M,aAAarF,KAAK4S,gBAAgBlN,MAAM,GAAIC,iBAAiBG,KAAMA,QAAU6E,QAASxJ,cAAcE,KAAMmE,QAS9Ic,KAAK5F,UAAUqS,IAAM,SAAUvN,IAAKM,KAAM6E,SACtC,MAAO3K,MAAKkF,QAAQ,GAAIgN,SAAQ7M,aAAarF,KAAK4S,gBAAgBlN,MAAM,GAAIC,iBAAiBG,KAAMA,QAAU6E,QAASxJ,cAAcG,IAAKkE,QAQ7Ic,KAAK5F,UAAU0I,OAAS,SAAU5D,IAAKmF,SACnC,MAAO3K,MAAKkF,QAAQ,GAAIgN,SAAQ7M,aAAarF,KAAK4S,gBAAiBjI,QAASxJ,cAAcI,OAAQiE,QAStGc,KAAK5F,UAAUsS,MAAQ,SAAUxN,IAAKM,KAAM6E,SACxC,MAAO3K,MAAKkF,QAAQ,GAAIgN,SAAQ7M,aAAarF,KAAK4S,gBAAgBlN,MAAM,GAAIC,iBAAiBG,KAAMA,QAAU6E,QAASxJ,cAAcO,MAAO8D,QAQ/Ic,KAAK5F,UAAUuS,KAAO,SAAUzN,IAAKmF,SACjC,MAAO3K,MAAKkF,QAAQ,GAAIgN,SAAQ7M,aAAarF,KAAK4S,gBAAiBjI,QAASxJ,cAAcM,KAAM+D,QAQpGc,KAAK5F,UAAUiK,QAAU,SAAUnF,IAAKmF,SACpC,MAAO3K,MAAKkF,QAAQ,GAAIgN,SAAQ7M,aAAarF,KAAK4S,gBAAiBjI,QAASxJ,cAAcK,QAASgE,QAEhGc,OAEXA,MAAKW,aACCC,KAAMjH,cAAckH,aAG1Bb,KAAKc,eAAiB,WAAc,QAC9BF,KAAM6D,oBACN7D,KAAMvB,iBAKZ,IAAIc,OAAS,SAAUoE,QAMnB,QAASpE,OAAMxB,QAASiO,gBACpB,MAAOrI,QAAOC,KAAK9K,KAAMiF,QAASiO,iBAAmBlT,KAoCzD,MA1CAI,WAAUqG,MAAOoE,QAyBjBpE,MAAM/F,UAAUwE,QAAU,SAAUM,IAAKmF,SACrC,GAAqBkI,mBAKrB,IAJmB,gBAARrN,OACPA,IACI,GAAI0M,SAAQ7M,aAAarF,KAAK4S,gBAAiBjI,QAASxJ,cAAcC,IAAsB,SAEhGoE,cAAe0M,UAOf,KAAM,IAAIvQ,OAAM,2DANhB,IAAI6D,IAAIvE,SAAWE,cAAcC,IAC7B,KAAM,IAAIO,OAAM,8CAOxB,OALIkR,oBAAqB7N,YAAYhF,KAAK2S,SAAUnN,MAOjDiB,OACTH,KACFG,OAAMQ,aACAC,KAAMjH,cAAckH,aAG1BV,MAAMW,eAAiB,WAAc,QAC/BF,KAAM6D,oBACN7D,KAAMvB,iBA+CZ,IAAIwN,YAAc,WACd,QAASA,eAET,MAAOA,cAEXA,YAAWlM,aACLC,KAAMjH,cAAcmT,SAAUC,OACpBC,YAGMC,QAASjN,KAAMkN,WAAYrN,YAAasN,MAAOnC,WAAY3L,iBAC7DmB,YACEyM,QAAS5N,eAAgB+N,SAAUzB,qBACnCsB,QAAShJ,gBAAiBmJ,SAAU9I,qBACtC0G,YACEiC,QAAStI,aAAcuI,WAAYvN,uCAKzDkN,WAAW/L,eAAiB,WAAc,SAM1C,IAAIuM,aAAe,WACf,QAASA,gBAET,MAAOA,eAEXA,aAAY1M,aACNC,KAAMjH,cAAcmT,SAAUC,OACpBC,YAGMC,QAAS9M,MAAO+M,WAAYjN,aAAckN,MAAO1D,aAAcpK,iBACjEoH,cACEwG,QAAS5N,eAAgB+N,SAAUzB,qBACnCsB,QAAShJ,gBAAiBmJ,SAAU9I,sBACpC2I,QAASxD,aAAc2D,SAAUzD,oBAKvD0D,YAAYvM,eAAiB,WAAc;;;;;;;AAqB3C,GAAIwM,SAAU,GAAI3T,eAAc4T,QAAQ,oBAExCvU,SAAQwH,WAAaA,WACrBxH,QAAQyQ,aAAeA,aACvBzQ,QAAQ4O,gBAAkBA,gBAC1B5O,QAAQ4G,mBAAqBA,mBAC7B5G,QAAQgS,WAAaA,WACrBhS,QAAQ+Q,cAAgBA,cACxB/Q,QAAQ2S,mBAAqBA,mBAC7B3S,QAAQqG,eAAiBA,eACzBrG,QAAQsL,oBAAsBA,oBAC9BtL,QAAQiL,gBAAkBA,gBAC1BjL,QAAQ+H,WAAaA,WACrB/H,QAAQ6B,cAAgBA,cACxB7B,QAAQmJ,oBAAsBA,oBAC9BnJ,QAAQsI,aAAeA,aACvBtI,QAAQwJ,QAAUA,QAClBxJ,QAAQgH,KAAOA,KACfhH,QAAQmH,MAAQA,MAChBnH,QAAQ6T,WAAaA,WACrB7T,QAAQqU,YAAcA,YACtBrU,QAAQ0L,WAAaA,WACrB1L,QAAQyL,kBAAoBA,kBAC5BzL,QAAQuB,mBAAqBA,mBAC7BvB,QAAQyB,oBAAsBA,oBAC9BzB,QAAQ2L,aAAeA,aACvB3L,QAAQ4S,QAAUA,QAClB5S,QAAQqN,SAAWA,SACnBrN,QAAQ6L,aAAeA,aACvB7L,QAAQkF,gBAAkBA,gBAC1BlF,QAAQsU,QAAUA,QAClBtU,QAAQwU,GAAK/G,aACbzN,QAAQyU,GAAK9D,cACb3Q,QAAQ0U,GAAKjI,KACbzM,QAAQ2U,GAAKhO,iCACb3G,QAAQ4U,GAAK/N,YACb7G,QAAQ6U,GAAK5N,aACbjH,QAAQ8U,GAAKtT,YAEbH,OAAO+Q,eAAepS,QAAS,cAAgBoF,OAAO","file":"/home/travis/build/angular/angular/dist/packages-dist/http/bundles/http.umd.min.js","sourcesContent":["/**\n * @license Angular v5.0.0-beta.6-a69172f\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Observable'), require('@angular/platform-browser')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Observable', '@angular/platform-browser'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.http = {}),global.ng.core,global.Rx,global.ng.platformBrowser));\n}(this, (function (exports,_angular_core,rxjs_Observable,_angular_platformBrowser) { 'use strict';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * @license Angular v5.0.0-beta.6-a69172f\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };\n    return BrowserXhr;\n}());\nBrowserXhr.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nBrowserXhr.ctorParameters = function () { return []; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nvar RequestMethod = {\n    Get: 0,\n    Post: 1,\n    Put: 2,\n    Delete: 3,\n    Options: 4,\n    Head: 5,\n    Patch: 6,\n};\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n/** @enum {number} */\nvar ReadyState = {\n    Unsent: 0,\n    Open: 1,\n    HeadersReceived: 2,\n    Loading: 3,\n    Done: 4,\n    Cancelled: 5,\n};\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n/** @enum {number} */\nvar ResponseType = {\n    Basic: 0,\n    Cors: 1,\n    Default: 2,\n    Error: 3,\n    Opaque: 4,\n};\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n/** @enum {number} */\nvar ContentType = {\n    NONE: 0,\n    JSON: 1,\n    FORM: 2,\n    FORM_DATA: 3,\n    TEXT: 4,\n    BLOB: 5,\n    ARRAY_BUFFER: 6,\n};\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n/** @enum {number} */\nvar ResponseContentType = {\n    Text: 0,\n    Json: 1,\n    ArrayBuffer: 2,\n    Blob: 3,\n};\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Headers = (function () {\n    /**\n     * @param {?=} headers\n     */\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var /** @type {?} */ values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name_1 = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name_1, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n    /**\n     * @return {?}\n     */\n    Headers.prototype.toJSON = function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar ResponseOptions = (function () {\n    /**\n     * @param {?=} opts\n     */\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseResponseOptions = (function (_super) {\n    __extends(BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    return BaseResponseOptions;\n}(ResponseOptions));\nBaseResponseOptions.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nBaseResponseOptions.ctorParameters = function () { return []; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar ConnectionBackend = (function () {\n    function ConnectionBackend() {\n    }\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar Connection = (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar XSRFStrategy = (function () {\n    function XSRFStrategy() {\n    }\n    return XSRFStrategy;\n}());\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\nfunction RequestOptionsArgs() { }\n/**\n * Required structure when constructing new Request();\n * @record\n */\nfunction RequestArgs() { }\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\nfunction ResponseOptionsArgs() { }\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated use \\@angular/common/http instead\n *\n */\nvar QueryEncoder = (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar URLSearchParams = (function () {\n    /**\n     * @param {?=} rawParams\n     * @param {?=} queryEncoder\n     */\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    Body.prototype.text = function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = function () {\n        if (this._body instanceof ArrayBuffer) {\n            return (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = function () {\n        if (this._body instanceof Blob) {\n            return (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Response = (function (_super) {\n    __extends(Response, _super);\n    /**\n     * @param {?} responseOptions\n     */\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = ((responseOptions.status));\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = ((responseOptions.type));\n        _this.url = ((responseOptions.url));\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = (function () {\n    function BrowserJsonp() {\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    return BrowserJsonp;\n}());\nBrowserJsonp.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nBrowserJsonp.ctorParameters = function () { return []; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar JSONPConnection = (function () {\n    function JSONPConnection() {\n    }\n    return JSONPConnection;\n}());\nvar JSONPConnection_ = (function (_super) {\n    __extends(JSONPConnection_, _super);\n    /**\n     * @param {?} req\n     * @param {?} _dom\n     * @param {?=} baseResponseOptions\n     */\n    function JSONPConnection_(req, _dom, baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._dom = _dom;\n        _this.baseResponseOptions = baseResponseOptions;\n        _this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        _this.request = req;\n        _this.response = new rxjs_Observable.Observable(function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var /** @type {?} */ id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var /** @type {?} */ callback = _dom.requestCallback(_this._id);\n            var /** @type {?} */ url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var /** @type {?} */ script = _this._script = _dom.build(url);\n            var /** @type {?} */ onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var /** @type {?} */ responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var /** @type {?} */ onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n        return _this;\n    }\n    /**\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection_.prototype.finished = function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection_;\n}(JSONPConnection));\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar JSONPBackend = (function (_super) {\n    __extends(JSONPBackend, _super);\n    function JSONPBackend() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return JSONPBackend;\n}(ConnectionBackend));\nvar JSONPBackend_ = (function (_super) {\n    __extends(JSONPBackend_, _super);\n    /**\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend_.prototype.createConnection = function (request) {\n        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    return JSONPBackend_;\n}(JSONPBackend));\nJSONPBackend_.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nJSONPBackend_.ctorParameters = function () { return [\n    { type: BrowserJsonp, },\n    { type: ResponseOptions, },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRConnection = (function () {\n    /**\n     * @param {?} req\n     * @param {?} browserXHR\n     * @param {?=} baseResponseOptions\n     */\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new rxjs_Observable.Observable(function (responseObserver) {\n            var /** @type {?} */ _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var /** @type {?} */ onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var /** @type {?} */ status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var /** @type {?} */ body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var /** @type {?} */ headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var /** @type {?} */ url = getResponseURL(_xhr) || req.url;\n                var /** @type {?} */ statusText = _xhr.statusText || 'OK';\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var /** @type {?} */ response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var /** @type {?} */ onError = function (err) {\n                var /** @type {?} */ responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(/** @type {?} */ ((name)), values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar CookieXSRFStrategy = (function () {\n    /**\n     * @param {?=} _cookieName\n     * @param {?=} _headerName\n     */\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\n        var /** @type {?} */ xsrfToken = _angular_platformBrowser.ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRBackend = (function () {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    return XHRBackend;\n}());\nXHRBackend.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nXHRBackend.ctorParameters = function () { return [\n    { type: BrowserXhr, },\n    { type: ResponseOptions, },\n    { type: XSRFStrategy, },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar RequestOptions = (function () {\n    /**\n     * @param {?=} opts\n     */\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        get: function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        set: function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseRequestOptions = (function (_super) {\n    __extends(BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    return BaseRequestOptions;\n}(RequestOptions));\nBaseRequestOptions.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nBaseRequestOptions.ctorParameters = function () { return []; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Request = (function (_super) {\n    __extends(Request, _super);\n    /**\n     * @param {?} requestOptions\n     */\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var /** @type {?} */ url = requestOptions.url;\n        _this.url = ((requestOptions.url));\n        var /** @type {?} */ paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var /** @type {?} */ params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var /** @type {?} */ prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(/** @type {?} */ ((requestOptions.method)));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = ((requestOptions.withCredentials));\n        _this.responseType = ((requestOptions.responseType));\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    var /** @type {?} */ searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var /** @type {?} */ value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = ((w) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Http = (function () {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    return Http;\n}());\nHttp.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nHttp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar Jsonp = (function (_super) {\n    __extends(Jsonp, _super);\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    return Jsonp;\n}(Http));\nJsonp.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nJsonp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar HttpModule = (function () {\n    function HttpModule() {\n    }\n    return HttpModule;\n}());\nHttpModule.decorators = [\n    { type: _angular_core.NgModule, args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                    BrowserXhr,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    XHRBackend,\n                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                ],\n            },] },\n];\n/** @nocollapse */\nHttpModule.ctorParameters = function () { return []; };\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JsonpModule = (function () {\n    function JsonpModule() {\n    }\n    return JsonpModule;\n}());\nJsonpModule.decorators = [\n    { type: _angular_core.NgModule, args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                    BrowserJsonp,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    { provide: JSONPBackend, useClass: JSONPBackend_ },\n                ],\n            },] },\n];\n/** @nocollapse */\nJsonpModule.ctorParameters = function () { return []; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar VERSION = new _angular_core.Version('5.0.0-beta.6-a69172f');\n\nexports.BrowserXhr = BrowserXhr;\nexports.JSONPBackend = JSONPBackend;\nexports.JSONPConnection = JSONPConnection;\nexports.CookieXSRFStrategy = CookieXSRFStrategy;\nexports.XHRBackend = XHRBackend;\nexports.XHRConnection = XHRConnection;\nexports.BaseRequestOptions = BaseRequestOptions;\nexports.RequestOptions = RequestOptions;\nexports.BaseResponseOptions = BaseResponseOptions;\nexports.ResponseOptions = ResponseOptions;\nexports.ReadyState = ReadyState;\nexports.RequestMethod = RequestMethod;\nexports.ResponseContentType = ResponseContentType;\nexports.ResponseType = ResponseType;\nexports.Headers = Headers;\nexports.Http = Http;\nexports.Jsonp = Jsonp;\nexports.HttpModule = HttpModule;\nexports.JsonpModule = JsonpModule;\nexports.Connection = Connection;\nexports.ConnectionBackend = ConnectionBackend;\nexports.RequestOptionsArgs = RequestOptionsArgs;\nexports.ResponseOptionsArgs = ResponseOptionsArgs;\nexports.XSRFStrategy = XSRFStrategy;\nexports.Request = Request;\nexports.Response = Response;\nexports.QueryEncoder = QueryEncoder;\nexports.URLSearchParams = URLSearchParams;\nexports.VERSION = VERSION;\nexports.ɵg = BrowserJsonp;\nexports.ɵa = JSONPBackend_;\nexports.ɵf = Body;\nexports.ɵb = _createDefaultCookieXSRFStrategy;\nexports.ɵc = httpFactory;\nexports.ɵd = jsonpFactory;\nexports.ɵe = RequestArgs;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=http.umd.js.map\n"]}