{"version":3,"sources":["packages/http/http.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","http","core","rxjs","platformBrowser","this","RequestMethod","ReadyState","ResponseType","ContentType","ResponseContentType","BrowserXhr","prototype","build","XMLHttpRequest","decorators","type","Injectable","ctorParameters","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","Headers","headers","_this","_headers","Map","_normalizedNames","forEach","values","name","append","keys","isArray","delete","fromResponseHeaderString","headersString","split","line","index","indexOf","name_1","slice","trim","set","getAll","lcName","toLowerCase","fn","get","length","has","from","join","mayBeSetNormalizedName","toJSON","serialized","v","apply","__spread","arguments","concat","entries","Error","ResponseOptions","opts","body","status","statusText","url","merge","options","BaseResponseOptions","_super","Default","ConnectionBackend","Connection","XSRFStrategy","normalizeMethodName","method","toUpperCase","Get","Post","Put","Delete","Options","Head","Patch","isSuccess","QueryEncoder","encodeKey","k","standardEncoding","encodeValue","encodeURIComponent","replace","URLSearchParams","rawParams","queryEncoder","paramsMap","paramParser","map","param","eqIdx","_a","key","val","list","clone","appendAll","storedParam","setAll","searchParams","replaceAll","toString","paramsList","Body","json","_body","JSON","parse","ArrayBuffer","text","encodingHint","String","fromCharCode","Uint16Array","Uint8Array","stringify","arrayBuffer","stringToArrayBuffer","input","view","strLen","charCodeAt","buffer","blob","Blob","Response","responseOptions","ok","_nextRequestId","JSONP_HOME","_jsonpConnections","_getJsonpConnections","w","window","BrowserJsonp","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","removeConnection","send","appendChild","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","req","_dom","baseResponseOptions","_finished","TypeError","request","response","Observable","responseObserver","readyState","Loading","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","Cancelled","Done","responseOptions_1","_responseData","complete","onError","message","addEventListener","removeEventListener","finished","data","JSONPBackend","_browserJSONP","_baseResponseOptions","createConnection","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","withCredentials","responseText","getAllResponseHeaders","getResponseURL","xhr","responseURL","test","getResponseHeader","err","setDetectedContentType","setRequestHeader","responseType","Json","Text","getBody","abort","contentType","NONE","FORM","TEXT","BLOB","CookieXSRFStrategy","_cookieName","_headerName","configureRequest","xsrfToken","ɵgetDOM","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","RequestOptions","search","params","_mergeSearchParams","defineProperty","enumerable","configurable","_parseParams","objParams","item","_appendParam","BaseRequestOptions","Request","requestOptions","paramsArg","urlEncodeParams","element","prefix","detectContentType","FORM_DATA","ArrayBuffer$1","ARRAY_BUFFER","detectContentTypeFromBody","FormData","Blob$1","noop","httpRequest","backend","mergeOptions","defaultOpts","providedOpts","Http","_backend","_defaultOptions","responseObservable","post","put","patch","head","Jsonp","defaultOptions","_createDefaultCookieXSRFStrategy","httpFactory","xhrBackend","jsonpFactory","jsonpBackend","HttpModule","NgModule","args","providers","provide","useFactory","deps","useClass","JsonpModule","VERSION","Version","ɵangular_packages_http_http_e","ɵangular_packages_http_http_f","ɵangular_packages_http_http_a","ɵangular_packages_http_http_b","ɵangular_packages_http_http_c"],"mappings":";;;;;CAMC,SAAUA,EAAQC,GACC,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,QAASA,QAAQ,8BACjH,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,iBAAkB,UAAW,gBAAiB,OAAQ,6BAA8BJ,GACvIA,GAASD,EAAOO,GAAKP,EAAOO,OAAUP,EAAOO,GAAGC,SAAWR,EAAOO,GAAGE,KAAKT,EAAOU,KAAKV,EAAOO,GAAGI,iBAHlG,CAIEC,KAAM,SAAWV,EAAQO,EAAKC,EAAKC,GAAmB;;;;;;;GAgBxD,IA0GWE,EA4BAC,EAwBAC,EAePC,EA2BOC,EAxMPC,EAA4B,WAC5B,SAASA,KAQT,OANAA,EAAWC,UAAUC,MAAQ,WAAc,OAAO,IAAKC,gBACvDH,EAAWI,aACLC,KAAMd,EAAKe,aAGjBN,EAAWO,eAAiB,WAAc,UACnCP,EAToB,GA4B3BQ,EAAgBC,OAAOC,iBACpBC,wBAA2BC,OAAS,SAAUC,EAAGC,GAAKD,EAAEF,UAAYG,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC,KAEzE,SAASE,EAAUJ,EAAGC,GAElB,SAASI,IAAOxB,KAAKyB,YAAcN,EADnCL,EAAcK,EAAGC,GAEjBD,EAAEZ,UAAkB,OAANa,EAAaL,OAAOW,OAAON,IAAMI,EAAGjB,UAAYa,EAAEb,UAAW,IAAIiB,GAqBnF,SAASG,EAAOC,EAAGC,GACf,IAAIC,EAAsB,mBAAXC,QAAyBH,EAAEG,OAAOC,UACjD,IAAKF,EAAG,OAAOF,EACf,IAAmBK,EAAYC,EAA3BC,EAAIL,EAAEM,KAAKR,GAAOS,KACtB,IACI,WAAc,IAANR,GAAgBA,KAAM,MAAQI,EAAIE,EAAEG,QAAQC,MAAMF,EAAGG,KAAKP,EAAEQ,OAExE,MAAOC,GAASR,GAAMQ,MAAOA,GAC7B,QACI,IACQT,IAAMA,EAAEM,OAAST,EAAIK,EAAU,SAAIL,EAAEM,KAAKD,GAElD,QAAU,GAAID,EAAG,MAAMA,EAAEQ,OAE7B,OAAOL;;;;;;;;;;;;;;;AAoCApC,EAQRX,EAAQW,gBAAkBX,EAAQW,mBAPnBA,EAAmB,IAAI,GAAK,MAC1CA,EAAcA,EAAoB,KAAI,GAAK,OAC3CA,EAAcA,EAAmB,IAAI,GAAK,MAC1CA,EAAcA,EAAsB,OAAI,GAAK,SAC7CA,EAAcA,EAAuB,QAAI,GAAK,UAC9CA,EAAcA,EAAoB,KAAI,GAAK,OAC3CA,EAAcA,EAAqB,MAAI,GAAK,SAqBrCC,EAORZ,EAAQY,aAAeZ,EAAQY,gBANnBA,EAAmB,OAAI,GAAK,SACvCA,EAAWA,EAAiB,KAAI,GAAK,OACrCA,EAAWA,EAA4B,gBAAI,GAAK,kBAChDA,EAAWA,EAAoB,QAAI,GAAK,UACxCA,EAAWA,EAAiB,KAAI,GAAK,OACrCA,EAAWA,EAAsB,UAAI,GAAK,aAkBnCC,EAMRb,EAAQa,eAAiBb,EAAQa,kBALnBA,EAAoB,MAAI,GAAK,QAC1CA,EAAaA,EAAmB,KAAI,GAAK,OACzCA,EAAaA,EAAsB,QAAI,GAAK,UAC5CA,EAAaA,EAAoB,MAAI,GAAK,QAC1CA,EAAaA,EAAqB,OAAI,GAAK,SAe/C,SAAWC,GACPA,EAAYA,EAAkB,KAAI,GAAK,OACvCA,EAAYA,EAAkB,KAAI,GAAK,OACvCA,EAAYA,EAAkB,KAAI,GAAK,OACvCA,EAAYA,EAAuB,UAAI,GAAK,YAC5CA,EAAYA,EAAkB,KAAI,GAAK,OACvCA,EAAYA,EAAkB,KAAI,GAAK,OACvCA,EAAYA,EAA0B,aAAI,GAAK,eAPnD,CAQGA,IAAgBA,QAcRC,EAKRf,EAAQe,sBAAwBf,EAAQe,yBAJnBA,EAA0B,KAAI,GAAK,OACvDA,EAAoBA,EAA0B,KAAI,GAAK,OACvDA,EAAoBA,EAAiC,YAAI,GAAK,cAC9DA,EAAoBA,EAA0B,KAAI,GAAK;;;;;;;;AAsC3D,IAAIsC,EAAyB,WAEzB,SAASA,EAAQC,GACb,IAAIC,EAAQ7C,KAEZA,KAAK8C,SAAW,IAAIC,IAEpB/C,KAAKgD,iBAAmB,IAAID,IACvBH,IAGDA,aAAmBD,EACnBC,EAAQK,QAAQ,SAAUC,EAAQC,GAC9BD,EAAOD,QAAQ,SAAUR,GAAS,OAAOI,EAAMO,OAAOD,EAAMV,OAIpE1B,OAAOsC,KAAKT,GAASK,QAAQ,SAAUE,GACnC,IAAID,EAAShC,MAAMoC,QAAQV,EAAQO,IAASP,EAAQO,IAASP,EAAQO,IACrEN,EAAMU,OAAOJ,GACbD,EAAOD,QAAQ,SAAUR,GAAS,OAAOI,EAAMO,OAAOD,EAAMV,QAgLpE,OAvKAE,EAAQa,yBAGR,SAAUC,GACN,IAAIb,EAAU,IAAID,EASlB,OARAc,EAAcC,MAAM,MAAMT,QAAQ,SAAUU,GACxC,IAAIC,EAAQD,EAAKE,QAAQ,KACzB,GAAID,EAAQ,EAAG,CACX,IAAIE,EAASH,EAAKI,MAAM,EAAGH,GACvBnB,EAAQkB,EAAKI,MAAMH,EAAQ,GAAGI,OAClCpB,EAAQqB,IAAIH,EAAQrB,MAGrBG,GAQXD,EAAQpC,UAAU6C,OAGlB,SAAUD,EAAMV,GACZ,IAAIS,EAASlD,KAAKkE,OAAOf,GACV,OAAXD,EACAlD,KAAKiE,IAAId,EAAMV,GAGfS,EAAOV,KAAKC,IASpBE,EAAQpC,UAAUgD,OAGlB,SAAUJ,GACN,IAAIgB,EAAShB,EAAKiB,cAClBpE,KAAKgD,iBAAiBO,OAAOY,GAC7BnE,KAAK8C,SAASS,OAAOY,IAEzBxB,EAAQpC,UAAU0C,QAAU,SAAUoB,GAClC,IAAIxB,EAAQ7C,KACZA,KAAK8C,SAASG,QAAQ,SAAUC,EAAQiB,GAAU,OAAOE,EAAGnB,EAAQL,EAAMG,iBAAiBsB,IAAIH,GAAStB,EAAMC,aAQlHH,EAAQpC,UAAU+D,IAGlB,SAAUnB,GACN,IAAID,EAASlD,KAAKkE,OAAOf,GACzB,OAAe,OAAXD,EACO,KAEJA,EAAOqB,OAAS,EAAIrB,EAAO,GAAK,MAQ3CP,EAAQpC,UAAUiE,IAGlB,SAAUrB,GAAQ,OAAOnD,KAAK8C,SAAS0B,IAAIrB,EAAKiB,gBAOhDzB,EAAQpC,UAAU8C,KAGlB,WAAc,OAAOnC,MAAMuD,KAAKzE,KAAKgD,iBAAiBE,WAOtDP,EAAQpC,UAAU0D,IAGlB,SAAUd,EAAMV,GACRvB,MAAMoC,QAAQb,GACVA,EAAM8B,QACNvE,KAAK8C,SAASmB,IAAId,EAAKiB,eAAgB3B,EAAMiC,KAAK,OAItD1E,KAAK8C,SAASmB,IAAId,EAAKiB,eAAgB3B,IAE3CzC,KAAK2E,uBAAuBxB,IAQhCR,EAAQpC,UAAU2C,OAGlB,WAAc,OAAOhC,MAAMuD,KAAKzE,KAAK8C,SAASI,WAS9CP,EAAQpC,UAAUqE,OAIlB,WACI,IAAI/B,EAAQ7C,KACR6E,KAMJ,OALA7E,KAAK8C,SAASG,QAAQ,SAAUC,EAAQC,GACpC,IAAIO,KACJR,EAAOD,QAAQ,SAAU6B,GAAK,OAAOpB,EAAMlB,KAAKuC,MAAMrB,EA5UlE,SAASsB,IACL,IAAK,IAAI3C,KAASF,EAAI,EAAGA,EAAI8C,UAAUV,OAAQpC,IAC3CE,EAAKA,EAAG6C,OAAOvD,EAAOsD,UAAU9C,KACpC,OAAOE;;;;;;;;;;;;;;GAyU8D2C,CAASF,EAAEpB,MAAM,SAC9EmB,EAAWhC,EAAMG,iBAAiBsB,IAAInB,IAASO,IAE5CmB,GAQXlC,EAAQpC,UAAU2D,OAGlB,SAAUf,GACN,OAAOnD,KAAKwE,IAAIrB,IAAQnD,KAAK8C,SAASwB,IAAInB,EAAKiB,gBAAyB,MAQ5EzB,EAAQpC,UAAU4E,QAGlB,WAAc,MAAM,IAAIC,MAAM,yDAC9BzC,EAAQpC,UAAUoE,uBAAyB,SAAUxB,GACjD,IAAIgB,EAAShB,EAAKiB,cACbpE,KAAKgD,iBAAiBwB,IAAIL,IAC3BnE,KAAKgD,iBAAiBiB,IAAIE,EAAQhB,IAGnCR,EApMiB,GA0OxB0C,EAAiC,WACjC,SAASA,EAAgBC,QACR,IAATA,IAAmBA,MACvB,IAAIC,EAAOD,EAAKC,KAAMC,EAASF,EAAKE,OAAQ5C,EAAU0C,EAAK1C,QAAS6C,EAAaH,EAAKG,WAAY9E,EAAO2E,EAAK3E,KAAM+E,EAAMJ,EAAKI,IAC/H1F,KAAKuF,KAAe,MAARA,EAAeA,EAAO,KAClCvF,KAAKwF,OAAmB,MAAVA,EAAiBA,EAAS,KACxCxF,KAAK4C,QAAqB,MAAXA,EAAkBA,EAAU,KAC3C5C,KAAKyF,WAA2B,MAAdA,EAAqBA,EAAa,KACpDzF,KAAKW,KAAe,MAARA,EAAeA,EAAO,KAClCX,KAAK0F,IAAa,MAAPA,EAAcA,EAAM,KAuFnC,OAnCAL,EAAgB9E,UAAUoF,MAyB1B,SAAUC,GACN,OAAO,IAAIP,GACPE,KAAMK,GAA2B,MAAhBA,EAAQL,KAAeK,EAAQL,KAAOvF,KAAKuF,KAC5DC,OAAQI,GAA6B,MAAlBA,EAAQJ,OAAiBI,EAAQJ,OAASxF,KAAKwF,OAClE5C,QAASgD,GAA8B,MAAnBA,EAAQhD,QAAkBgD,EAAQhD,QAAU5C,KAAK4C,QACrE6C,WAAYG,GAAiC,MAAtBA,EAAQH,WAAqBG,EAAQH,WAAazF,KAAKyF,WAC9E9E,KAAMiF,GAA2B,MAAhBA,EAAQjF,KAAeiF,EAAQjF,KAAOX,KAAKW,KAC5D+E,IAAKE,GAA0B,MAAfA,EAAQF,IAAcE,EAAQF,IAAM1F,KAAK0F,OAG1DL,EAhGyB,GAgJhCQ,EAAqC,SAAUC,GAE/C,SAASD,IACL,OAAOC,EAAO1D,KAAKpC,MAAQwF,OAAQ,IAAKC,WAAY,KAAM9E,KAAMrB,EAAQa,aAAa4F,QAASnD,QAAS,IAAID,KAAgB3C,KAO/H,OATAuB,EAAUsE,EAAqBC,GAI/BD,EAAoBnF,aACdC,KAAMd,EAAKe,aAGjBiF,EAAoBhF,eAAiB,WAAc,UAC5CgF,EAV6B,CAWtCR,GAiBEW,EACA,SAASA,MASTC,EACA,SAASA,MASTC,EACA,SAASA;;;;;;;;;;;;;;;AAYb,SAASC,EAAoBC,GACzB,GAAsB,iBAAXA,EACP,OAAOA,EACX,OAAQA,EAAOC,eACX,IAAK,MACD,OAAO/G,EAAQW,cAAcqG,IACjC,IAAK,OACD,OAAOhH,EAAQW,cAAcsG,KACjC,IAAK,MACD,OAAOjH,EAAQW,cAAcuG,IACjC,IAAK,SACD,OAAOlH,EAAQW,cAAcwG,OACjC,IAAK,UACD,OAAOnH,EAAQW,cAAcyG,QACjC,IAAK,OACD,OAAOpH,EAAQW,cAAc0G,KACjC,IAAK,QACD,OAAOrH,EAAQW,cAAc2G,MAErC,MAAM,IAAIxB,MAAM,uCAA0CgB,EAAS,uBAEvE,IAAIS,EAAY,SAAUrB,GAAU,OAAQA,GAAU,KAAOA,EAAS,KA4ClEsB,EAA8B,WAC9B,SAASA,KAIT,OAFAA,EAAavG,UAAUwG,UAAY,SAAUC,GAAK,OAAOC,EAAiBD,IAC1EF,EAAavG,UAAU2G,YAAc,SAAUpC,GAAK,OAAOmC,EAAiBnC,IACrEgC,EALsB,GAOjC,SAASG,EAAiBnC,GACtB,OAAOqC,mBAAmBrC,GACrBsC,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KAqC1B,IAAIC,EAAiC,WACjC,SAASA,EAAgBC,EAAWC,QACd,IAAdD,IAAwBA,EAAY,SACnB,IAAjBC,IAA2BA,EAAe,IAAIT,GAClD9G,KAAKsH,UAAYA,EACjBtH,KAAKuH,aAAeA,EACpBvH,KAAKwH;;;;;;;;AA9Eb,SAASC,EAAYH,QACC,IAAdA,IAAwBA,EAAY,IACxC,IAAII,EAAM,IAAI3E,IAWd,OAVIuE,EAAU/C,OAAS,GACN+C,EAAU5D,MAAM,KACtBT,QAAQ,SAAU0E,GACrB,IAAIC,EAAQD,EAAM9D,QAAQ,KACtBgE,EAAKlG,GAAiB,GAAViG,GAAeD,EAAO,KAAOA,EAAM5D,MAAM,EAAG6D,GAAQD,EAAM5D,MAAM6D,EAAQ,IAAK,GAAIE,EAAMD,EAAG,GAAIE,EAAMF,EAAG,GACnHG,EAAON,EAAIpD,IAAIwD,OACnBE,EAAKxF,KAAKuF,GACVL,EAAIzD,IAAI6D,EAAKE,KAGdN,EAiEcD,CAAYH,GAsIjC,OApIAD,EAAgB9G,UAAU0H,MAAQ,WAC9B,IAAIA,EAAQ,IAAIZ,EAAgB,GAAIrH,KAAKuH,cAEzC,OADAU,EAAMC,UAAUlI,MACTiI,GAEXZ,EAAgB9G,UAAUiE,IAAM,SAAUmD,GAAS,OAAO3H,KAAKwH,UAAUhD,IAAImD,IAC7EN,EAAgB9G,UAAU+D,IAAM,SAAUqD,GACtC,IAAIQ,EAAcnI,KAAKwH,UAAUlD,IAAIqD,GACrC,OAAOzG,MAAMoC,QAAQ6E,GAAeA,EAAY,GAAK,MAEzDd,EAAgB9G,UAAU2D,OAAS,SAAUyD,GAAS,OAAO3H,KAAKwH,UAAUlD,IAAIqD,QAChFN,EAAgB9G,UAAU0D,IAAM,SAAU0D,EAAOI,GAC7C,QAAY,IAARA,GAA0B,OAARA,EAAtB,CAIA,IAAIC,EAAOhI,KAAKwH,UAAUlD,IAAIqD,OAC9BK,EAAKzD,OAAS,EACdyD,EAAKxF,KAAKuF,GACV/H,KAAKwH,UAAUvD,IAAI0D,EAAOK,QANtBhI,KAAKuD,OAAOoE,IAoBpBN,EAAgB9G,UAAU6H,OAO1B,SAAUC,GACN,IAAIxF,EAAQ7C,KACZqI,EAAab,UAAUvE,QAAQ,SAAUR,EAAOkF,GAC5C,IAAIK,EAAOnF,EAAM2E,UAAUlD,IAAIqD,OAC/BK,EAAKzD,OAAS,EACdyD,EAAKxF,KAAKC,EAAM,IAChBI,EAAM2E,UAAUvD,IAAI0D,EAAOK,MAGnCX,EAAgB9G,UAAU6C,OAAS,SAAUuE,EAAOI,GAChD,QAAY,IAARA,GAA0B,OAARA,EAAtB,CAEA,IAAIC,EAAOhI,KAAKwH,UAAUlD,IAAIqD,OAC9BK,EAAKxF,KAAKuF,GACV/H,KAAKwH,UAAUvD,IAAI0D,EAAOK,KAgB9BX,EAAgB9G,UAAU2H,UAQ1B,SAAUG,GACN,IAAIxF,EAAQ7C,KACZqI,EAAab,UAAUvE,QAAQ,SAAUR,EAAOkF,GAE5C,IADA,IAAIK,EAAOnF,EAAM2E,UAAUlD,IAAIqD,OACtBxF,EAAI,EAAGA,EAAIM,EAAM8B,SAAUpC,EAChC6F,EAAKxF,KAAKC,EAAMN,IAEpBU,EAAM2E,UAAUvD,IAAI0D,EAAOK,MAiBnCX,EAAgB9G,UAAU+H,WAQ1B,SAAUD,GACN,IAAIxF,EAAQ7C,KACZqI,EAAab,UAAUvE,QAAQ,SAAUR,EAAOkF,GAC5C,IAAIK,EAAOnF,EAAM2E,UAAUlD,IAAIqD,OAC/BK,EAAKzD,OAAS,EACd,IAAK,IAAIpC,EAAI,EAAGA,EAAIM,EAAM8B,SAAUpC,EAChC6F,EAAKxF,KAAKC,EAAMN,IAEpBU,EAAM2E,UAAUvD,IAAI0D,EAAOK,MAGnCX,EAAgB9G,UAAUgI,SAAW,WACjC,IAAI1F,EAAQ7C,KACRwI,KAMJ,OALAxI,KAAKwH,UAAUvE,QAAQ,SAAUC,EAAQ8D,GACrC9D,EAAOD,QAAQ,SAAU6B,GACrB,OAAO0D,EAAWhG,KAAKK,EAAM0E,aAAaR,UAAUC,GAAK,IAAMnE,EAAM0E,aAAaL,YAAYpC,QAG/F0D,EAAW9D,KAAK,MAE3B2C,EAAgB9G,UAAUgD,OAAS,SAAUoE,GAAS3H,KAAKwH,UAAUjE,OAAOoE,IACrEN,EA5IyB,GA0JhCoB,EAAsB,WACtB,SAASA,KAsHT,OA9GAA,EAAKlI,UAAUmI,KAGf,WACI,MAA0B,iBAAf1I,KAAK2I,MACLC,KAAKC,MAAM7I,KAAK2I,OAEvB3I,KAAK2I,iBAAiBG,YACfF,KAAKC,MAAM7I,KAAK+I,QAEpB/I,KAAK2I,OA8BhBF,EAAKlI,UAAUwI,KAcf,SAAUC,GAEN,QADqB,IAAjBA,IAA2BA,EAAe,UAC1ChJ,KAAK2I,iBAAiBtB,EACtB,OAAOrH,KAAK2I,MAAMJ,WAEtB,GAAIvI,KAAK2I,iBAAiBG,YACtB,OAAQE,GACJ,IAAK,SACD,OAAOC,OAAOC,aAAanE,MAAM,KAAM,IAAIoE,YAAYnJ,KAAK2I,QAChE,IAAK,WACD,OAAOM,OAAOC,aAAanE,MAAM,KAAM,IAAIqE,WAAWpJ,KAAK2I,QAC/D,QACI,MAAM,IAAIvD,MAAM,mCAAqC4D,GAGjE,OAAkB,MAAdhJ,KAAK2I,MACE,GAEe,iBAAf3I,KAAK2I,MACLC,KAAKS,UAAUrJ,KAAK2I,MAAO,KAAM,GAErC3I,KAAK2I,MAAMJ,YAQtBE,EAAKlI,UAAU+I,YAGf,WACI,OAAItJ,KAAK2I,iBAAiBG,YACf9I,KAAK2I,MAlVxB,SAASY,EAAoBC,GAEzB,IADA,IAAIC,EAAO,IAAIN,YAAYK,EAAMjF,QACxBpC,EAAI,EAAGuH,EAASF,EAAMjF,OAAQpC,EAAIuH,EAAQvH,IAC/CsH,EAAKtH,GAAKqH,EAAMG,WAAWxH,GAE/B,OAAOsH,EAAKG,OA+UDL,CAAoBvJ,KAAK+I,SAQpCN,EAAKlI,UAAUsJ,KAGf,WACI,GAAI7J,KAAK2I,iBAAiBmB,KACtB,OAAO9J,KAAK2I,MAEhB,GAAI3I,KAAK2I,iBAAiBG,YACtB,OAAO,IAAIgB,MAAM9J,KAAK2I,QAE1B,MAAM,IAAIvD,MAAM,4DAEbqD,EAvHc,GAqJrBsB,EAA0B,SAAUjE,GAEpC,SAASiE,EAASC,GACd,IAAInH,EAAQiD,EAAO1D,KAAKpC,OAASA,KAQjC,OAPA6C,EAAM8F,MAAQqB,EAAgBzE,KAC9B1C,EAAM2C,OAAUwE,EAAsB,OACtCnH,EAAMoH,GAAMpH,EAAM2C,QAAU,KAAO3C,EAAM2C,QAAU,IACnD3C,EAAM4C,WAAauE,EAAgBvE,WACnC5C,EAAMD,QAAUoH,EAAgBpH,QAChCC,EAAMlC,KAAQqJ,EAAoB,KAClCnH,EAAM6C,IAAOsE,EAAmB,IACzBnH,EAKX,OAfAtB,EAAUwI,EAAUjE,GAYpBiE,EAASxJ,UAAUgI,SAAW,WAC1B,MAAO,yBAA2BvI,KAAKwF,OAAS,IAAMxF,KAAKyF,WAAa,aAAezF,KAAK0F,KAEzFqE,EAhBkB,CAiB3BtB,GASEyB,EAAiB,EACjBC,EAAa,eACbC,EAAoB;;;;;;;GACxB,SAASC,IACL,IAAIC,EAAqB,iBAAVC,OAAqBA,UAIpC,OAH0B,OAAtBH,IACAA,EAAoBE,EAAEH,OAEnBC,EAGX,IAAII,EAA8B,WAC9B,SAASA,KAwCT,OApCAA,EAAajK,UAAUC,MAEvB,SAAUkF,GACN,IAAI+E,EAAOC,SAASC,cAAc,UAElC,OADAF,EAAKG,IAAMlF,EACJ+E,GAEXD,EAAajK,UAAUsK,cAAgB,WAAc,MAAO,QAAUX,KACtEM,EAAajK,UAAUuK,gBAAkB,SAAUC,GAAM,OAAOZ,EAAa,IAAMY,EAAK,aACxFP,EAAajK,UAAUyK,iBAAmB,SAAUD,EAAIE,GAClCZ,IACNU,GAAME,GAEtBT,EAAajK,UAAU2K,iBAAmB,SAAUH,GAC9BV,IACNU,GAAM,MAItBP,EAAajK,UAAU4K,KAEvB,SAAUV,GAAQC,SAASnF,KAAK6F,YAAY,IAG5CZ,EAAajK,UAAU8K,QAEvB,SAAUZ,GACFA,EAAKa,YACLb,EAAKa,WAAWC,YAAY,IAGpCf,EAAa9J,aACPC,KAAMd,EAAKe,aAGjB4J,EAAa3J,eAAiB,WAAc,UACrC2J,EAzCsB,GAmD7BgB,EAAwB,iDACxBC,EAAyB,8CAMzBC,EAAiC,WAEjC,SAASA,EAAgBC,EAAKC,EAAMC,GAChC,IAAIhJ,EAAQ7C,KAIZ,GAHAA,KAAK4L,KAAOA,EACZ5L,KAAK6L,oBAAsBA,EAC3B7L,KAAK8L,WAAY,EACbH,EAAIvF,SAAW9G,EAAQW,cAAcqG,IACrC,MAAM,IAAIyF,UAAUN,GAExBzL,KAAKgM,QAAUL,EACf3L,KAAKiM,SAAW,IAAInM,EAAKoM,WAAW,SAAUC,GAC1CtJ,EAAMuJ,WAAa9M,EAAQY,WAAWmM,QACtC,IAAItB,EAAKlI,EAAMyJ,IAAMV,EAAKf,gBAC1Be,EAAKZ,iBAAiBD,EAAIlI,GAG1B,IAAI0J,EAAWX,EAAKd,gBAAgBjI,EAAMyJ,KACtC5G,EAAMiG,EAAIjG,IACVA,EAAI7B,QAAQ,qBAAuB,EACnC6B,EAAMA,EAAI0B,QAAQ,mBAAoB,IAAMmF,EAAW,KAElD7G,EAAI8G,YAAY,qBAAuB9G,EAAInB,OAAS,kBAAkBA,SAC3EmB,EAAMA,EAAI+G,UAAU,EAAG/G,EAAInB,OAAS,kBAAkBA,QAAW,IAAMgI,GAE3E,IAAIG,EAAS7J,EAAM8J,QAAUf,EAAKpL,MAAMkF,GACpCkH,EAAS,SAAUC,GACnB,GAAIhK,EAAMuJ,aAAe9M,EAAQY,WAAW4M,UAA5C,CAIA,GAFAjK,EAAMuJ,WAAa9M,EAAQY,WAAW6M,KACtCnB,EAAKP,QAAQqB,IACR7J,EAAMiJ,UAAW,CAClB,IAAIkB,EAAoB,IAAI3H,GAAkBE,KAAMiG,EAAuB7K,KAAMrB,EAAQa,aAAaiF,MAAOM,IAAKA,IAKlH,OAJImG,IACAmB,EAAoBnB,EAAoBlG,MAAMqH,SAElDb,EAAiBzJ,MAAM,IAAIqH,EAASiD,IAGxC,IAAIhD,EAAkB,IAAI3E,GAAkBE,KAAM1C,EAAMoK,cAAevH,IAAKA,IACxE7C,EAAMgJ,sBACN7B,EAAkBnH,EAAMgJ,oBAAoBlG,MAAMqE,IAEtDmC,EAAiB7J,KAAK,IAAIyH,EAASC,IACnCmC,EAAiBe,aAEjBC,EAAU,SAAUzK,GACpB,GAAIG,EAAMuJ,aAAe9M,EAAQY,WAAW4M,UAA5C,CAEAjK,EAAMuJ,WAAa9M,EAAQY,WAAW6M,KACtCnB,EAAKP,QAAQqB,GACb,IAAI1C,EAAkB,IAAI3E,GAAkBE,KAAM7C,EAAM0K,QAASzM,KAAMrB,EAAQa,aAAaiF,QACxFyG,IACA7B,EAAkB6B,EAAoBlG,MAAMqE,IAEhDmC,EAAiBzJ,MAAM,IAAIqH,EAASC,MAKxC,OAHA0C,EAAOW,iBAAiB,OAAQT,GAChCF,EAAOW,iBAAiB,QAASF,GACjCvB,EAAKT,KAAKuB,GACH,WACH7J,EAAMuJ,WAAa9M,EAAQY,WAAW4M,UACtCJ,EAAOY,oBAAoB,OAAQV,GACnCF,EAAOY,oBAAoB,QAASH,GACpCtK,EAAM+I,KAAKP,QAAQqB,MAwB/B,OAZAhB,EAAgBnL,UAAUgN,SAI1B,SAAUC,GAENxN,KAAK8L,WAAY,EACjB9L,KAAK4L,KAAKV,iBAAiBlL,KAAKsM,KAC5BtM,KAAKoM,aAAe9M,EAAQY,WAAW4M,YAE3C9M,KAAKiN,cAAgBO,IAElB9B,EAxFyB,GA+FhC+B,EAA8B,SAAU3H,GAGxC,SAAS2H,EAAaC,EAAeC,GACjC,IAAI9K,EAAQiD,EAAO1D,KAAKpC,OAASA,KAGjC,OAFA6C,EAAM6K,cAAgBA,EACtB7K,EAAM8K,qBAAuBA,EACtB9K,EAaX,OAnBAtB,EAAUkM,EAAc3H,GAQxB2H,EAAalN,UAAUqN,iBAAmB,SAAU5B,GAChD,OAAO,IAAIN,EAAgBM,EAAShM,KAAK0N,cAAe1N,KAAK2N,uBAEjEF,EAAa/M,aACPC,KAAMd,EAAKe,aAGjB6M,EAAa5M,eAAiB,WAAc,QACtCF,KAAM6J,IACN7J,KAAM0E,KAELoI,EApBsB,CAqB/BzH,GASE6H,EAAc,eAWdC,EAA+B,WAC/B,SAASA,EAAcnC,EAAKoC,EAAYlC,GACpC,IAAIhJ,EAAQ7C,KACZA,KAAKgM,QAAUL,EACf3L,KAAKiM,SAAW,IAAInM,EAAKoM,WAAW,SAAUC,GAC1C,IAAI6B,EAAOD,EAAWvN,QACtBwN,EAAKC,KAAK3O,EAAQW,cAAc0L,EAAIvF,QAAQC,cAAesF,EAAIjG,KACpC,MAAvBiG,EAAIuC,kBACJF,EAAKE,gBAAkBvC,EAAIuC,iBAG/B,IAAItB,EAAS,WAET,IAAIpH,EAAyB,OAAhBwI,EAAKxI,OAAkB,IAAMwI,EAAKxI,OAC3CD,EAAO,KAEI,MAAXC,GAMoB,iBAFpBD,OAAiC,IAAlByI,EAAK/B,SAA4B+B,EAAKG,aAAeH,EAAK/B,YAGrE1G,EAAOA,EAAK6B,QAAQyG,EAAa,KAM1B,IAAXrI,IACAA,EAASD,EAAO,IAAM,GAE1B,IAAI3C,EAAUD,EAAQa,yBAAyBwK,EAAKI,yBAEhD1I,EAzpBpB,SAAS2I,EAAeC,GACpB,MAAI,gBAAiBA,EACVA,EAAIC,YAEX,mBAAmBC,KAAKF,EAAIF,yBACrBE,EAAIG,kBAAkB,iBAE1B,KAkpBeJ,CAAeL,IAASrC,EAAIjG,IAElCsE,EAAkB,IAAI3E,GAAkBE,KAAMA,EAAMC,OAAQA,EAAQ5C,QAASA,EAAS6C,WADzEuI,EAAKvI,YAAc,KAC8EC,IAAKA,IAC5F,MAAvBmG,IACA7B,EAAkB6B,EAAoBlG,MAAMqE,IAEhD,IAAIiC,EAAW,IAAIlC,EAASC,GAE5B,GADAiC,EAAShC,GAAKpD,EAAUrB,GACpByG,EAAShC,GAIT,OAHAkC,EAAiB7J,KAAK2J,QAEtBE,EAAiBe,WAGrBf,EAAiBzJ,MAAMuJ,IAGvBkB,EAAU,SAAUuB,GACpB,IAAI1E,EAAkB,IAAI3E,GACtBE,KAAMmJ,EACN/N,KAAMrB,EAAQa,aAAaiF,MAC3BI,OAAQwI,EAAKxI,OACbC,WAAYuI,EAAKvI,aAEM,MAAvBoG,IACA7B,EAAkB6B,EAAoBlG,MAAMqE,IAEhDmC,EAAiBzJ,MAAM,IAAIqH,EAASC,KAWxC,GATAnH,EAAM8L,uBAAuBhD,EAAKqC,GACf,MAAfrC,EAAI/I,UACJ+I,EAAI/I,QAAU,IAAID,GAEjBgJ,EAAI/I,QAAQ4B,IAAI,WACjBmH,EAAI/I,QAAQQ,OAAO,SAAU,qCAEjCuI,EAAI/I,QAAQK,QAAQ,SAAUC,EAAQC,GAAQ,OAAO6K,EAAKY,iBAAiB,EAAQ1L,EAAOwB,KAAK,QAEvE,MAApBiH,EAAIkD,cAA6C,MAArBb,EAAKa,aACjC,OAAQlD,EAAIkD,cACR,KAAKvP,EAAQe,oBAAoByI,YAC7BkF,EAAKa,aAAe,cACpB,MACJ,KAAKvP,EAAQe,oBAAoByO,KAC7Bd,EAAKa,aAAe,OACpB,MACJ,KAAKvP,EAAQe,oBAAoB0O,KAC7Bf,EAAKa,aAAe,OACpB,MACJ,KAAKvP,EAAQe,oBAAoByJ,KAC7BkE,EAAKa,aAAe,OACpB,MACJ,QACI,MAAM,IAAIzJ,MAAM,8CAM5B,OAHA4I,EAAKX,iBAAiB,OAAQT,GAC9BoB,EAAKX,iBAAiB,QAASF,GAC/Ba,EAAK7C,KAAKtI,EAAMmJ,QAAQgD,WACjB,WACHhB,EAAKV,oBAAoB,OAAQV,GACjCoB,EAAKV,oBAAoB,QAASH,GAClCa,EAAKiB,WA8BjB,OA1BAnB,EAAcvN,UAAUoO,uBAAyB,SAAUhD,EAAyBqC,GAEhF,GAAmB,MAAfrC,EAAI/I,SAAsD,MAAnC+I,EAAI/I,QAAQ0B,IAAI,gBAI3C,OAAQqH,EAAIuD,aACR,KAAK9O,EAAY+O,KACb,MACJ,KAAK/O,EAAYwI,KACboF,EAAKY,iBAAiB,eAAgB,oBACtC,MACJ,KAAKxO,EAAYgP,KACbpB,EAAKY,iBAAiB,eAAgB,mDACtC,MACJ,KAAKxO,EAAYiP,KACbrB,EAAKY,iBAAiB,eAAgB,cACtC,MACJ,KAAKxO,EAAYkP,KACb,IAAIzF,EAAO8B,EAAI9B,OACXA,EAAKlJ,MACLqN,EAAKY,iBAAiB,eAAgB/E,EAAKlJ,QAKpDmN,EA9HuB,GA2I9ByB,EAAoC,WACpC,SAASA,EAAmBC,EAAaC,QACjB,IAAhBD,IAA0BA,EAAc,mBACxB,IAAhBC,IAA0BA,EAAc,gBAC5CzP,KAAKwP,YAAcA,EACnBxP,KAAKyP,YAAcA,EAQvB,OANAF,EAAmBhP,UAAUmP,iBAAmB,SAAU/D,GACtD,IAAIgE,EAAY5P,EAAgB6P,UAAUC,UAAU7P,KAAKwP,aACrDG,GACAhE,EAAI/I,QAAQqB,IAAIjE,KAAKyP,YAAaE,IAGnCJ,EAb4B,GAyCnCO,EAA4B,WAC5B,SAASA,EAAWC,EAAapC,EAAsBqC,GACnDhQ,KAAK+P,YAAcA,EACnB/P,KAAK2N,qBAAuBA,EAC5B3N,KAAKgQ,cAAgBA,EAezB,OAbAF,EAAWvP,UAAUqN,iBAAmB,SAAU5B,GAE9C,OADAhM,KAAKgQ,cAAcN,iBAAiB1D,GAC7B,IAAI8B,EAAc9B,EAAShM,KAAK+P,YAAa/P,KAAK2N,uBAE7DmC,EAAWpP,aACLC,KAAMd,EAAKe,aAGjBkP,EAAWjP,eAAiB,WAAc,QACpCF,KAAML,IACNK,KAAM0E,IACN1E,KAAMuF,KAEL4J,EAnBoB,GAqD3BG,EAAgC,WAEhC,SAASA,EAAe3K,QACP,IAATA,IAAmBA,MACvB,IAAIc,EAASd,EAAKc,OAAQxD,EAAU0C,EAAK1C,QAAS2C,EAAOD,EAAKC,KAAMG,EAAMJ,EAAKI,IAAKwK,EAAS5K,EAAK4K,OAAQC,EAAS7K,EAAK6K,OAAQjC,EAAkB5I,EAAK4I,gBAAiBW,EAAevJ,EAAKuJ,aAC5L7O,KAAKoG,OAAmB,MAAVA,EAAiBD,EAAoBC,GAAU,KAC7DpG,KAAK4C,QAAqB,MAAXA,EAAkBA,EAAU,KAC3C5C,KAAKuF,KAAe,MAARA,EAAeA,EAAO,KAClCvF,KAAK0F,IAAa,MAAPA,EAAcA,EAAM,KAC/B1F,KAAKmQ,OAASnQ,KAAKoQ,mBAAmBD,GAAUD,GAChDlQ,KAAKkO,gBAAqC,MAAnBA,EAA0BA,EAAkB,KACnElO,KAAK6O,aAA+B,MAAhBA,EAAuBA,EAAe,KAsI9D,OApIA9N,OAAOsP,eAAeJ,EAAe1P,UAAW,UAI5C+D,IAGA,WAAc,OAAOtE,KAAKmQ,QAI1BlM,IAGA,SAAUkM,GAAUnQ,KAAKmQ,OAASA,GAClCG,YAAY,EACZC,cAAc,IAgDlBN,EAAe1P,UAAUoF,MAuBzB,SAAUC,GACN,OAAO,IAAIqK,GACP7J,OAAQR,GAA6B,MAAlBA,EAAQQ,OAAiBR,EAAQQ,OAASpG,KAAKoG,OAClExD,QAASgD,GAA8B,MAAnBA,EAAQhD,QAAkBgD,EAAQhD,QAAU,IAAID,EAAQ3C,KAAK4C,SACjF2C,KAAMK,GAA2B,MAAhBA,EAAQL,KAAeK,EAAQL,KAAOvF,KAAKuF,KAC5DG,IAAKE,GAA0B,MAAfA,EAAQF,IAAcE,EAAQF,IAAM1F,KAAK0F,IACzDyK,OAAQvK,GAAW5F,KAAKoQ,mBAAmBxK,EAAQuK,QAAUvK,EAAQsK,QACrEhC,gBAAiBtI,GAAsC,MAA3BA,EAAQsI,gBAA0BtI,EAAQsI,gBAClElO,KAAKkO,gBACTW,aAAcjJ,GAAmC,MAAxBA,EAAQiJ,aAAuBjJ,EAAQiJ,aAC5D7O,KAAK6O,gBAGjBoB,EAAe1P,UAAU6P,mBAAqB,SAAUD,GACpD,OAAKA,EAEDA,aAAkB9I,EACX8I,EAAOlI,QAEI,iBAAXkI,EACA,IAAI9I,EAAgB8I,GAExBnQ,KAAKwQ,aAAaL,GAPdnQ,KAAKmQ,QASpBF,EAAe1P,UAAUiQ,aAAe,SAAUC,GAC9C,IAAI5N,EAAQ7C,UACM,IAAdyQ,IAAwBA,MAC5B,IAAIN,EAAS,IAAI9I,EAUjB,OATAtG,OAAOsC,KAAKoN,GAAWxN,QAAQ,SAAU6E,GACrC,IAAIrF,EAAQgO,EAAU3I,GAClB5G,MAAMoC,QAAQb,GACdA,EAAMQ,QAAQ,SAAUyN,GAAQ,OAAO7N,EAAM8N,aAAa7I,EAAK4I,EAAMP,KAGrEtN,EAAM8N,aAAa7I,EAAKrF,EAAO0N,KAGhCA,GAEXF,EAAe1P,UAAUoQ,aAAe,SAAU7I,EAAKrF,EAAO0N,GACrC,iBAAV1N,IACPA,EAAQmG,KAAKS,UAAU5G,IAE3B0N,EAAO/M,OAAO0E,EAAKrF,IAEhBwN,EAjJwB,GA0L/BW,EAAoC,SAAU9K,GAE9C,SAAS8K,IACL,OAAO9K,EAAO1D,KAAKpC,MAAQoG,OAAQ9G,EAAQW,cAAcqG,IAAK1D,QAAS,IAAID,KAAgB3C,KAO/F,OATAuB,EAAUqP,EAAoB9K,GAI9B8K,EAAmBlQ,aACbC,KAAMd,EAAKe,aAGjBgQ,EAAmB/P,eAAiB,WAAc,UAC3C+P,EAV4B,CAWrCX,GAiDEY,EAAyB,SAAU/K,GAEnC,SAAS+K,EAAQC,GACb,IAAIjO,EAAQiD,EAAO1D,KAAKpC,OAASA,KAE7B0F,EAAMoL,EAAepL,IACzB7C,EAAM6C,IAAOoL,EAAkB,IAC/B,IAEQX,EAFJY,EAAYD,EAAeX,QAAUW,EAAeZ,OACxD,GAAIa,IAMIZ,EAJqB,iBAAdY,GAA4BA,aAAqB1J,EAI/C0J,EAAUxI,WAkHnC,SAASyI,EAAgBb,GACrB,IAAI9H,EAAe,IAAIhB,EAUvB,OATAtG,OAAOsC,KAAK8M,GAAQlN,QAAQ,SAAU6E,GAClC,IAAIrF,EAAQ0N,EAAOrI,GACfrF,GAASvB,MAAMoC,QAAQb,GACvBA,EAAMQ,QAAQ,SAAUgO,GAAW,OAAO5I,EAAajF,OAAO0E,EAAKmJ,EAAQ1I,cAG3EF,EAAajF,OAAO0E,EAAKrF,EAAM8F,cAGhCF,EAhIc2I,CAAgBD,GAAWxI,YAK7BhE,OAAS,EAAG,CACnB,IAAI2M,EAAS,KACkB,GAA3BrO,EAAM6C,IAAI7B,QAAQ,OAClBqN,EAA6C,KAAnCrO,EAAM6C,IAAI7C,EAAM6C,IAAInB,OAAS,GAAa,GAAK,KAI7D1B,EAAM6C,IAAMA,EAAMwL,EAASf,EAanC,OAVAtN,EAAM8F,MAAQmI,EAAevL,KAC7B1C,EAAMuD,OAASD,EAAqB2K,EAAqB,QAKzDjO,EAAMD,QAAU,IAAID,EAAQmO,EAAelO,SAC3CC,EAAMqM,YAAcrM,EAAMsO,oBAC1BtO,EAAMqL,gBAAmB4C,EAA8B,gBACvDjO,EAAMgM,aAAgBiC,EAA2B,aAC1CjO,EA0FX,OA7HAtB,EAAUsP,EAAS/K,GA2CnB+K,EAAQtQ,UAAU4Q,kBAGlB,WACI,OAAQnR,KAAK4C,QAAQ0B,IAAI,iBACrB,IAAK,mBACD,OAAOlE,EAAYwI,KACvB,IAAK,oCACD,OAAOxI,EAAYgP,KACvB,IAAK,sBACD,OAAOhP,EAAYgR,UACvB,IAAK,aACL,IAAK,YACD,OAAOhR,EAAYiP,KACvB,IAAK,2BACD,OAAOrP,KAAK2I,iBAAiB0I,EAAgBjR,EAAYkR,aAAelR,EAAYkP,KACxF,QACI,OAAOtP,KAAKuR,8BASxBV,EAAQtQ,UAAUgR,0BAGlB,WACI,OAAkB,MAAdvR,KAAK2I,MACEvI,EAAY+O,KAEdnP,KAAK2I,iBAAiBtB,EACpBjH,EAAYgP,KAEdpP,KAAK2I,iBAAiB6I,EACpBpR,EAAYgR,UAEdpR,KAAK2I,iBAAiB8I,EACpBrR,EAAYkP,KAEdtP,KAAK2I,iBAAiB0I,EACpBjR,EAAYkR,aAEdtR,KAAK2I,OAA+B,iBAAf3I,KAAK2I,MACxBvI,EAAYwI,KAGZxI,EAAYiP,MAW3BwB,EAAQtQ,UAAUyO,QAIlB,WACI,OAAQhP,KAAKkP,aACT,KAAK9O,EAAYwI,KAEjB,KAAKxI,EAAYgP,KACb,OAAOpP,KAAK+I,OAChB,KAAK3I,EAAYgR,UACb,OAAOpR,KAAK2I,MAChB,KAAKvI,EAAYiP,KACb,OAAOrP,KAAK+I,OAChB,KAAK3I,EAAYkP,KACb,OAAOtP,KAAK6J,OAChB,KAAKzJ,EAAYkR,aACb,OAAOtR,KAAKsJ,cAChB,QACI,OAAO,OAGZuH,EA9HiB,CA+H1BpI,GAcEiJ,EAAO,aACPpH,EAAqB,iBAAVC,OAAqBA,OAASmH,EACzCF,EAAWlH,EAA8B,UAAKoH,EAC9CD,EAASnH,EAA0B,MAAKoH,EACxCL,EAAgB/G,EAAiC,aAAKoH;;;;;;;;;;;;;;;AAS1D,SAASC,EAAYC,EAAS5F,GAC1B,OAAO4F,EAAQhE,iBAAiB5B,GAASC,SAE7C,SAAS4F,EAAaC,EAAaC,EAAc3L,EAAQV,GAErD,OADiBoM,EAGKnM,MAAM,IAAIsK,EAF5B8B,GAGI3L,OAAQ2L,EAAa3L,QAAUA,EAC/BV,IAAKqM,EAAarM,KAAOA,EACzBwK,OAAQ6B,EAAa7B,OACrBC,OAAQ4B,EAAa5B,OACrBvN,QAASmP,EAAanP,QACtB2C,KAAMwM,EAAaxM,KACnB2I,gBAAiB6D,EAAa7D,gBAC9BW,aAAckD,EAAalD,eAGUzI,OAAQA,EAAQV,IAAKA,KA+DtE,IAAIsM,EAAsB,WACtB,SAASA,EAAKC,EAAUC,GACpBlS,KAAKiS,SAAWA,EAChBjS,KAAKkS,gBAAkBA,EA6H3B,OA/GAF,EAAKzR,UAAUyL,QAMf,SAAUtG,EAAKE,GACX,IAAIuM,EACJ,GAAmB,iBAARzM,EACPyM,EAAqBR,EAAY3R,KAAKiS,SAAU,IAAIpB,EAAQgB,EAAa7R,KAAKkS,gBAAiBtM,EAAStG,EAAQW,cAAcqG,IAAKZ,SAElI,CAAA,KAAIA,aAAemL,GAIpB,MAAM,IAAIzL,MAAM,4DAHhB+M,EAAqBR,EAAY3R,KAAKiS,SAAUvM,GAKpD,OAAOyM,GAQXH,EAAKzR,UAAU+D,IAGf,SAAUoB,EAAKE,GACX,OAAO5F,KAAKgM,QAAQ,IAAI6E,EAAQgB,EAAa7R,KAAKkS,gBAAiBtM,EAAStG,EAAQW,cAAcqG,IAAKZ,MAQ3GsM,EAAKzR,UAAU6R,KAGf,SAAU1M,EAAKH,EAAMK,GACjB,OAAO5F,KAAKgM,QAAQ,IAAI6E,EAAQgB,EAAa7R,KAAKkS,gBAAgBvM,MAAM,IAAIsK,GAAiB1K,KAAMA,KAAUK,EAAStG,EAAQW,cAAcsG,KAAMb,MAQtJsM,EAAKzR,UAAU8R,IAGf,SAAU3M,EAAKH,EAAMK,GACjB,OAAO5F,KAAKgM,QAAQ,IAAI6E,EAAQgB,EAAa7R,KAAKkS,gBAAgBvM,MAAM,IAAIsK,GAAiB1K,KAAMA,KAAUK,EAAStG,EAAQW,cAAcuG,IAAKd,MAQrJsM,EAAKzR,UAAUgD,OAGf,SAAUmC,EAAKE,GACX,OAAO5F,KAAKgM,QAAQ,IAAI6E,EAAQgB,EAAa7R,KAAKkS,gBAAiBtM,EAAStG,EAAQW,cAAcwG,OAAQf,MAQ9GsM,EAAKzR,UAAU+R,MAGf,SAAU5M,EAAKH,EAAMK,GACjB,OAAO5F,KAAKgM,QAAQ,IAAI6E,EAAQgB,EAAa7R,KAAKkS,gBAAgBvM,MAAM,IAAIsK,GAAiB1K,KAAMA,KAAUK,EAAStG,EAAQW,cAAc2G,MAAOlB,MAQvJsM,EAAKzR,UAAUgS,KAGf,SAAU7M,EAAKE,GACX,OAAO5F,KAAKgM,QAAQ,IAAI6E,EAAQgB,EAAa7R,KAAKkS,gBAAiBtM,EAAStG,EAAQW,cAAc0G,KAAMjB,MAQ5GsM,EAAKzR,UAAUqF,QAGf,SAAUF,EAAKE,GACX,OAAO5F,KAAKgM,QAAQ,IAAI6E,EAAQgB,EAAa7R,KAAKkS,gBAAiBtM,EAAStG,EAAQW,cAAcyG,QAAShB,MAE/GsM,EAAKtR,aACCC,KAAMd,EAAKe,aAGjBoR,EAAKnR,eAAiB,WAAc,QAC9BF,KAAMqF,IACNrF,KAAMsP,KAEL+B,EAhIc,GAqIrBQ,EAAuB,SAAU1M,GAEjC,SAAS0M,EAAMZ,EAASa,GACpB,OAAO3M,EAAO1D,KAAKpC,KAAM4R,EAASa,IAAmBzS,KAqEzD,OAvEAuB,EAAUiR,EAAO1M,GAgCjB0M,EAAMjS,UAAUyL,QAchB,SAAUtG,EAAKE,GAMX,GAJmB,iBAARF,IACPA,EACI,IAAImL,EAAQgB,EAAa7R,KAAKkS,gBAAiBtM,EAAStG,EAAQW,cAAcqG,IAAKZ,OAEvFA,aAAemL,GAOf,MAAM,IAAIzL,MAAM,4DANhB,GAAIM,EAAIU,SAAW9G,EAAQW,cAAcqG,IACrC,MAAM,IAAIlB,MAAM,+CAOxB,OALyBuM,EAAY3R,KAAKiS,SAAUvM,IAOxD8M,EAAM9R,aACAC,KAAMd,EAAKe,aAGjB4R,EAAM3R,eAAiB,WAAc,QAC/BF,KAAMqF,IACNrF,KAAMsP,KAELuC,EAxEe,CAyExBR;;;;;;;;AASF,SAASU,IACL,OAAO,IAAInD,EAEf,SAASoD,EAAYC,EAAY9B,GAC7B,OAAO,IAAIkB,EAAKY,EAAY9B,GAEhC,SAAS+B,EAAaC,EAAchC,GAChC,OAAO,IAAI0B,EAAMM,EAAchC,GAOnC,IAAIiC,GAA4B,WAC5B,SAASA,KAkBT,OAhBAA,EAAWrS,aACLC,KAAMd,EAAKmT,SAAUC,OACXC,YAGMC,QAASnB,EAAMoB,WAAYT,EAAaU,MAAOvD,EAAYG,IAC7D3P,GACE6S,QAASlD,EAAgBqD,SAAU1C,IACnCuC,QAAS9N,EAAiBiO,SAAUzN,GACtCiK,GACEqD,QAASjN,EAAckN,WAAYV,QAKzDK,EAAWlS,eAAiB,WAAc,UACnCkS,EAnBoB,GA0B3BQ,GAA6B,WAC7B,SAASA,KAiBT,OAfAA,EAAY7S,aACNC,KAAMd,EAAKmT,SAAUC,OACXC,YAGMC,QAASX,EAAOY,WAAYP,EAAcQ,MAAO5F,EAAcwC,IACjEzF,GACE2I,QAASlD,EAAgBqD,SAAU1C,IACnCuC,QAAS9N,EAAiBiO,SAAUzN,GACtC4H,OAKpB8F,EAAY1S,eAAiB,WAAc,UACpC0S,EAlBqB,GA+B5BC,GAAU,IAAI3T,EAAK4T,QAAQ;;;;;;;;;;;;;;;;;;;;;;AAgC/BnU,EAAQoU,8BAAgClJ,EACxClL,EAAQqU,8BAAgClL,EACxCnJ,EAAQsU,8BAAgClB,EACxCpT,EAAQuU,8BAAgClB,EACxCrT,EAAQwU,8BAAgCjB,EACxCvT,EAAQgB,WAAaA,EACrBhB,EAAQmO,aAAeA,EACvBnO,EAAQoM,gBAAkBA,EAC1BpM,EAAQiQ,mBAAqBA,EAC7BjQ,EAAQwQ,WAAaA,EACrBxQ,EAAQwO,cAAgBA,EACxBxO,EAAQsR,mBAAqBA,EAC7BtR,EAAQ2Q,eAAiBA,EACzB3Q,EAAQuG,oBAAsBA,EAC9BvG,EAAQ+F,gBAAkBA,EAC1B/F,EAAQqD,QAAUA,EAClBrD,EAAQ0S,KAAOA,EACf1S,EAAQkT,MAAQA,EAChBlT,EAAQyT,WAAaA,GACrBzT,EAAQiU,YAAcA,GACtBjU,EAAQ2G,WAAaA,EACrB3G,EAAQ0G,kBAAoBA,EAC5B1G,EAAQ4G,aAAeA,EACvB5G,EAAQuR,QAAUA,EAClBvR,EAAQyK,SAAWA,EACnBzK,EAAQwH,aAAeA,EACvBxH,EAAQ+H,gBAAkBA,EAC1B/H,EAAQkU,QAAUA,GAElBzS,OAAOsP,eAAe/Q,EAAS,cAAgBmD,OAAO","sourcesContent":["/**\n * @license Angular v6.0.3\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/platform-browser')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/http', ['exports', '@angular/core', 'rxjs', '@angular/platform-browser'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.http = {}),global.ng.core,global.rxjs,global.ng.platformBrowser));\n}(this, (function (exports,core,rxjs,platformBrowser) { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated use @angular/common/http instead\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n    BrowserXhr.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Supported http methods.\n * @deprecated use @angular/common/http instead\n */\n/**\n * Supported http methods.\n * @deprecated use @angular/common/http instead\n */\n\n/**\n * Supported http methods.\n * @deprecated use @angular/common/http instead\n */\n(function (RequestMethod) {\n    RequestMethod[RequestMethod[\"Get\"] = 0] = \"Get\";\n    RequestMethod[RequestMethod[\"Post\"] = 1] = \"Post\";\n    RequestMethod[RequestMethod[\"Put\"] = 2] = \"Put\";\n    RequestMethod[RequestMethod[\"Delete\"] = 3] = \"Delete\";\n    RequestMethod[RequestMethod[\"Options\"] = 4] = \"Options\";\n    RequestMethod[RequestMethod[\"Head\"] = 5] = \"Head\";\n    RequestMethod[RequestMethod[\"Patch\"] = 6] = \"Patch\";\n})(exports.RequestMethod || (exports.RequestMethod = {}));\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated use @angular/common/http instead\n */\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated use @angular/common/http instead\n */\n\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated use @angular/common/http instead\n */\n(function (ReadyState) {\n    ReadyState[ReadyState[\"Unsent\"] = 0] = \"Unsent\";\n    ReadyState[ReadyState[\"Open\"] = 1] = \"Open\";\n    ReadyState[ReadyState[\"HeadersReceived\"] = 2] = \"HeadersReceived\";\n    ReadyState[ReadyState[\"Loading\"] = 3] = \"Loading\";\n    ReadyState[ReadyState[\"Done\"] = 4] = \"Done\";\n    ReadyState[ReadyState[\"Cancelled\"] = 5] = \"Cancelled\";\n})(exports.ReadyState || (exports.ReadyState = {}));\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated use @angular/common/http instead\n */\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated use @angular/common/http instead\n */\n\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated use @angular/common/http instead\n */\n(function (ResponseType) {\n    ResponseType[ResponseType[\"Basic\"] = 0] = \"Basic\";\n    ResponseType[ResponseType[\"Cors\"] = 1] = \"Cors\";\n    ResponseType[ResponseType[\"Default\"] = 2] = \"Default\";\n    ResponseType[ResponseType[\"Error\"] = 3] = \"Error\";\n    ResponseType[ResponseType[\"Opaque\"] = 4] = \"Opaque\";\n})(exports.ResponseType || (exports.ResponseType = {}));\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated use @angular/common/http instead\n */\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated use @angular/common/http instead\n */\nvar ContentType;\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated use @angular/common/http instead\n */\n(function (ContentType) {\n    ContentType[ContentType[\"NONE\"] = 0] = \"NONE\";\n    ContentType[ContentType[\"JSON\"] = 1] = \"JSON\";\n    ContentType[ContentType[\"FORM\"] = 2] = \"FORM\";\n    ContentType[ContentType[\"FORM_DATA\"] = 3] = \"FORM_DATA\";\n    ContentType[ContentType[\"TEXT\"] = 4] = \"TEXT\";\n    ContentType[ContentType[\"BLOB\"] = 5] = \"BLOB\";\n    ContentType[ContentType[\"ARRAY_BUFFER\"] = 6] = \"ARRAY_BUFFER\";\n})(ContentType || (ContentType = {}));\n/**\n * Define which buffer to use to store the response\n * @deprecated use @angular/common/http instead\n */\n/**\n * Define which buffer to use to store the response\n * @deprecated use @angular/common/http instead\n */\n\n/**\n * Define which buffer to use to store the response\n * @deprecated use @angular/common/http instead\n */\n(function (ResponseContentType) {\n    ResponseContentType[ResponseContentType[\"Text\"] = 0] = \"Text\";\n    ResponseContentType[ResponseContentType[\"Json\"] = 1] = \"Json\";\n    ResponseContentType[ResponseContentType[\"ArrayBuffer\"] = 2] = \"ArrayBuffer\";\n    ResponseContentType[ResponseContentType[\"Blob\"] = 3] = \"Blob\";\n})(exports.ResponseContentType || (exports.ResponseContentType = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar Headers = /** @class */ (function () {\n    // TODO(vicb): any -> string|string[]\n    function Headers(headers) {\n        var _this = this;\n        /** @internal header names are lower case */\n        this._headers = new Map();\n        /** @internal map lower case names to actual names */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     */\n    /**\n       * Returns a new Headers instance from the given DOMString of Response Headers\n       */\n    Headers.fromResponseHeaderString = /**\n       * Returns a new Headers instance from the given DOMString of Response Headers\n       */\n    function (headersString) {\n        var headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var index = line.indexOf(':');\n            if (index > 0) {\n                var name_1 = line.slice(0, index);\n                var value = line.slice(index + 1).trim();\n                headers.set(name_1, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     */\n    /**\n       * Appends a header to existing list of header values for a given header name.\n       */\n    Headers.prototype.append = /**\n       * Appends a header to existing list of header values for a given header name.\n       */\n    function (name, value) {\n        var values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     */\n    /**\n       * Deletes all header values for the given name.\n       */\n    Headers.prototype.delete = /**\n       * Deletes all header values for the given name.\n       */\n    function (name) {\n        var lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    Headers.prototype.forEach = function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n       * Returns first header that matches given name.\n       */\n    Headers.prototype.get = /**\n       * Returns first header that matches given name.\n       */\n    function (name) {\n        var values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n       * Checks for existence of header by given name.\n       */\n    Headers.prototype.has = /**\n       * Checks for existence of header by given name.\n       */\n    function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n       * Returns the names of the headers\n       */\n    Headers.prototype.keys = /**\n       * Returns the names of the headers\n       */\n    function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     */\n    /**\n       * Sets or overrides header value for given name.\n       */\n    Headers.prototype.set = /**\n       * Sets or overrides header value for given name.\n       */\n    function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     */\n    /**\n       * Returns values of all headers.\n       */\n    Headers.prototype.values = /**\n       * Returns values of all headers.\n       */\n    function () { return Array.from(this._headers.values()); };\n    /**\n     * Returns string of all headers.\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    /**\n       * Returns string of all headers.\n       */\n    // TODO(vicb): returns {[name: string]: string[]}\n    Headers.prototype.toJSON = /**\n       * Returns string of all headers.\n       */\n    // TODO(vicb): returns {[name: string]: string[]}\n    function () {\n        var _this = this;\n        var serialized = {};\n        this._headers.forEach(function (values, name) {\n            var split = [];\n            values.forEach(function (v) { return split.push.apply(split, __spread(v.split(','))); });\n            serialized[_this._normalizedNames.get(name)] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n       * Returns list of header values for a given name.\n       */\n    Headers.prototype.getAll = /**\n       * Returns list of header values for a given name.\n       */\n    function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     */\n    /**\n       * This method is not implemented.\n       */\n    Headers.prototype.entries = /**\n       * This method is not implemented.\n       */\n    function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    Headers.prototype.mayBeSetNormalizedName = function (name) {\n        var lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {@link Response Responses} for\n * mock responses (see {@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar ResponseOptions = /** @class */ (function () {\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     */\n    /**\n       * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n       * override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * This may be useful when sharing a base `ResponseOptions` object inside tests,\n       * where certain properties may change from test to test.\n       *\n       * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n       *\n       * ```typescript\n       * import {ResponseOptions, Response} from '@angular/http';\n       *\n       * var options = new ResponseOptions({\n       *   body: {name: 'Jeff'}\n       * });\n       * var res = new Response(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('options.url:', options.url); // null\n       * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n       * console.log('res.url:', res.url); // https://google.com\n       * ```\n       */\n    ResponseOptions.prototype.merge = /**\n       * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n       * override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * This may be useful when sharing a base `ResponseOptions` object inside tests,\n       * where certain properties may change from test to test.\n       *\n       * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n       *\n       * ```typescript\n       * import {ResponseOptions, Response} from '@angular/http';\n       *\n       * var options = new ResponseOptions({\n       *   body: {name: 'Jeff'}\n       * });\n       * var res = new Response(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('options.url:', options.url); // null\n       * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n       * console.log('res.url:', res.url); // https://google.com\n       * ```\n       */\n    function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link ResponseOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create {@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar BaseResponseOptions = /** @class */ (function (_super) {\n    __extends(BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: exports.ResponseType.Default, headers: new Headers() }) || this;\n    }\n    BaseResponseOptions.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    BaseResponseOptions.ctorParameters = function () { return []; };\n    return BaseResponseOptions;\n}(ResponseOptions));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {@link Request}.\n *\n * @deprecated use @angular/common/http instead\n */\nvar ConnectionBackend = /** @class */ (function () {\n    function ConnectionBackend() {\n    }\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated use @angular/common/http instead\n */\nvar Connection = /** @class */ (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated use @angular/common/http instead\n */\nvar XSRFStrategy = /** @class */ (function () {\n    function XSRFStrategy() {\n    }\n    return XSRFStrategy;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return exports.RequestMethod.Get;\n        case 'POST':\n            return exports.RequestMethod.Post;\n        case 'PUT':\n            return exports.RequestMethod.Put;\n        case 'DELETE':\n            return exports.RequestMethod.Delete;\n        case 'OPTIONS':\n            return exports.RequestMethod.Options;\n        case 'HEAD':\n            return exports.RequestMethod.Head;\n        case 'PATCH':\n            return exports.RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n\nfunction stringToArrayBuffer(input) {\n    var view = new Uint16Array(input.length);\n    for (var i = 0, strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var map = new Map();\n    if (rawParams.length > 0) {\n        var params = rawParams.split('&');\n        params.forEach(function (param) {\n            var eqIdx = param.indexOf('=');\n            var _a = __read(eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], 2), key = _a[0], val = _a[1];\n            var list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated use @angular/common/http instead\n **/\nvar QueryEncoder = /** @class */ (function () {\n    function QueryEncoder() {\n    }\n    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated use @angular/common/http instead\n */\nvar URLSearchParams = /** @class */ (function () {\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    URLSearchParams.prototype.clone = function () {\n        var clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n    URLSearchParams.prototype.get = function (param) {\n        var storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n    URLSearchParams.prototype.set = function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    URLSearchParams.prototype.setAll = \n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    URLSearchParams.prototype.append = function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    URLSearchParams.prototype.appendAll = \n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var list = _this.paramsMap.get(param) || [];\n            for (var i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    URLSearchParams.prototype.replaceAll = \n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    URLSearchParams.prototype.toString = function () {\n        var _this = this;\n        var paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) {\n                return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));\n            });\n        });\n        return paramsList.join('&');\n    };\n    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {@link Request} and {@link Response}\n * https://fetch.spec.whatwg.org/#body\n */\nvar Body = /** @class */ (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     */\n    /**\n       * Attempts to return body as parsed `JSON` object, or raises an exception.\n       */\n    Body.prototype.json = /**\n       * Attempts to return body as parsed `JSON` object, or raises an exception.\n       */\n    function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     */\n    /**\n       * Returns the body as a string, presuming `toString()` can be called on the response body.\n       *\n       * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n       * bytes in the buffer will be interpreted. Valid values are:\n       *\n       * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n       *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n       *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n       *   into consideration. This is the default behavior to avoid breaking apps, but should be\n       *   considered deprecated.\n       *\n       * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n       */\n    Body.prototype.text = /**\n       * Returns the body as a string, presuming `toString()` can be called on the response body.\n       *\n       * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n       * bytes in the buffer will be interpreted. Valid values are:\n       *\n       * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n       *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n       *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n       *   into consideration. This is the default behavior to avoid breaking apps, but should be\n       *   considered deprecated.\n       *\n       * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n       */\n    function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(this._body));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(this._body));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     */\n    /**\n       * Return the body as an ArrayBuffer\n       */\n    Body.prototype.arrayBuffer = /**\n       * Return the body as an ArrayBuffer\n       */\n    function () {\n        if (this._body instanceof ArrayBuffer) {\n            return this._body;\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n      * Returns the request's body as a Blob, assuming that body exists.\n      */\n    /**\n        * Returns the request's body as a Blob, assuming that body exists.\n        */\n    Body.prototype.blob = /**\n        * Returns the request's body as a Blob, assuming that body exists.\n        */\n    function () {\n        if (this._body instanceof Blob) {\n            return this._body;\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated use @angular/common/http instead\n */\nvar Response = /** @class */ (function (_super) {\n    __extends(Response, _super);\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = (responseOptions.status);\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = (responseOptions.type);\n        _this.url = (responseOptions.url);\n        return _this;\n    }\n    Response.prototype.toString = function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\nfunction _getJsonpConnections() {\n    var w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\n// Make sure not to evaluate this in a non-browser environment!\nvar BrowserJsonp = /** @class */ (function () {\n    function BrowserJsonp() {\n    }\n    // Construct a <script> element with the specified URL\n    // Construct a <script> element with the specified URL\n    BrowserJsonp.prototype.build = \n    // Construct a <script> element with the specified URL\n    function (url) {\n        var node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n        var connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    BrowserJsonp.prototype.removeConnection = function (id) {\n        var connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    // Attach the <script> element to the DOM\n    // Attach the <script> element to the DOM\n    BrowserJsonp.prototype.send = \n    // Attach the <script> element to the DOM\n    function (node) { document.body.appendChild((node)); };\n    // Remove <script> element from the DOM\n    // Remove <script> element from the DOM\n    BrowserJsonp.prototype.cleanup = \n    // Remove <script> element from the DOM\n    function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild((node));\n        }\n    };\n    BrowserJsonp.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    BrowserJsonp.ctorParameters = function () { return []; };\n    return BrowserJsonp;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated use @angular/common/http instead\n */\nvar JSONPConnection = /** @class */ (function () {\n    /** @internal */\n    function JSONPConnection(req, _dom, baseResponseOptions) {\n        var _this = this;\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== exports.RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new rxjs.Observable(function (responseObserver) {\n            _this.readyState = exports.ReadyState.Loading;\n            var id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var callback = _dom.requestCallback(_this._id);\n            var url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var script = _this._script = _dom.build(url);\n            var onLoad = function (event) {\n                if (_this.readyState === exports.ReadyState.Cancelled)\n                    return;\n                _this.readyState = exports.ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: exports.ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var onError = function (error) {\n                if (_this.readyState === exports.ReadyState.Cancelled)\n                    return;\n                _this.readyState = exports.ReadyState.Done;\n                _dom.cleanup(script);\n                var responseOptions = new ResponseOptions({ body: error.message, type: exports.ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = exports.ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     */\n    /**\n       * Callback called when the JSONP request completes, to notify the application\n       * of the new data.\n       */\n    JSONPConnection.prototype.finished = /**\n       * Callback called when the JSONP request completes, to notify the application\n       * of the new data.\n       */\n    function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === exports.ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection;\n}());\n/**\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated use @angular/common/http instead\n */\nvar JSONPBackend = /** @class */ (function (_super) {\n    __extends(JSONPBackend, _super);\n    /** @internal */\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    JSONPBackend.prototype.createConnection = function (request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    JSONPBackend.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    JSONPBackend.ctorParameters = function () { return [\n        { type: BrowserJsonp, },\n        { type: ResponseOptions, },\n    ]; };\n    return JSONPBackend;\n}(ConnectionBackend));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @deprecated use @angular/common/http instead\n */\nvar XHRConnection = /** @class */ (function () {\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new rxjs.Observable(function (responseObserver) {\n            var _xhr = browserXHR.build();\n            _xhr.open(exports.RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var url = getResponseURL(_xhr) || req.url;\n                var statusText = _xhr.statusText || 'OK';\n                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var onError = function (err) {\n                var responseOptions = new ResponseOptions({\n                    body: err,\n                    type: exports.ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader((name), values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case exports.ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case exports.ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case exports.ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case exports.ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated use @angular/common/http instead\n */\nvar CookieXSRFStrategy = /** @class */ (function () {\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\n        var xsrfToken = platformBrowser.ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n * @Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated use @angular/common/http instead\n */\nvar XHRBackend = /** @class */ (function () {\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    XHRBackend.prototype.createConnection = function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    XHRBackend.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    XHRBackend.ctorParameters = function () { return [\n        { type: BrowserXhr, },\n        { type: ResponseOptions, },\n        { type: XSRFStrategy, },\n    ]; };\n    return XHRBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar RequestOptions = /** @class */ (function () {\n    // TODO(Dzmitry): remove search when this.search is removed\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        get: /**\n           * @deprecated from 4.0.0. Use params instead.\n           */\n        function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        set: /**\n           * @deprecated from 4.0.0. Use params instead.\n           */\n        function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     */\n    /**\n       * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * Note that `headers` and `search` will override existing values completely if present in\n       * the `options` object. If these values should be merged, it should be done prior to calling\n       * `merge` on the `RequestOptions` instance.\n       *\n       * ```typescript\n       * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n       *\n       * const options = new RequestOptions({\n       *   method: RequestMethod.Post\n       * });\n       * const req = new Request(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('req.method:', RequestMethod[req.method]); // Post\n       * console.log('options.url:', options.url); // null\n       * console.log('req.url:', req.url); // https://google.com\n       * ```\n       */\n    RequestOptions.prototype.merge = /**\n       * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * Note that `headers` and `search` will override existing values completely if present in\n       * the `options` object. If these values should be merged, it should be done prior to calling\n       * `merge` on the `RequestOptions` instance.\n       *\n       * ```typescript\n       * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n       *\n       * const options = new RequestOptions({\n       *   method: RequestMethod.Post\n       * });\n       * const req = new Request(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('req.method:', RequestMethod[req.method]); // Post\n       * console.log('options.url:', options.url); // null\n       * console.log('req.url:', req.url); // https://google.com\n       * ```\n       */\n    function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    RequestOptions.prototype._mergeSearchParams = function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    RequestOptions.prototype._parseParams = function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    RequestOptions.prototype._appendParam = function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {@link RequestMethod RequestMethod.Get}\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link RequestOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create and send {@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar BaseRequestOptions = /** @class */ (function (_super) {\n    __extends(BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: exports.RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    BaseRequestOptions.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    BaseRequestOptions.ctorParameters = function () { return []; };\n    return BaseRequestOptions;\n}(RequestOptions));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar Request = /** @class */ (function (_super) {\n    __extends(Request, _super);\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var url = requestOptions.url;\n        _this.url = (requestOptions.url);\n        var paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName((requestOptions.method));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = (requestOptions.withCredentials);\n        _this.responseType = (requestOptions.responseType);\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     */\n    /**\n       * Returns the content type enum based on header options.\n       */\n    Request.prototype.detectContentType = /**\n       * Returns the content type enum based on header options.\n       */\n    function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     */\n    /**\n       * Returns the content type of request's body based on its type.\n       */\n    Request.prototype.detectContentTypeFromBody = /**\n       * Returns the content type of request's body based on its type.\n       */\n    function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     */\n    /**\n       * Returns the request's body according to its type. If body is undefined, return\n       * null.\n       */\n    Request.prototype.getBody = /**\n       * Returns the request's body according to its type. If body is undefined, return\n       * null.\n       */\n    function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\nfunction urlEncodeParams(params) {\n    var searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = w /** TODO #9100 */['FormData'] || noop;\nvar Blob$1 = w /** TODO #9100 */['Blob'] || noop;\nvar ArrayBuffer$1 = w /** TODO #9100 */['ArrayBuffer'] || noop;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        }));\n    }\n    return newOptions.merge(new RequestOptions({ method: method, url: url }));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * @Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar Http = /** @class */ (function () {\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     */\n    /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       */\n    Http.prototype.request = /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       */\n    function (url, options) {\n        var responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     */\n    /**\n       * Performs a request with `get` http method.\n       */\n    Http.prototype.get = /**\n       * Performs a request with `get` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     */\n    /**\n       * Performs a request with `post` http method.\n       */\n    Http.prototype.post = /**\n       * Performs a request with `post` http method.\n       */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     */\n    /**\n       * Performs a request with `put` http method.\n       */\n    Http.prototype.put = /**\n       * Performs a request with `put` http method.\n       */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     */\n    /**\n       * Performs a request with `delete` http method.\n       */\n    Http.prototype.delete = /**\n       * Performs a request with `delete` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     */\n    /**\n       * Performs a request with `patch` http method.\n       */\n    Http.prototype.patch = /**\n       * Performs a request with `patch` http method.\n       */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     */\n    /**\n       * Performs a request with `head` http method.\n       */\n    Http.prototype.head = /**\n       * Performs a request with `head` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     */\n    /**\n       * Performs a request with `options` http method.\n       */\n    Http.prototype.options = /**\n       * Performs a request with `options` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Options, url)));\n    };\n    Http.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    Http.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Http;\n}());\n/**\n * @deprecated use @angular/common/http instead\n */\nvar Jsonp = /** @class */ (function (_super) {\n    __extends(Jsonp, _super);\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     *\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     */\n    /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       *\n       * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n       * supported by all current browsers. Because JSONP creates a `<script>` element with\n       * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n       * source could expose your application to XSS risks. Data exposed by JSONP may also be\n       * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n       * future security issues (e.g. content sniffing).  For more detail, see the\n       * [Security Guide](http://g.co/ng/security).\n       */\n    Jsonp.prototype.request = /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       *\n       * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n       * supported by all current browsers. Because JSONP creates a `<script>` element with\n       * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n       * source could expose your application to XSS risks. Data exposed by JSONP may also be\n       * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n       * future security issues (e.g. content sniffing).  For more detail, see the\n       * [Security Guide](http://g.co/ng/security).\n       */\n    function (url, options) {\n        var responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url));\n        }\n        if (url instanceof Request) {\n            if (url.method !== exports.RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    Jsonp.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    Jsonp.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Jsonp;\n}(Http));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated use @angular/common/http instead\n */\nvar HttpModule = /** @class */ (function () {\n    function HttpModule() {\n    }\n    HttpModule.decorators = [\n        { type: core.NgModule, args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                        BrowserXhr,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        XHRBackend,\n                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                    ],\n                },] }\n    ];\n    /** @nocollapse */\n    HttpModule.ctorParameters = function () { return []; };\n    return HttpModule;\n}());\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated use @angular/common/http instead\n */\nvar JsonpModule = /** @class */ (function () {\n    function JsonpModule() {\n    }\n    JsonpModule.decorators = [\n        { type: core.NgModule, args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                        BrowserJsonp,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        JSONPBackend,\n                    ],\n                },] }\n    ];\n    /** @nocollapse */\n    JsonpModule.ctorParameters = function () { return []; };\n    return JsonpModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated use @angular/common/http instead\n */\nvar VERSION = new core.Version('6.0.3');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.ɵangular_packages_http_http_e = BrowserJsonp;\nexports.ɵangular_packages_http_http_f = Body;\nexports.ɵangular_packages_http_http_a = _createDefaultCookieXSRFStrategy;\nexports.ɵangular_packages_http_http_b = httpFactory;\nexports.ɵangular_packages_http_http_c = jsonpFactory;\nexports.BrowserXhr = BrowserXhr;\nexports.JSONPBackend = JSONPBackend;\nexports.JSONPConnection = JSONPConnection;\nexports.CookieXSRFStrategy = CookieXSRFStrategy;\nexports.XHRBackend = XHRBackend;\nexports.XHRConnection = XHRConnection;\nexports.BaseRequestOptions = BaseRequestOptions;\nexports.RequestOptions = RequestOptions;\nexports.BaseResponseOptions = BaseResponseOptions;\nexports.ResponseOptions = ResponseOptions;\nexports.Headers = Headers;\nexports.Http = Http;\nexports.Jsonp = Jsonp;\nexports.HttpModule = HttpModule;\nexports.JsonpModule = JsonpModule;\nexports.Connection = Connection;\nexports.ConnectionBackend = ConnectionBackend;\nexports.XSRFStrategy = XSRFStrategy;\nexports.Request = Request;\nexports.Response = Response;\nexports.QueryEncoder = QueryEncoder;\nexports.URLSearchParams = URLSearchParams;\nexports.VERSION = VERSION;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=http.umd.js.map\n"]}