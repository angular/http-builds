{"version":3,"sources":["packages/http/http.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","http","core","rxjs","platformBrowser","this","i0","RequestMethod","ReadyState","ResponseType","ContentType","ResponseContentType","BrowserXhr","prototype","build","XMLHttpRequest","ngInjectableDef","defineInjectable","token","BrowserXhr_Factory","t","providedIn","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","Headers","headers","_this","_headers","Map","_normalizedNames","forEach","values","name","append","keys","isArray","delete","fromResponseHeaderString","headersString","split","line","index","indexOf","name_1","slice","trim","set","getAll","lcName","toLowerCase","fn","get","length","has","from","join","mayBeSetNormalizedName","toJSON","serialized","v","apply","__spread","arguments","concat","entries","Error","ResponseOptions","opts","body","status","statusText","type","url","merge","options","BaseResponseOptions","_super","Default","BaseResponseOptions_Factory","ConnectionBackend","Connection","XSRFStrategy","normalizeMethodName","method","toUpperCase","Get","Post","Put","Delete","Options","Head","Patch","isSuccess","QueryEncoder","encodeKey","key","standardEncoding","encodeValue","encodeURIComponent","replace","URLSearchParams","rawParams","queryEncoder","paramsMap","paramParser","map","param","eqIdx","_a","val","list","clone","appendAll","storedParam","setAll","searchParams","replaceAll","toString","paramsList","k","Body","json","_body","JSON","parse","ArrayBuffer","text","encodingHint","String","fromCharCode","Uint16Array","Uint8Array","stringify","arrayBuffer","stringToArrayBuffer","input","view","strLen","charCodeAt","buffer","blob","Blob","Response","responseOptions","ok","_nextRequestId","JSONP_HOME","_jsonpConnections","_getJsonpConnections","w","window","BrowserJsonp","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","removeConnection","send","appendChild","cleanup","parentNode","removeChild","BrowserJsonp_Factory","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","req","_dom","baseResponseOptions","_finished","TypeError","request","response","Observable","responseObserver","readyState","Loading","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","Cancelled","Done","responseOptions_1","_responseData","complete","onError","message","addEventListener","removeEventListener","finished","data","JSONPBackend","_browserJSONP","_baseResponseOptions","createConnection","JSONPBackend_Factory","inject","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","withCredentials","responseText","getAllResponseHeaders","getResponseURL","xhr","responseURL","test","getResponseHeader","err","setDetectedContentType","setRequestHeader","responseType","Json","Text","getBody","abort","contentType","NONE","FORM","TEXT","BLOB","CookieXSRFStrategy","_cookieName","_headerName","configureRequest","xsrfToken","ɵgetDOM","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","XHRBackend_Factory","RequestOptions","search","params","_mergeSearchParams","defineProperty","enumerable","configurable","_parseParams","objParams","item","_appendParam","BaseRequestOptions","BaseRequestOptions_Factory","Request","requestOptions","paramsArg","urlEncodeParams","element","prefix","detectContentType","FORM_DATA","ArrayBuffer$1","ARRAY_BUFFER","detectContentTypeFromBody","FormData","Blob$1","noop","httpRequest","backend","mergeOptions","defaultOpts","providedOpts","Http","_backend","_defaultOptions","responseObservable","post","put","patch","head","Http_Factory","Jsonp","defaultOptions","Jsonp_Factory","_createDefaultCookieXSRFStrategy","httpFactory","xhrBackend","jsonpFactory","jsonpBackend","HttpModule","ngModuleDef","ɵdefineNgModule","ngInjectorDef","defineInjector","HttpModule_Factory","providers","provide","useFactory","deps","useClass","imports","JsonpModule","JsonpModule_Factory","VERSION","Version"],"mappings":"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","sourcesContent":["/**\n * @license Angular v8.0.0-beta.8+46.sha-8ef690c.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/platform-browser')) :\n    typeof define === 'function' && define.amd ? define('@angular/http', ['exports', '@angular/core', 'rxjs', '@angular/platform-browser'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.http = {}), global.ng.core, global.rxjs, global.ng.platformBrowser));\n}(this, function (exports, i0, rxjs, platformBrowser) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A backend for http that uses the `XMLHttpRequest` browser API.\n     *\n     * Take care not to evaluate this in non-browser contexts.\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var BrowserXhr = /** @class */ (function () {\n        function BrowserXhr() {\n        }\n        BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n        BrowserXhr.ngInjectableDef = i0.defineInjectable({ token: BrowserXhr, factory: function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); }, providedIn: null });\n        return BrowserXhr;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(BrowserXhr, [{\n            type: i0.Injectable\n        }], function () { return []; }, null);\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (RequestMethod) {\n        RequestMethod[RequestMethod[\"Get\"] = 0] = \"Get\";\n        RequestMethod[RequestMethod[\"Post\"] = 1] = \"Post\";\n        RequestMethod[RequestMethod[\"Put\"] = 2] = \"Put\";\n        RequestMethod[RequestMethod[\"Delete\"] = 3] = \"Delete\";\n        RequestMethod[RequestMethod[\"Options\"] = 4] = \"Options\";\n        RequestMethod[RequestMethod[\"Head\"] = 5] = \"Head\";\n        RequestMethod[RequestMethod[\"Patch\"] = 6] = \"Patch\";\n    })(exports.RequestMethod || (exports.RequestMethod = {}));\n    (function (ReadyState) {\n        ReadyState[ReadyState[\"Unsent\"] = 0] = \"Unsent\";\n        ReadyState[ReadyState[\"Open\"] = 1] = \"Open\";\n        ReadyState[ReadyState[\"HeadersReceived\"] = 2] = \"HeadersReceived\";\n        ReadyState[ReadyState[\"Loading\"] = 3] = \"Loading\";\n        ReadyState[ReadyState[\"Done\"] = 4] = \"Done\";\n        ReadyState[ReadyState[\"Cancelled\"] = 5] = \"Cancelled\";\n    })(exports.ReadyState || (exports.ReadyState = {}));\n    (function (ResponseType) {\n        ResponseType[ResponseType[\"Basic\"] = 0] = \"Basic\";\n        ResponseType[ResponseType[\"Cors\"] = 1] = \"Cors\";\n        ResponseType[ResponseType[\"Default\"] = 2] = \"Default\";\n        ResponseType[ResponseType[\"Error\"] = 3] = \"Error\";\n        ResponseType[ResponseType[\"Opaque\"] = 4] = \"Opaque\";\n    })(exports.ResponseType || (exports.ResponseType = {}));\n    /**\n     * Supported content type to be automatically associated with a {@link Request}.\n     * @deprecated see https://angular.io/guide/http\n     */\n    var ContentType;\n    (function (ContentType) {\n        ContentType[ContentType[\"NONE\"] = 0] = \"NONE\";\n        ContentType[ContentType[\"JSON\"] = 1] = \"JSON\";\n        ContentType[ContentType[\"FORM\"] = 2] = \"FORM\";\n        ContentType[ContentType[\"FORM_DATA\"] = 3] = \"FORM_DATA\";\n        ContentType[ContentType[\"TEXT\"] = 4] = \"TEXT\";\n        ContentType[ContentType[\"BLOB\"] = 5] = \"BLOB\";\n        ContentType[ContentType[\"ARRAY_BUFFER\"] = 6] = \"ARRAY_BUFFER\";\n    })(ContentType || (ContentType = {}));\n    (function (ResponseContentType) {\n        ResponseContentType[ResponseContentType[\"Text\"] = 0] = \"Text\";\n        ResponseContentType[ResponseContentType[\"Json\"] = 1] = \"Json\";\n        ResponseContentType[ResponseContentType[\"ArrayBuffer\"] = 2] = \"ArrayBuffer\";\n        ResponseContentType[ResponseContentType[\"Blob\"] = 3] = \"Blob\";\n    })(exports.ResponseContentType || (exports.ResponseContentType = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n     * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n     *\n     * The only known difference between this `Headers` implementation and the spec is the\n     * lack of an `entries` method.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * import {Headers} from '@angular/http';\n     *\n     * var firstHeaders = new Headers();\n     * firstHeaders.append('Content-Type', 'image/jpeg');\n     * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n     *\n     * // Create headers from Plain Old JavaScript Object\n     * var secondHeaders = new Headers({\n     *   'X-My-Custom-Header': 'Angular'\n     * });\n     * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n     *\n     * var thirdHeaders = new Headers(secondHeaders);\n     * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n     * ```\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var Headers = /** @class */ (function () {\n        // TODO(vicb): any -> string|string[]\n        function Headers(headers) {\n            var _this = this;\n            /** @internal header names are lower case */\n            this._headers = new Map();\n            /** @internal map lower case names to actual names */\n            this._normalizedNames = new Map();\n            if (!headers) {\n                return;\n            }\n            if (headers instanceof Headers) {\n                headers.forEach(function (values, name) {\n                    values.forEach(function (value) { return _this.append(name, value); });\n                });\n                return;\n            }\n            Object.keys(headers).forEach(function (name) {\n                var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n                _this.delete(name);\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n        }\n        /**\n         * Returns a new Headers instance from the given DOMString of Response Headers\n         */\n        Headers.fromResponseHeaderString = function (headersString) {\n            var headers = new Headers();\n            headersString.split('\\n').forEach(function (line) {\n                var index = line.indexOf(':');\n                if (index > 0) {\n                    var name_1 = line.slice(0, index);\n                    var value = line.slice(index + 1).trim();\n                    headers.set(name_1, value);\n                }\n            });\n            return headers;\n        };\n        /**\n         * Appends a header to existing list of header values for a given header name.\n         */\n        Headers.prototype.append = function (name, value) {\n            var values = this.getAll(name);\n            if (values === null) {\n                this.set(name, value);\n            }\n            else {\n                values.push(value);\n            }\n        };\n        /**\n         * Deletes all header values for the given name.\n         */\n        Headers.prototype.delete = function (name) {\n            var lcName = name.toLowerCase();\n            this._normalizedNames.delete(lcName);\n            this._headers.delete(lcName);\n        };\n        Headers.prototype.forEach = function (fn) {\n            var _this = this;\n            this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n        };\n        /**\n         * Returns first header that matches given name.\n         */\n        Headers.prototype.get = function (name) {\n            var values = this.getAll(name);\n            if (values === null) {\n                return null;\n            }\n            return values.length > 0 ? values[0] : null;\n        };\n        /**\n         * Checks for existence of header by given name.\n         */\n        Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n        /**\n         * Returns the names of the headers\n         */\n        Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n        /**\n         * Sets or overrides header value for given name.\n         */\n        Headers.prototype.set = function (name, value) {\n            if (Array.isArray(value)) {\n                if (value.length) {\n                    this._headers.set(name.toLowerCase(), [value.join(',')]);\n                }\n            }\n            else {\n                this._headers.set(name.toLowerCase(), [value]);\n            }\n            this.mayBeSetNormalizedName(name);\n        };\n        /**\n         * Returns values of all headers.\n         */\n        Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n        /**\n         * Returns string of all headers.\n         */\n        // TODO(vicb): returns {[name: string]: string[]}\n        Headers.prototype.toJSON = function () {\n            var _this = this;\n            var serialized = {};\n            this._headers.forEach(function (values, name) {\n                var split = [];\n                values.forEach(function (v) { return split.push.apply(split, __spread(v.split(','))); });\n                serialized[_this._normalizedNames.get(name)] = split;\n            });\n            return serialized;\n        };\n        /**\n         * Returns list of header values for a given name.\n         */\n        Headers.prototype.getAll = function (name) {\n            return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n        };\n        /**\n         * This method is not implemented.\n         */\n        Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n        Headers.prototype.mayBeSetNormalizedName = function (name) {\n            var lcName = name.toLowerCase();\n            if (!this._normalizedNames.has(lcName)) {\n                this._normalizedNames.set(lcName, name);\n            }\n        };\n        return Headers;\n    }());\n\n    /**\n     * Creates a response options object to be optionally provided when instantiating a\n     * {@link Response}.\n     *\n     * This class is based on the `ResponseInit` description in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#responseinit).\n     *\n     * All values are null by default. Typical defaults can be found in the\n     * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n     *\n     * This class may be used in tests to build {@link Response Responses} for\n     * mock responses (see {@link MockBackend}).\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: '{\"name\":\"Jeff\"}'\n     * });\n     * var res = new Response(options);\n     *\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * ```\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var ResponseOptions = /** @class */ (function () {\n        function ResponseOptions(opts) {\n            if (opts === void 0) { opts = {}; }\n            var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n            this.body = body != null ? body : null;\n            this.status = status != null ? status : null;\n            this.headers = headers != null ? headers : null;\n            this.statusText = statusText != null ? statusText : null;\n            this.type = type != null ? type : null;\n            this.url = url != null ? url : null;\n        }\n        /**\n         * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n         * override\n         * existing values. This method will not change the values of the instance on which it is being\n         * called.\n         *\n         * This may be useful when sharing a base `ResponseOptions` object inside tests,\n         * where certain properties may change from test to test.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * import {ResponseOptions, Response} from '@angular/http';\n         *\n         * var options = new ResponseOptions({\n         *   body: {name: 'Jeff'}\n         * });\n         * var res = new Response(options.merge({\n         *   url: 'https://google.com'\n         * }));\n         * console.log('options.url:', options.url); // null\n         * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n         * console.log('res.url:', res.url); // https://google.com\n         * ```\n         */\n        ResponseOptions.prototype.merge = function (options) {\n            return new ResponseOptions({\n                body: options && options.body != null ? options.body : this.body,\n                status: options && options.status != null ? options.status : this.status,\n                headers: options && options.headers != null ? options.headers : this.headers,\n                statusText: options && options.statusText != null ? options.statusText : this.statusText,\n                type: options && options.type != null ? options.type : this.type,\n                url: options && options.url != null ? options.url : this.url,\n            });\n        };\n        return ResponseOptions;\n    }());\n    /**\n     * Subclass of {@link ResponseOptions}, with default values.\n     *\n     * Default values:\n     *  * status: 200\n     *  * headers: empty {@link Headers} object\n     *\n     * This class could be extended and bound to the {@link ResponseOptions} class\n     * when configuring an {@link Injector}, in order to override the default options\n     * used by {@link Http} to create {@link Response Responses}.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import {provide} from '@angular/core';\n     * import {bootstrap} from '@angular/platform-browser/browser';\n     * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n     * '@angular/http';\n     * import {App} from './myapp';\n     *\n     * class MyOptions extends BaseResponseOptions {\n     *   headers:Headers = new Headers({network: 'github'});\n     * }\n     *\n     * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n     * ```\n     *\n     * The options could also be extended when manually creating a {@link Response}\n     * object.\n     *\n     * ### Example\n     *\n     * ```\n     * import {BaseResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new BaseResponseOptions();\n     * var res = new Response(options.merge({\n     *   body: 'Angular',\n     *   headers: new Headers({framework: 'angular'})\n     * }));\n     * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n     * console.log('res.text():', res.text()); // Angular;\n     * ```\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var BaseResponseOptions = /** @class */ (function (_super) {\n        __extends(BaseResponseOptions, _super);\n        function BaseResponseOptions() {\n            return _super.call(this, { status: 200, statusText: 'Ok', type: exports.ResponseType.Default, headers: new Headers() }) || this;\n        }\n        BaseResponseOptions.ngInjectableDef = i0.defineInjectable({ token: BaseResponseOptions, factory: function BaseResponseOptions_Factory(t) { return new (t || BaseResponseOptions)(); }, providedIn: null });\n        return BaseResponseOptions;\n    }(ResponseOptions));\n    /*@__PURE__*/ i0.ɵsetClassMetadata(BaseResponseOptions, [{\n            type: i0.Injectable\n        }], function () { return []; }, null);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Abstract class from which real backends are derived.\n     *\n     * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n     * {@link Request}.\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var ConnectionBackend = /** @class */ (function () {\n        function ConnectionBackend() {\n        }\n        return ConnectionBackend;\n    }());\n    /**\n     * Abstract class from which real connections are derived.\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var Connection = /** @class */ (function () {\n        function Connection() {\n        }\n        return Connection;\n    }());\n    /**\n     * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var XSRFStrategy = /** @class */ (function () {\n        function XSRFStrategy() {\n        }\n        return XSRFStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function normalizeMethodName(method) {\n        if (typeof method !== 'string')\n            return method;\n        switch (method.toUpperCase()) {\n            case 'GET':\n                return exports.RequestMethod.Get;\n            case 'POST':\n                return exports.RequestMethod.Post;\n            case 'PUT':\n                return exports.RequestMethod.Put;\n            case 'DELETE':\n                return exports.RequestMethod.Delete;\n            case 'OPTIONS':\n                return exports.RequestMethod.Options;\n            case 'HEAD':\n                return exports.RequestMethod.Head;\n            case 'PATCH':\n                return exports.RequestMethod.Patch;\n        }\n        throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n    }\n    var isSuccess = function (status) { return (status >= 200 && status < 300); };\n    function getResponseURL(xhr) {\n        if ('responseURL' in xhr) {\n            return xhr.responseURL;\n        }\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n            return xhr.getResponseHeader('X-Request-URL');\n        }\n        return null;\n    }\n    function stringToArrayBuffer(input) {\n        var view = new Uint16Array(input.length);\n        for (var i = 0, strLen = input.length; i < strLen; i++) {\n            view[i] = input.charCodeAt(i);\n        }\n        return view.buffer;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function paramParser(rawParams) {\n        if (rawParams === void 0) { rawParams = ''; }\n        var map = new Map();\n        if (rawParams.length > 0) {\n            var params = rawParams.split('&');\n            params.forEach(function (param) {\n                var eqIdx = param.indexOf('=');\n                var _a = __read(eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], 2), key = _a[0], val = _a[1];\n                var list = map.get(key) || [];\n                list.push(val);\n                map.set(key, list);\n            });\n        }\n        return map;\n    }\n    /**\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     **/\n    var QueryEncoder = /** @class */ (function () {\n        function QueryEncoder() {\n        }\n        QueryEncoder.prototype.encodeKey = function (key) { return standardEncoding(key); };\n        QueryEncoder.prototype.encodeValue = function (value) { return standardEncoding(value); };\n        return QueryEncoder;\n    }());\n    function standardEncoding(v) {\n        return encodeURIComponent(v)\n            .replace(/%40/gi, '@')\n            .replace(/%3A/gi, ':')\n            .replace(/%24/gi, '$')\n            .replace(/%2C/gi, ',')\n            .replace(/%3B/gi, ';')\n            .replace(/%2B/gi, '+')\n            .replace(/%3D/gi, '=')\n            .replace(/%3F/gi, '?')\n            .replace(/%2F/gi, '/');\n    }\n    /**\n     * Map-like representation of url search parameters, based on\n     * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n     * with several extensions for merging URLSearchParams objects:\n     *   - setAll()\n     *   - appendAll()\n     *   - replaceAll()\n     *\n     * This class accepts an optional second parameter of ${@link QueryEncoder},\n     * which is used to serialize parameters before making a request. By default,\n     * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n     * and then un-encodes certain characters that are allowed to be part of the query\n     * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n     *\n     * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n     *\n     * If the set of allowed query characters is not acceptable for a particular backend,\n     * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n     *\n     * ```\n     * import {URLSearchParams, QueryEncoder} from '@angular/http';\n     * class MyQueryEncoder extends QueryEncoder {\n     *   encodeKey(k: string): string {\n     *     return myEncodingFunction(k);\n     *   }\n     *\n     *   encodeValue(v: string): string {\n     *     return myEncodingFunction(v);\n     *   }\n     * }\n     *\n     * let params = new URLSearchParams('', new MyQueryEncoder());\n     * ```\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var URLSearchParams = /** @class */ (function () {\n        function URLSearchParams(rawParams, queryEncoder) {\n            if (rawParams === void 0) { rawParams = ''; }\n            if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n            this.rawParams = rawParams;\n            this.queryEncoder = queryEncoder;\n            this.paramsMap = paramParser(rawParams);\n        }\n        URLSearchParams.prototype.clone = function () {\n            var clone = new URLSearchParams('', this.queryEncoder);\n            clone.appendAll(this);\n            return clone;\n        };\n        URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n        URLSearchParams.prototype.get = function (param) {\n            var storedParam = this.paramsMap.get(param);\n            return Array.isArray(storedParam) ? storedParam[0] : null;\n        };\n        URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n        URLSearchParams.prototype.set = function (param, val) {\n            if (val === void 0 || val === null) {\n                this.delete(param);\n                return;\n            }\n            var list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(val);\n            this.paramsMap.set(param, list);\n        };\n        // A merge operation\n        // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n        //\n        // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n        //\n        // TODO(@caitp): document this better\n        URLSearchParams.prototype.setAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var list = _this.paramsMap.get(param) || [];\n                list.length = 0;\n                list.push(value[0]);\n                _this.paramsMap.set(param, list);\n            });\n        };\n        URLSearchParams.prototype.append = function (param, val) {\n            if (val === void 0 || val === null)\n                return;\n            var list = this.paramsMap.get(param) || [];\n            list.push(val);\n            this.paramsMap.set(param, list);\n        };\n        // A merge operation\n        // For each name-values pair in `searchParams`, perform `append(name, value)`\n        // for each value in `values`.\n        //\n        // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n        //\n        // TODO(@caitp): document this better\n        URLSearchParams.prototype.appendAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var list = _this.paramsMap.get(param) || [];\n                for (var i = 0; i < value.length; ++i) {\n                    list.push(value[i]);\n                }\n                _this.paramsMap.set(param, list);\n            });\n        };\n        // A merge operation\n        // For each name-values pair in `searchParams`, perform `delete(name)`,\n        // followed by `set(name, values)`\n        //\n        // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n        //\n        // TODO(@caitp): document this better\n        URLSearchParams.prototype.replaceAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var list = _this.paramsMap.get(param) || [];\n                list.length = 0;\n                for (var i = 0; i < value.length; ++i) {\n                    list.push(value[i]);\n                }\n                _this.paramsMap.set(param, list);\n            });\n        };\n        URLSearchParams.prototype.toString = function () {\n            var _this = this;\n            var paramsList = [];\n            this.paramsMap.forEach(function (values, k) {\n                values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n            });\n            return paramsList.join('&');\n        };\n        URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n        return URLSearchParams;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * HTTP request body used by both {@link Request} and {@link Response}\n     * https://fetch.spec.whatwg.org/#body\n     */\n    var Body = /** @class */ (function () {\n        function Body() {\n        }\n        /**\n         * Attempts to return body as parsed `JSON` object, or raises an exception.\n         */\n        Body.prototype.json = function () {\n            if (typeof this._body === 'string') {\n                return JSON.parse(this._body);\n            }\n            if (this._body instanceof ArrayBuffer) {\n                return JSON.parse(this.text());\n            }\n            return this._body;\n        };\n        /**\n         * Returns the body as a string, presuming `toString()` can be called on the response body.\n         *\n         * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n         * bytes in the buffer will be interpreted. Valid values are:\n         *\n         * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n         *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n         *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n         *   into consideration. This is the default behavior to avoid breaking apps, but should be\n         *   considered deprecated.\n         *\n         * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n         */\n        Body.prototype.text = function (encodingHint) {\n            if (encodingHint === void 0) { encodingHint = 'legacy'; }\n            if (this._body instanceof URLSearchParams) {\n                return this._body.toString();\n            }\n            if (this._body instanceof ArrayBuffer) {\n                switch (encodingHint) {\n                    case 'legacy':\n                        return String.fromCharCode.apply(null, new Uint16Array(this._body));\n                    case 'iso-8859':\n                        return String.fromCharCode.apply(null, new Uint8Array(this._body));\n                    default:\n                        throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n                }\n            }\n            if (this._body == null) {\n                return '';\n            }\n            if (typeof this._body === 'object') {\n                return JSON.stringify(this._body, null, 2);\n            }\n            return this._body.toString();\n        };\n        /**\n         * Return the body as an ArrayBuffer\n         */\n        Body.prototype.arrayBuffer = function () {\n            if (this._body instanceof ArrayBuffer) {\n                return this._body;\n            }\n            return stringToArrayBuffer(this.text());\n        };\n        /**\n          * Returns the request's body as a Blob, assuming that body exists.\n          */\n        Body.prototype.blob = function () {\n            if (this._body instanceof Blob) {\n                return this._body;\n            }\n            if (this._body instanceof ArrayBuffer) {\n                return new Blob([this._body]);\n            }\n            throw new Error('The request body isn\\'t either a blob or an array buffer');\n        };\n        return Body;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates `Response` instances from provided values.\n     *\n     * Though this object isn't\n     * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n     * add data to a view.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n     * ```\n     *\n     * The Response's interface is inspired by the Response constructor defined in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n     * can be accessed many times. There are other differences in the implementation, but this is the\n     * most significant.\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var Response = /** @class */ (function (_super) {\n        __extends(Response, _super);\n        function Response(responseOptions) {\n            var _this = _super.call(this) || this;\n            _this._body = responseOptions.body;\n            _this.status = responseOptions.status;\n            _this.ok = (_this.status >= 200 && _this.status <= 299);\n            _this.statusText = responseOptions.statusText;\n            _this.headers = responseOptions.headers;\n            _this.type = responseOptions.type;\n            _this.url = responseOptions.url;\n            return _this;\n        }\n        Response.prototype.toString = function () {\n            return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n        };\n        return Response;\n    }(Body));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextRequestId = 0;\n    var JSONP_HOME = '__ng_jsonp__';\n    var _jsonpConnections = null;\n    function _getJsonpConnections() {\n        var w = typeof window == 'object' ? window : {};\n        if (_jsonpConnections === null) {\n            _jsonpConnections = w[JSONP_HOME] = {};\n        }\n        return _jsonpConnections;\n    }\n    // Make sure not to evaluate this in a non-browser environment!\n    var BrowserJsonp = /** @class */ (function () {\n        function BrowserJsonp() {\n        }\n        // Construct a <script> element with the specified URL\n        BrowserJsonp.prototype.build = function (url) {\n            var node = document.createElement('script');\n            node.src = url;\n            return node;\n        };\n        BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n        BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n        BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n            var connections = _getJsonpConnections();\n            connections[id] = connection;\n        };\n        BrowserJsonp.prototype.removeConnection = function (id) {\n            var connections = _getJsonpConnections();\n            connections[id] = null;\n        };\n        // Attach the <script> element to the DOM\n        BrowserJsonp.prototype.send = function (node) { document.body.appendChild((node)); };\n        // Remove <script> element from the DOM\n        BrowserJsonp.prototype.cleanup = function (node) {\n            if (node.parentNode) {\n                node.parentNode.removeChild((node));\n            }\n        };\n        BrowserJsonp.ngInjectableDef = i0.defineInjectable({ token: BrowserJsonp, factory: function BrowserJsonp_Factory(t) { return new (t || BrowserJsonp)(); }, providedIn: null });\n        return BrowserJsonp;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(BrowserJsonp, [{\n            type: i0.Injectable\n        }], null, null);\n\n    var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n    var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n    /**\n     * Base class for an in-flight JSONP request.\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var JSONPConnection = /** @class */ (function () {\n        /** @internal */\n        function JSONPConnection(req, _dom, baseResponseOptions) {\n            var _this = this;\n            this._dom = _dom;\n            this.baseResponseOptions = baseResponseOptions;\n            this._finished = false;\n            if (req.method !== exports.RequestMethod.Get) {\n                throw new TypeError(JSONP_ERR_WRONG_METHOD);\n            }\n            this.request = req;\n            this.response = new rxjs.Observable(function (responseObserver) {\n                _this.readyState = exports.ReadyState.Loading;\n                var id = _this._id = _dom.nextRequestID();\n                _dom.exposeConnection(id, _this);\n                // Workaround Dart\n                // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n                var callback = _dom.requestCallback(_this._id);\n                var url = req.url;\n                if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                    url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n                }\n                else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                    url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n                }\n                var script = _this._script = _dom.build(url);\n                var onLoad = function (event) {\n                    if (_this.readyState === exports.ReadyState.Cancelled)\n                        return;\n                    _this.readyState = exports.ReadyState.Done;\n                    _dom.cleanup(script);\n                    if (!_this._finished) {\n                        var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: exports.ResponseType.Error, url: url });\n                        if (baseResponseOptions) {\n                            responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                        }\n                        responseObserver.error(new Response(responseOptions_1));\n                        return;\n                    }\n                    var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                    if (_this.baseResponseOptions) {\n                        responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.next(new Response(responseOptions));\n                    responseObserver.complete();\n                };\n                var onError = function (error) {\n                    if (_this.readyState === exports.ReadyState.Cancelled)\n                        return;\n                    _this.readyState = exports.ReadyState.Done;\n                    _dom.cleanup(script);\n                    var responseOptions = new ResponseOptions({ body: error.message, type: exports.ResponseType.Error });\n                    if (baseResponseOptions) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                };\n                script.addEventListener('load', onLoad);\n                script.addEventListener('error', onError);\n                _dom.send(script);\n                return function () {\n                    _this.readyState = exports.ReadyState.Cancelled;\n                    script.removeEventListener('load', onLoad);\n                    script.removeEventListener('error', onError);\n                    _this._dom.cleanup(script);\n                };\n            });\n        }\n        /**\n         * Callback called when the JSONP request completes, to notify the application\n         * of the new data.\n         */\n        JSONPConnection.prototype.finished = function (data) {\n            // Don't leak connections\n            this._finished = true;\n            this._dom.removeConnection(this._id);\n            if (this.readyState === exports.ReadyState.Cancelled)\n                return;\n            this._responseData = data;\n        };\n        return JSONPConnection;\n    }());\n    /**\n     * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var JSONPBackend = /** @class */ (function (_super) {\n        __extends(JSONPBackend, _super);\n        /** @internal */\n        function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n            var _this = _super.call(this) || this;\n            _this._browserJSONP = _browserJSONP;\n            _this._baseResponseOptions = _baseResponseOptions;\n            return _this;\n        }\n        JSONPBackend.prototype.createConnection = function (request) {\n            return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n        };\n        JSONPBackend.ngInjectableDef = i0.defineInjectable({ token: JSONPBackend, factory: function JSONPBackend_Factory(t) { return new (t || JSONPBackend)(i0.inject(BrowserJsonp), i0.inject(ResponseOptions)); }, providedIn: null });\n        return JSONPBackend;\n    }(ConnectionBackend));\n    /*@__PURE__*/ i0.ɵsetClassMetadata(JSONPBackend, [{\n            type: i0.Injectable\n        }], function () { return [{ type: BrowserJsonp }, { type: ResponseOptions }]; }, null);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n    /**\n     * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n     * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n     * request.\n     *\n     * This class would typically not be created or interacted with directly inside applications, though\n     * the {@link MockConnection} may be interacted with in tests.\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var XHRConnection = /** @class */ (function () {\n        function XHRConnection(req, browserXHR, baseResponseOptions) {\n            var _this = this;\n            this.request = req;\n            this.response = new rxjs.Observable(function (responseObserver) {\n                var _xhr = browserXHR.build();\n                _xhr.open(exports.RequestMethod[req.method].toUpperCase(), req.url);\n                if (req.withCredentials != null) {\n                    _xhr.withCredentials = req.withCredentials;\n                }\n                // load event handler\n                var onLoad = function () {\n                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                    var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                    var body = null;\n                    // HTTP 204 means no content\n                    if (status !== 204) {\n                        // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                        // response/responseType properties were introduced in ResourceLoader Level2 spec\n                        // (supported by IE10)\n                        body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                        // Implicitly strip a potential XSSI prefix.\n                        if (typeof body === 'string') {\n                            body = body.replace(XSSI_PREFIX, '');\n                        }\n                    }\n                    // fix status code when it is 0 (0 status is undocumented).\n                    // Occurs when accessing file resources or on Android 4.1 stock browser\n                    // while retrieving files from application cache.\n                    if (status === 0) {\n                        status = body ? 200 : 0;\n                    }\n                    var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                    // IE 9 does not provide the way to get URL of response\n                    var url = getResponseURL(_xhr) || req.url;\n                    var statusText = _xhr.statusText || 'OK';\n                    var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                    if (baseResponseOptions != null) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    var response = new Response(responseOptions);\n                    response.ok = isSuccess(status);\n                    if (response.ok) {\n                        responseObserver.next(response);\n                        // TODO(gdi2290): defer complete if array buffer until done\n                        responseObserver.complete();\n                        return;\n                    }\n                    responseObserver.error(response);\n                };\n                // error event handler\n                var onError = function (err) {\n                    var responseOptions = new ResponseOptions({\n                        body: err,\n                        type: exports.ResponseType.Error,\n                        status: _xhr.status,\n                        statusText: _xhr.statusText,\n                    });\n                    if (baseResponseOptions != null) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                };\n                _this.setDetectedContentType(req, _xhr);\n                if (req.headers == null) {\n                    req.headers = new Headers();\n                }\n                if (!req.headers.has('Accept')) {\n                    req.headers.append('Accept', 'application/json, text/plain, */*');\n                }\n                req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n                // Select the correct buffer type to store the response\n                if (req.responseType != null && _xhr.responseType != null) {\n                    switch (req.responseType) {\n                        case exports.ResponseContentType.ArrayBuffer:\n                            _xhr.responseType = 'arraybuffer';\n                            break;\n                        case exports.ResponseContentType.Json:\n                            _xhr.responseType = 'json';\n                            break;\n                        case exports.ResponseContentType.Text:\n                            _xhr.responseType = 'text';\n                            break;\n                        case exports.ResponseContentType.Blob:\n                            _xhr.responseType = 'blob';\n                            break;\n                        default:\n                            throw new Error('The selected responseType is not supported');\n                    }\n                }\n                _xhr.addEventListener('load', onLoad);\n                _xhr.addEventListener('error', onError);\n                _xhr.send(_this.request.getBody());\n                return function () {\n                    _xhr.removeEventListener('load', onLoad);\n                    _xhr.removeEventListener('error', onError);\n                    _xhr.abort();\n                };\n            });\n        }\n        XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n            // Skip if a custom Content-Type header is provided\n            if (req.headers != null && req.headers.get('Content-Type') != null) {\n                return;\n            }\n            // Set the detected content type\n            switch (req.contentType) {\n                case ContentType.NONE:\n                    break;\n                case ContentType.JSON:\n                    _xhr.setRequestHeader('content-type', 'application/json');\n                    break;\n                case ContentType.FORM:\n                    _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                    break;\n                case ContentType.TEXT:\n                    _xhr.setRequestHeader('content-type', 'text/plain');\n                    break;\n                case ContentType.BLOB:\n                    var blob = req.blob();\n                    if (blob.type) {\n                        _xhr.setRequestHeader('content-type', blob.type);\n                    }\n                    break;\n            }\n        };\n        return XHRConnection;\n    }());\n    /**\n     * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n     * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n     * for more information on XSRF.\n     *\n     * Applications can configure custom cookie and header names by binding an instance of this class\n     * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n     * details.\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var CookieXSRFStrategy = /** @class */ (function () {\n        function CookieXSRFStrategy(_cookieName, _headerName) {\n            if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n            if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n            this._cookieName = _cookieName;\n            this._headerName = _headerName;\n        }\n        CookieXSRFStrategy.prototype.configureRequest = function (req) {\n            var xsrfToken = platformBrowser.ɵgetDOM().getCookie(this._cookieName);\n            if (xsrfToken) {\n                req.headers.set(this._headerName, xsrfToken);\n            }\n        };\n        return CookieXSRFStrategy;\n    }());\n    /**\n     * Creates {@link XHRConnection} instances.\n     *\n     * This class would typically not be used by end users, but could be\n     * overridden if a different backend implementation should be used,\n     * such as in a node backend.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n     * @Component({\n     *   viewProviders: [\n     *     HTTP_PROVIDERS,\n     *     {provide: Http, useFactory: (backend, options) => {\n     *       return new Http(backend, options);\n     *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n     * })\n     * class MyComponent {\n     *   constructor(http:Http) {\n     *     http.request('people.json').subscribe(res => this.people = res.json());\n     *   }\n     * }\n     * ```\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var XHRBackend = /** @class */ (function () {\n        function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n            this._browserXHR = _browserXHR;\n            this._baseResponseOptions = _baseResponseOptions;\n            this._xsrfStrategy = _xsrfStrategy;\n        }\n        XHRBackend.prototype.createConnection = function (request) {\n            this._xsrfStrategy.configureRequest(request);\n            return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n        };\n        XHRBackend.ngInjectableDef = i0.defineInjectable({ token: XHRBackend, factory: function XHRBackend_Factory(t) { return new (t || XHRBackend)(i0.inject(BrowserXhr), i0.inject(ResponseOptions), i0.inject(XSRFStrategy)); }, providedIn: null });\n        return XHRBackend;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(XHRBackend, [{\n            type: i0.Injectable\n        }], function () { return [{ type: BrowserXhr }, { type: ResponseOptions }, { type: XSRFStrategy }]; }, null);\n\n    /**\n     * Creates a request options object to be optionally provided when instantiating a\n     * {@link Request}.\n     *\n     * This class is based on the `RequestInit` description in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#requestinit).\n     *\n     * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n     * class, which sub-classes `RequestOptions`.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post,\n     *   url: 'https://google.com'\n     * });\n     * const req = new Request(options);\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // https://google.com\n     * ```\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var RequestOptions = /** @class */ (function () {\n        // TODO(Dzmitry): remove search when this.search is removed\n        function RequestOptions(opts) {\n            if (opts === void 0) { opts = {}; }\n            var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n            this.method = method != null ? normalizeMethodName(method) : null;\n            this.headers = headers != null ? headers : null;\n            this.body = body != null ? body : null;\n            this.url = url != null ? url : null;\n            this.params = this._mergeSearchParams(params || search);\n            this.withCredentials = withCredentials != null ? withCredentials : null;\n            this.responseType = responseType != null ? responseType : null;\n        }\n        Object.defineProperty(RequestOptions.prototype, \"search\", {\n            /**\n             * @deprecated from 4.0.0. Use params instead.\n             */\n            get: function () { return this.params; },\n            /**\n             * @deprecated from 4.0.0. Use params instead.\n             */\n            set: function (params) { this.params = params; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n         * existing values. This method will not change the values of the instance on which it is being\n         * called.\n         *\n         * Note that `headers` and `search` will override existing values completely if present in\n         * the `options` object. If these values should be merged, it should be done prior to calling\n         * `merge` on the `RequestOptions` instance.\n         *\n         * ```typescript\n         * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n         *\n         * const options = new RequestOptions({\n         *   method: RequestMethod.Post\n         * });\n         * const req = new Request(options.merge({\n         *   url: 'https://google.com'\n         * }));\n         * console.log('req.method:', RequestMethod[req.method]); // Post\n         * console.log('options.url:', options.url); // null\n         * console.log('req.url:', req.url); // https://google.com\n         * ```\n         */\n        RequestOptions.prototype.merge = function (options) {\n            return new RequestOptions({\n                method: options && options.method != null ? options.method : this.method,\n                headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n                body: options && options.body != null ? options.body : this.body,\n                url: options && options.url != null ? options.url : this.url,\n                params: options && this._mergeSearchParams(options.params || options.search),\n                withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                    this.withCredentials,\n                responseType: options && options.responseType != null ? options.responseType :\n                    this.responseType\n            });\n        };\n        RequestOptions.prototype._mergeSearchParams = function (params) {\n            if (!params)\n                return this.params;\n            if (params instanceof URLSearchParams) {\n                return params.clone();\n            }\n            if (typeof params === 'string') {\n                return new URLSearchParams(params);\n            }\n            return this._parseParams(params);\n        };\n        RequestOptions.prototype._parseParams = function (objParams) {\n            var _this = this;\n            if (objParams === void 0) { objParams = {}; }\n            var params = new URLSearchParams();\n            Object.keys(objParams).forEach(function (key) {\n                var value = objParams[key];\n                if (Array.isArray(value)) {\n                    value.forEach(function (item) { return _this._appendParam(key, item, params); });\n                }\n                else {\n                    _this._appendParam(key, value, params);\n                }\n            });\n            return params;\n        };\n        RequestOptions.prototype._appendParam = function (key, value, params) {\n            if (typeof value !== 'string') {\n                value = JSON.stringify(value);\n            }\n            params.append(key, value);\n        };\n        return RequestOptions;\n    }());\n    /**\n     * Subclass of {@link RequestOptions}, with default values.\n     *\n     * Default values:\n     *  * method: {@link RequestMethod RequestMethod.Get}\n     *  * headers: empty {@link Headers} object\n     *\n     * This class could be extended and bound to the {@link RequestOptions} class\n     * when configuring an {@link Injector}, in order to override the default options\n     * used by {@link Http} to create and send {@link Request Requests}.\n     *\n     * ```typescript\n     * import {BaseRequestOptions, RequestOptions} from '@angular/http';\n     *\n     * class MyOptions extends BaseRequestOptions {\n     *   search: string = 'coreTeam=true';\n     * }\n     *\n     * {provide: RequestOptions, useClass: MyOptions};\n     * ```\n     *\n     * The options could also be extended when manually creating a {@link Request}\n     * object.\n     *\n     * ```\n     * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * const options = new BaseRequestOptions();\n     * const req = new Request(options.merge({\n     *   method: RequestMethod.Post,\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var BaseRequestOptions = /** @class */ (function (_super) {\n        __extends(BaseRequestOptions, _super);\n        function BaseRequestOptions() {\n            return _super.call(this, { method: exports.RequestMethod.Get, headers: new Headers() }) || this;\n        }\n        BaseRequestOptions.ngInjectableDef = i0.defineInjectable({ token: BaseRequestOptions, factory: function BaseRequestOptions_Factory(t) { return new (t || BaseRequestOptions)(); }, providedIn: null });\n        return BaseRequestOptions;\n    }(RequestOptions));\n    /*@__PURE__*/ i0.ɵsetClassMetadata(BaseRequestOptions, [{\n            type: i0.Injectable\n        }], function () { return []; }, null);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(jeffbcross): properly implement body accessors\n    /**\n     * Creates `Request` instances from provided values.\n     *\n     * The Request's interface is inspired by the Request constructor defined in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#request-class),\n     * but is considered a static value whose body can be accessed many times. There are other\n     * differences in the implementation, but this is the most significant.\n     *\n     * `Request` instances are typically created by higher-level classes, like {@link Http} and\n     * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n     * One such example is when creating services that wrap higher-level services, like {@link Http},\n     * where it may be useful to generate a `Request` with arbitrary headers and search params.\n     *\n     * ```typescript\n     * import {Injectable, Injector} from '@angular/core';\n     * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n     *\n     * @Injectable()\n     * class AutoAuthenticator {\n     *   constructor(public http:Http) {}\n     *   request(url:string) {\n     *     return this.http.request(new Request({\n     *       method: RequestMethod.Get,\n     *       url: url,\n     *       search: 'password=123'\n     *     }));\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n     * var authenticator = injector.get(AutoAuthenticator);\n     * authenticator.request('people.json').subscribe(res => {\n     *   //URL should have included '?password=123'\n     *   console.log('people', res.json());\n     * });\n     * ```\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var Request = /** @class */ (function (_super) {\n        __extends(Request, _super);\n        function Request(requestOptions) {\n            var _this = _super.call(this) || this;\n            // TODO: assert that url is present\n            var url = requestOptions.url;\n            _this.url = requestOptions.url;\n            var paramsArg = requestOptions.params || requestOptions.search;\n            if (paramsArg) {\n                var params = void 0;\n                if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                    params = urlEncodeParams(paramsArg).toString();\n                }\n                else {\n                    params = paramsArg.toString();\n                }\n                if (params.length > 0) {\n                    var prefix = '?';\n                    if (_this.url.indexOf('?') != -1) {\n                        prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                    }\n                    // TODO: just delete search-query-looking string in url?\n                    _this.url = url + prefix + params;\n                }\n            }\n            _this._body = requestOptions.body;\n            _this.method = normalizeMethodName(requestOptions.method);\n            // TODO(jeffbcross): implement behavior\n            // Defaults to 'omit', consistent with browser\n            _this.headers = new Headers(requestOptions.headers);\n            _this.contentType = _this.detectContentType();\n            _this.withCredentials = requestOptions.withCredentials;\n            _this.responseType = requestOptions.responseType;\n            return _this;\n        }\n        /**\n         * Returns the content type enum based on header options.\n         */\n        Request.prototype.detectContentType = function () {\n            switch (this.headers.get('content-type')) {\n                case 'application/json':\n                    return ContentType.JSON;\n                case 'application/x-www-form-urlencoded':\n                    return ContentType.FORM;\n                case 'multipart/form-data':\n                    return ContentType.FORM_DATA;\n                case 'text/plain':\n                case 'text/html':\n                    return ContentType.TEXT;\n                case 'application/octet-stream':\n                    return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n                default:\n                    return this.detectContentTypeFromBody();\n            }\n        };\n        /**\n         * Returns the content type of request's body based on its type.\n         */\n        Request.prototype.detectContentTypeFromBody = function () {\n            if (this._body == null) {\n                return ContentType.NONE;\n            }\n            else if (this._body instanceof URLSearchParams) {\n                return ContentType.FORM;\n            }\n            else if (this._body instanceof FormData) {\n                return ContentType.FORM_DATA;\n            }\n            else if (this._body instanceof Blob$1) {\n                return ContentType.BLOB;\n            }\n            else if (this._body instanceof ArrayBuffer$1) {\n                return ContentType.ARRAY_BUFFER;\n            }\n            else if (this._body && typeof this._body === 'object') {\n                return ContentType.JSON;\n            }\n            else {\n                return ContentType.TEXT;\n            }\n        };\n        /**\n         * Returns the request's body according to its type. If body is undefined, return\n         * null.\n         */\n        Request.prototype.getBody = function () {\n            switch (this.contentType) {\n                case ContentType.JSON:\n                    return this.text();\n                case ContentType.FORM:\n                    return this.text();\n                case ContentType.FORM_DATA:\n                    return this._body;\n                case ContentType.TEXT:\n                    return this.text();\n                case ContentType.BLOB:\n                    return this.blob();\n                case ContentType.ARRAY_BUFFER:\n                    return this.arrayBuffer();\n                default:\n                    return null;\n            }\n        };\n        return Request;\n    }(Body));\n    function urlEncodeParams(params) {\n        var searchParams = new URLSearchParams();\n        Object.keys(params).forEach(function (key) {\n            var value = params[key];\n            if (value && Array.isArray(value)) {\n                value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n            }\n            else {\n                searchParams.append(key, value.toString());\n            }\n        });\n        return searchParams;\n    }\n    var noop = function () { };\n    var w = typeof window == 'object' ? window : noop;\n    var FormData = w /** TODO #9100 */['FormData'] || noop;\n    var Blob$1 = w /** TODO #9100 */['Blob'] || noop;\n    var ArrayBuffer$1 = w /** TODO #9100 */['ArrayBuffer'] || noop;\n\n    function httpRequest(backend, request) {\n        return backend.createConnection(request).response;\n    }\n    function mergeOptions(defaultOpts, providedOpts, method, url) {\n        var newOptions = defaultOpts;\n        if (providedOpts) {\n            // Hack so Dart can used named parameters\n            return newOptions.merge(new RequestOptions({\n                method: providedOpts.method || method,\n                url: providedOpts.url || url,\n                search: providedOpts.search,\n                params: providedOpts.params,\n                headers: providedOpts.headers,\n                body: providedOpts.body,\n                withCredentials: providedOpts.withCredentials,\n                responseType: providedOpts.responseType\n            }));\n        }\n        return newOptions.merge(new RequestOptions({ method: method, url: url }));\n    }\n    /**\n     * Performs http requests using `XMLHttpRequest` as the default backend.\n     *\n     * `Http` is available as an injectable class, with methods to perform http requests. Calling\n     * `request` returns an `Observable` which will emit a single {@link Response} when a\n     * response is received.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import {Http, HTTP_PROVIDERS} from '@angular/http';\n     * import {map} from 'rxjs/operators';\n     *\n     * @Component({\n     *   selector: 'http-app',\n     *   viewProviders: [HTTP_PROVIDERS],\n     *   templateUrl: 'people.html'\n     * })\n     * class PeopleComponent {\n     *   constructor(http: Http) {\n     *     http.get('people.json')\n     *       // Call map on the response observable to get the parsed people object\n     *       .pipe(map(res => res.json()))\n     *       // Subscribe to the observable to get the parsed people object and attach it to the\n     *       // component\n     *       .subscribe(people => this.people = people);\n     *   }\n     * }\n     * ```\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n     * ```\n     *\n     * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n     * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n     * the {@link XHRBackend} provider, as in the following example:\n     *\n     * ### Example\n     *\n     * ```typescript\n     * import {BaseRequestOptions, Http} from '@angular/http';\n     * import {MockBackend} from '@angular/http/testing';\n     * var injector = Injector.resolveAndCreate([\n     *   BaseRequestOptions,\n     *   MockBackend,\n     *   {provide: Http, useFactory:\n     *       function(backend, defaultOptions) {\n     *         return new Http(backend, defaultOptions);\n     *       },\n     *       deps: [MockBackend, BaseRequestOptions]}\n     * ]);\n     * var http = injector.get(Http);\n     * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n     * ```\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var Http = /** @class */ (function () {\n        function Http(_backend, _defaultOptions) {\n            this._backend = _backend;\n            this._defaultOptions = _defaultOptions;\n        }\n        /**\n         * Performs any type of http request. First argument is required, and can either be a url or\n         * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n         * object can be provided as the 2nd argument. The options object will be merged with the values\n         * of {@link BaseRequestOptions} before performing the request.\n         */\n        Http.prototype.request = function (url, options) {\n            var responseObservable;\n            if (typeof url === 'string') {\n                responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));\n            }\n            else if (url instanceof Request) {\n                responseObservable = httpRequest(this._backend, url);\n            }\n            else {\n                throw new Error('First argument must be a url string or Request instance.');\n            }\n            return responseObservable;\n        };\n        /**\n         * Performs a request with `get` http method.\n         */\n        Http.prototype.get = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));\n        };\n        /**\n         * Performs a request with `post` http method.\n         */\n        Http.prototype.post = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Post, url)));\n        };\n        /**\n         * Performs a request with `put` http method.\n         */\n        Http.prototype.put = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Put, url)));\n        };\n        /**\n         * Performs a request with `delete` http method.\n         */\n        Http.prototype.delete = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Delete, url)));\n        };\n        /**\n         * Performs a request with `patch` http method.\n         */\n        Http.prototype.patch = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Patch, url)));\n        };\n        /**\n         * Performs a request with `head` http method.\n         */\n        Http.prototype.head = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Head, url)));\n        };\n        /**\n         * Performs a request with `options` http method.\n         */\n        Http.prototype.options = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Options, url)));\n        };\n        Http.ngInjectableDef = i0.defineInjectable({ token: Http, factory: function Http_Factory(t) { return new (t || Http)(i0.inject(ConnectionBackend), i0.inject(RequestOptions)); }, providedIn: null });\n        return Http;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(Http, [{\n            type: i0.Injectable\n        }], function () { return [{ type: ConnectionBackend }, { type: RequestOptions }]; }, null);\n    /**\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var Jsonp = /** @class */ (function (_super) {\n        __extends(Jsonp, _super);\n        function Jsonp(backend, defaultOptions) {\n            return _super.call(this, backend, defaultOptions) || this;\n        }\n        /**\n         * Performs any type of http request. First argument is required, and can either be a url or\n         * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n         * object can be provided as the 2nd argument. The options object will be merged with the values\n         * of {@link BaseRequestOptions} before performing the request.\n         *\n         * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n         * supported by all current browsers. Because JSONP creates a `<script>` element with\n         * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n         * source could expose your application to XSS risks. Data exposed by JSONP may also be\n         * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n         * future security issues (e.g. content sniffing).  For more detail, see the\n         * [Security Guide](http://g.co/ng/security).\n         */\n        Jsonp.prototype.request = function (url, options) {\n            var responseObservable;\n            if (typeof url === 'string') {\n                url =\n                    new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url));\n            }\n            if (url instanceof Request) {\n                if (url.method !== exports.RequestMethod.Get) {\n                    throw new Error('JSONP requests must use GET request method.');\n                }\n                responseObservable = httpRequest(this._backend, url);\n            }\n            else {\n                throw new Error('First argument must be a url string or Request instance.');\n            }\n            return responseObservable;\n        };\n        Jsonp.ngInjectableDef = i0.defineInjectable({ token: Jsonp, factory: function Jsonp_Factory(t) { return new (t || Jsonp)(i0.inject(ConnectionBackend), i0.inject(RequestOptions)); }, providedIn: null });\n        return Jsonp;\n    }(Http));\n    /*@__PURE__*/ i0.ɵsetClassMetadata(Jsonp, [{\n            type: i0.Injectable\n        }], function () { return [{ type: ConnectionBackend }, { type: RequestOptions }]; }, null);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function _createDefaultCookieXSRFStrategy() {\n        return new CookieXSRFStrategy();\n    }\n    function httpFactory(xhrBackend, requestOptions) {\n        return new Http(xhrBackend, requestOptions);\n    }\n    function jsonpFactory(jsonpBackend, requestOptions) {\n        return new Jsonp(jsonpBackend, requestOptions);\n    }\n    /**\n     * The module that includes http's providers\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var HttpModule = /** @class */ (function () {\n        function HttpModule() {\n        }\n        HttpModule.ngModuleDef = i0.ɵdefineNgModule({ type: HttpModule });\n        HttpModule.ngInjectorDef = i0.defineInjector({ factory: function HttpModule_Factory(t) { return new (t || HttpModule)(); }, providers: [\n                // TODO(pascal): use factory type annotations once supported in DI\n                // issue: https://github.com/angular/angular/issues/3183\n                { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                BrowserXhr,\n                { provide: RequestOptions, useClass: BaseRequestOptions },\n                { provide: ResponseOptions, useClass: BaseResponseOptions },\n                XHRBackend,\n                { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n            ], imports: [] });\n        return HttpModule;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(HttpModule, [{\n            type: i0.NgModule,\n            args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                        BrowserXhr,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        XHRBackend,\n                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                    ],\n                }]\n        }], null, null);\n    /**\n     * The module that includes jsonp's providers\n     *\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var JsonpModule = /** @class */ (function () {\n        function JsonpModule() {\n        }\n        JsonpModule.ngModuleDef = i0.ɵdefineNgModule({ type: JsonpModule });\n        JsonpModule.ngInjectorDef = i0.defineInjector({ factory: function JsonpModule_Factory(t) { return new (t || JsonpModule)(); }, providers: [\n                // TODO(pascal): use factory type annotations once supported in DI\n                // issue: https://github.com/angular/angular/issues/3183\n                { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                BrowserJsonp,\n                { provide: RequestOptions, useClass: BaseRequestOptions },\n                { provide: ResponseOptions, useClass: BaseResponseOptions },\n                JSONPBackend,\n            ], imports: [] });\n        return JsonpModule;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(JsonpModule, [{\n            type: i0.NgModule,\n            args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                        BrowserJsonp,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        JSONPBackend,\n                    ],\n                }]\n        }], null, null);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @deprecated see https://angular.io/guide/http\n     * @publicApi\n     */\n    var VERSION = new i0.Version('8.0.0-beta.8+46.sha-8ef690c.with-local-changes');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.BrowserXhr = BrowserXhr;\n    exports.JSONPBackend = JSONPBackend;\n    exports.JSONPConnection = JSONPConnection;\n    exports.CookieXSRFStrategy = CookieXSRFStrategy;\n    exports.XHRBackend = XHRBackend;\n    exports.XHRConnection = XHRConnection;\n    exports.BaseRequestOptions = BaseRequestOptions;\n    exports.RequestOptions = RequestOptions;\n    exports.BaseResponseOptions = BaseResponseOptions;\n    exports.ResponseOptions = ResponseOptions;\n    exports.Headers = Headers;\n    exports.Http = Http;\n    exports.Jsonp = Jsonp;\n    exports.HttpModule = HttpModule;\n    exports.JsonpModule = JsonpModule;\n    exports.Connection = Connection;\n    exports.ConnectionBackend = ConnectionBackend;\n    exports.XSRFStrategy = XSRFStrategy;\n    exports.Request = Request;\n    exports.Response = Response;\n    exports.QueryEncoder = QueryEncoder;\n    exports.URLSearchParams = URLSearchParams;\n    exports.VERSION = VERSION;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=http.umd.js.map\n"]}