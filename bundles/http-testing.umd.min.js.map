{"version":3,"sources":["packages/http/http-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","http","testing","core","rxjs","operators","this","MockConnection","req","response","ReplaySubject","pipe","take","readyState","ReadyState","Open","request","prototype","mockRespond","res","Done","Cancelled","Error","next","complete","mockDownload","mockError","err","error","MockBackend","_this","connectionsArray","connections","Subject","subscribe","connection","push","pendingConnections","verifyNoPendingRequests","pending","c","resolveAllConnections","createConnection","Request","decorators","type","Injectable","ctorParameters","Object","defineProperty","value"],"mappings":";;;;;CAMC,SAAUA,EAAQC,GACC,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,iBAAkBA,QAAQ,QAASA,QAAQ,mBAC3I,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,yBAA0B,UAAW,gBAAiB,gBAAiB,OAAQ,kBAAmBJ,GACrJA,GAASD,EAAOO,GAAKP,EAAOO,OAAUP,EAAOO,GAAGC,KAAOR,EAAOO,GAAGC,SAAYR,EAAOO,GAAGC,KAAKC,YAAcT,EAAOO,GAAGG,KAAKV,EAAOO,GAAGC,KAAKR,EAAOW,KAAKX,EAAOW,KAAKC,WAHlK,CAIEC,KAAM,SAAWX,EAAQQ,EAAKF,EAAKG,EAAKC,GAAa;;;;;;;GAevD,IAAIE,EAAgC,WAChC,SAASA,EAAeC,GACpBF,KAAKG,SAAW,IAAIL,EAAKM,cAAc,GAAGC,KAAKN,EAAUO,KAAK,IAC9DN,KAAKO,WAAaZ,EAAKa,WAAWC,KAClCT,KAAKU,QAAUR,EAqInB,OArGAD,EAAeU,UAAUC,YAezB,SAAUC,GACN,GAAIb,KAAKO,aAAeZ,EAAKa,WAAWM,MAAQd,KAAKO,aAAeZ,EAAKa,WAAWO,UAChF,MAAM,IAAIC,MAAM,wCAEpBhB,KAAKO,WAAaZ,EAAKa,WAAWM,KAClCd,KAAKG,SAASc,KAAKJ,GACnBb,KAAKG,SAASe,YAclBjB,EAAeU,UAAUQ,aAMzB,SAAUN,KAsCVZ,EAAeU,UAAUS,UAiBzB,SAAUC,GAENrB,KAAKO,WAAaZ,EAAKa,WAAWM,KAClCd,KAAKG,SAASmB,MAAMD,IAEjBpB,EAzIwB,GAkO/BsB,EAA6B,WAC7B,SAASA,IACL,IAAIC,EAAQxB,KACZA,KAAKyB,oBACLzB,KAAK0B,YAAc,IAAI5B,EAAK6B,QAC5B3B,KAAK0B,YAAYE,UAAU,SAAUC,GAAc,OAAOL,EAAMC,iBAAiBK,KAAKD,KACtF7B,KAAK+B,mBAAqB,IAAIjC,EAAK6B,QAyEvC,OA7DAJ,EAAYZ,UAAUqB,wBAKtB,WACI,IAAIC,EAAU,EAEd,GADAjC,KAAK+B,mBAAmBH,UAAU,SAAUM,GAAK,OAAOD,MACpDA,EAAU,EACV,MAAM,IAAIjB,MAAMiB,EAAU,wCAclCV,EAAYZ,UAAUwB,sBAMtB,WAAcnC,KAAK0B,YAAYE,UAAU,SAAUM,GAAK,OAAOA,EAAE3B,WAAa,KAa9EgB,EAAYZ,UAAUyB,iBAMtB,SAAUlC,GACN,KAAKA,GAASA,aAAeP,EAAK0C,SAC9B,MAAM,IAAIrB,MAAM,yDAA2Dd,GAE/E,IAAI2B,EAAa,IAAI5B,EAAeC,GAEpC,OADAF,KAAK0B,YAAYT,KAAKY,GACfA,GAEXN,EAAYe,aACNC,KAAM1C,EAAK2C,aAGjBjB,EAAYkB,eAAiB,WAAc,UACpClB,EA/EqB;;;;;;;;;;;;;;;;;;;;;;AA8GhClC,EAAQY,eAAiBA,EACzBZ,EAAQkC,YAAcA,EAEtBmB,OAAOC,eAAetD,EAAS,cAAgBuD,OAAO","sourcesContent":["/**\n * @license Angular v6.0.3\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/http'), require('rxjs'), require('rxjs/operators')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/http/testing', ['exports', '@angular/core', '@angular/http', 'rxjs', 'rxjs/operators'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}, global.ng.http.testing = {}),global.ng.core,global.ng.http,global.rxjs,global.rxjs.operators));\n}(this, (function (exports,core,http,rxjs,operators) { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *\n * Mock Connection to represent a {@link Connection} for tests.\n *\n * @deprecated use @angular/common/http instead\n */\nvar MockConnection = /** @class */ (function () {\n    function MockConnection(req) {\n        this.response = new rxjs.ReplaySubject(1).pipe(operators.take(1));\n        this.readyState = http.ReadyState.Open;\n        this.request = req;\n    }\n    /**\n     * Sends a mock response to the connection. This response is the value that is emitted to the\n     * {@link EventEmitter} returned by {@link Http}.\n     *\n     * ### Example\n     *\n     * ```\n     * var connection;\n     * backend.connections.subscribe(c => connection = c);\n     * http.request('data.json').subscribe(res => console.log(res.text()));\n     * connection.mockRespond(new Response(new ResponseOptions({ body: 'fake response' }))); //logs\n     * 'fake response'\n     * ```\n     *\n     */\n    /**\n       * Sends a mock response to the connection. This response is the value that is emitted to the\n       * {@link EventEmitter} returned by {@link Http}.\n       *\n       * ### Example\n       *\n       * ```\n       * var connection;\n       * backend.connections.subscribe(c => connection = c);\n       * http.request('data.json').subscribe(res => console.log(res.text()));\n       * connection.mockRespond(new Response(new ResponseOptions({ body: 'fake response' }))); //logs\n       * 'fake response'\n       * ```\n       *\n       */\n    MockConnection.prototype.mockRespond = /**\n       * Sends a mock response to the connection. This response is the value that is emitted to the\n       * {@link EventEmitter} returned by {@link Http}.\n       *\n       * ### Example\n       *\n       * ```\n       * var connection;\n       * backend.connections.subscribe(c => connection = c);\n       * http.request('data.json').subscribe(res => console.log(res.text()));\n       * connection.mockRespond(new Response(new ResponseOptions({ body: 'fake response' }))); //logs\n       * 'fake response'\n       * ```\n       *\n       */\n    function (res) {\n        if (this.readyState === http.ReadyState.Done || this.readyState === http.ReadyState.Cancelled) {\n            throw new Error('Connection has already been resolved');\n        }\n        this.readyState = http.ReadyState.Done;\n        this.response.next(res);\n        this.response.complete();\n    };\n    /**\n     * Not yet implemented!\n     *\n     * Sends the provided {@link Response} to the `downloadObserver` of the `Request`\n     * associated with this connection.\n     */\n    /**\n       * Not yet implemented!\n       *\n       * Sends the provided {@link Response} to the `downloadObserver` of the `Request`\n       * associated with this connection.\n       */\n    MockConnection.prototype.mockDownload = /**\n       * Not yet implemented!\n       *\n       * Sends the provided {@link Response} to the `downloadObserver` of the `Request`\n       * associated with this connection.\n       */\n    function (res) {\n        // this.request.downloadObserver.onNext(res);\n        // if (res.bytesLoaded === res.totalBytes) {\n        //   this.request.downloadObserver.onCompleted();\n        // }\n    };\n    // TODO(jeffbcross): consider using Response type\n    /**\n     * Emits the provided error object as an error to the {@link Response} {@link EventEmitter}\n     * returned\n     * from {@link Http}.\n     *\n     * ### Example\n     *\n     * ```\n     * var connection;\n     * backend.connections.subscribe(c => connection = c);\n     * http.request('data.json').subscribe(res => res, err => console.log(err)));\n     * connection.mockError(new Error('error'));\n     * ```\n     *\n     */\n    // TODO(jeffbcross): consider using Response type\n    /**\n       * Emits the provided error object as an error to the {@link Response} {@link EventEmitter}\n       * returned\n       * from {@link Http}.\n       *\n       * ### Example\n       *\n       * ```\n       * var connection;\n       * backend.connections.subscribe(c => connection = c);\n       * http.request('data.json').subscribe(res => res, err => console.log(err)));\n       * connection.mockError(new Error('error'));\n       * ```\n       *\n       */\n    MockConnection.prototype.mockError = \n    // TODO(jeffbcross): consider using Response type\n    /**\n       * Emits the provided error object as an error to the {@link Response} {@link EventEmitter}\n       * returned\n       * from {@link Http}.\n       *\n       * ### Example\n       *\n       * ```\n       * var connection;\n       * backend.connections.subscribe(c => connection = c);\n       * http.request('data.json').subscribe(res => res, err => console.log(err)));\n       * connection.mockError(new Error('error'));\n       * ```\n       *\n       */\n    function (err) {\n        // Matches ResourceLoader semantics\n        this.readyState = http.ReadyState.Done;\n        this.response.error(err);\n    };\n    return MockConnection;\n}());\n/**\n * A mock backend for testing the {@link Http} service.\n *\n * This class can be injected in tests, and should be used to override providers\n * to other backends, such as {@link XHRBackend}.\n *\n * ### Example\n *\n * ```\n * import {Injectable, Injector} from '@angular/core';\n * import {async, fakeAsync, tick} from '@angular/core/testing';\n * import {BaseRequestOptions, ConnectionBackend, Http, RequestOptions} from '@angular/http';\n * import {Response, ResponseOptions} from '@angular/http';\n * import {MockBackend, MockConnection} from '@angular/http/testing';\n *\n * const HERO_ONE = 'HeroNrOne';\n * const HERO_TWO = 'WillBeAlwaysTheSecond';\n *\n * @Injectable()\n * class HeroService {\n *   constructor(private http: Http) {}\n *\n *   getHeroes(): Promise<String[]> {\n *     return this.http.get('myservices.de/api/heroes')\n *         .toPromise()\n *         .then(response => response.json().data)\n *         .catch(e => this.handleError(e));\n *   }\n *\n *   private handleError(error: any): Promise<any> {\n *     console.error('An error occurred', error);\n *     return Promise.reject(error.message || error);\n *   }\n * }\n *\n * describe('MockBackend HeroService Example', () => {\n *   beforeEach(() => {\n *     this.injector = Injector.create([\n *       {provide: ConnectionBackend, useClass: MockBackend},\n *       {provide: RequestOptions, useClass: BaseRequestOptions},\n *       Http,\n *       HeroService,\n *     ]);\n *     this.heroService = this.injector.get(HeroService);\n *     this.backend = this.injector.get(ConnectionBackend) as MockBackend;\n *     this.backend.connections.subscribe((connection: any) => this.lastConnection = connection);\n *   });\n *\n *   it('getHeroes() should query current service url', () => {\n *     this.heroService.getHeroes();\n *     expect(this.lastConnection).toBeDefined('no http service connection at all?');\n *     expect(this.lastConnection.request.url).toMatch(/api\\/heroes$/, 'url invalid');\n *   });\n *\n *   it('getHeroes() should return some heroes', fakeAsync(() => {\n *        let result: String[];\n *        this.heroService.getHeroes().then((heroes: String[]) => result = heroes);\n *        this.lastConnection.mockRespond(new Response(new ResponseOptions({\n *          body: JSON.stringify({data: [HERO_ONE, HERO_TWO]}),\n *        })));\n *        tick();\n *        expect(result.length).toEqual(2, 'should contain given amount of heroes');\n *        expect(result[0]).toEqual(HERO_ONE, ' HERO_ONE should be the first hero');\n *        expect(result[1]).toEqual(HERO_TWO, ' HERO_TWO should be the second hero');\n *      }));\n *\n *   it('getHeroes() while server is down', fakeAsync(() => {\n *        let result: String[];\n *        let catchedError: any;\n *        this.heroService.getHeroes()\n *            .then((heroes: String[]) => result = heroes)\n *            .catch((error: any) => catchedError = error);\n *        this.lastConnection.mockRespond(new Response(new ResponseOptions({\n *          status: 404,\n *          statusText: 'URL not Found',\n *        })));\n *        tick();\n *        expect(result).toBeUndefined();\n *        expect(catchedError).toBeDefined();\n *      }));\n * });\n * ```\n *\n * This method only exists in the mock implementation, not in real Backends.\n *\n * @deprecated use @angular/common/http instead\n */\nvar MockBackend = /** @class */ (function () {\n    function MockBackend() {\n        var _this = this;\n        this.connectionsArray = [];\n        this.connections = new rxjs.Subject();\n        this.connections.subscribe(function (connection) { return _this.connectionsArray.push(connection); });\n        this.pendingConnections = new rxjs.Subject();\n    }\n    /**\n     * Checks all connections, and raises an exception if any connection has not received a response.\n     *\n     * This method only exists in the mock implementation, not in real Backends.\n     */\n    /**\n       * Checks all connections, and raises an exception if any connection has not received a response.\n       *\n       * This method only exists in the mock implementation, not in real Backends.\n       */\n    MockBackend.prototype.verifyNoPendingRequests = /**\n       * Checks all connections, and raises an exception if any connection has not received a response.\n       *\n       * This method only exists in the mock implementation, not in real Backends.\n       */\n    function () {\n        var pending = 0;\n        this.pendingConnections.subscribe(function (c) { return pending++; });\n        if (pending > 0)\n            throw new Error(pending + \" pending connections to be resolved\");\n    };\n    /**\n     * Can be used in conjunction with `verifyNoPendingRequests` to resolve any not-yet-resolve\n     * connections, if it's expected that there are connections that have not yet received a response.\n     *\n     * This method only exists in the mock implementation, not in real Backends.\n     */\n    /**\n       * Can be used in conjunction with `verifyNoPendingRequests` to resolve any not-yet-resolve\n       * connections, if it's expected that there are connections that have not yet received a response.\n       *\n       * This method only exists in the mock implementation, not in real Backends.\n       */\n    MockBackend.prototype.resolveAllConnections = /**\n       * Can be used in conjunction with `verifyNoPendingRequests` to resolve any not-yet-resolve\n       * connections, if it's expected that there are connections that have not yet received a response.\n       *\n       * This method only exists in the mock implementation, not in real Backends.\n       */\n    function () { this.connections.subscribe(function (c) { return c.readyState = 4; }); };\n    /**\n     * Creates a new {@link MockConnection}. This is equivalent to calling `new\n     * MockConnection()`, except that it also will emit the new `Connection` to the `connections`\n     * emitter of this `MockBackend` instance. This method will usually only be used by tests\n     * against the framework itself, not by end-users.\n     */\n    /**\n       * Creates a new {@link MockConnection}. This is equivalent to calling `new\n       * MockConnection()`, except that it also will emit the new `Connection` to the `connections`\n       * emitter of this `MockBackend` instance. This method will usually only be used by tests\n       * against the framework itself, not by end-users.\n       */\n    MockBackend.prototype.createConnection = /**\n       * Creates a new {@link MockConnection}. This is equivalent to calling `new\n       * MockConnection()`, except that it also will emit the new `Connection` to the `connections`\n       * emitter of this `MockBackend` instance. This method will usually only be used by tests\n       * against the framework itself, not by end-users.\n       */\n    function (req) {\n        if (!req || !(req instanceof http.Request)) {\n            throw new Error(\"createConnection requires an instance of Request, got \" + req);\n        }\n        var connection = new MockConnection(req);\n        this.connections.next(connection);\n        return connection;\n    };\n    MockBackend.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    MockBackend.ctorParameters = function () { return []; };\n    return MockBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.MockConnection = MockConnection;\nexports.MockBackend = MockBackend;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=http-testing.umd.js.map\n"]}