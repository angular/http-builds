{"version":3,"file":"http.umd.js","sources":["../../../../packages/http/src/version.ts","../../../../packages/http/src/http_module.ts","../../../../packages/http/src/http.ts","../../../../packages/http/src/static_request.ts","../../../../packages/http/src/base_request_options.ts","../../../../packages/http/src/backends/xhr_backend.ts","../../../../packages/http/src/backends/jsonp_backend.ts","../../../../packages/http/src/backends/browser_jsonp.ts","../../../../packages/http/src/static_response.ts","../../../../packages/http/src/body.ts","../../../../packages/http/src/url_search_params.ts","../../../../packages/http/src/http_utils.ts","../../../../packages/http/src/interfaces.ts","../../../../packages/http/src/base_response_options.ts","../../../../packages/http/src/headers.ts","../../../../packages/http/src/enums.ts","../../../../packages/http/src/backends/browser_xhr.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * \\@stable\n */\nexport const VERSION = new Version('4.0.0-rc.4-b7212f5');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend, JSONPBackend_} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n/**\n * @return {?}\n */\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n * \n * \\@experimental\n */\nexport class HttpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HttpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpModule.ctorParameters;\n}\n\n/**\n * The module that includes jsonp's providers\n * \n * \\@experimental\n */\nexport class JsonpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    {provide: JSONPBackend, useClass: JSONPBackend_},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JsonpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonpModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs, method: RequestMethod,\n    url: string): RequestOptions {\n  const /** @type {?} */ newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    }));\n  }\n\n  return newOptions.merge(new RequestOptions({method, url}));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n * \n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n * \n * ### Example\n * \n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({ \n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n * \n * \n * ### Example\n * \n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n * \n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n * \n * ### Example\n * \n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n * \n * \\@experimental\n */\nexport class Http {\n/**\n * @param {?} _backend\n * @param {?} _defaultOptions\n */\nconstructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url)))));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n/**\n * Performs a request with `get` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n/**\n * Performs a request with `post` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n/**\n * Performs a request with `put` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n/**\n * Performs a request with `delete` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n/**\n * Performs a request with `patch` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n/**\n * Performs a request with `head` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n/**\n * Performs a request with `options` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Http_tsickle_Closure_declarations() {\n/** @type {?} */\nHttp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttp.ctorParameters;\n/** @type {?} */\nHttp.prototype._backend;\n/** @type {?} */\nHttp.prototype._defaultOptions;\n}\n\n/**\n * \\@experimental\n */\nexport class Jsonp extends Http {\n/**\n * @param {?} backend\n * @param {?} defaultOptions\n */\nconstructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * \n * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n * supported by all current browsers. Because JSONP creates a `<script>` element with\n * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n * source could expose your application to XSS risks. Data exposed by JSONP may also be\n * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n * future security issues (e.g. content sniffing).  For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url))));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Jsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates `Request` instances from provided values.\n * \n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n * \n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n * \n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n * \n * \\@Injectable() \n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n * \n * \\@experimental\n */\nexport class Request extends Body {\n  /**\n   * Http method with which to perform the request.\n   */\n  method: RequestMethod;\n  /**\n   * {@link Headers} instance\n   */\n  headers: Headers;\n  /** Url of the remote resource */\n  url: string;\nprivate contentType: ContentType;\n  /** Enable use credentials */\n  withCredentials: boolean;\n  /** Buffer to store the response */\n  responseType: ResponseContentType;\n/**\n * @param {?} requestOptions\n */\nconstructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url;\n    if (requestOptions.params) {\n      const params = requestOptions.params.toString();\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials;\n    this.responseType = requestOptions.responseType;\n  }\n/**\n * Returns the content type enum based on header options.\n * @return {?}\n */\ndetectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n/**\n * Returns the content type of request's body based on its type.\n * @return {?}\n */\ndetectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n/**\n * Returns the request's body according to its type. If body is undefined, return\n * null.\n * @return {?}\n */\ngetBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction Request_tsickle_Closure_declarations() {\n/**\n * Http method with which to perform the request.\n * @type {?}\n */\nRequest.prototype.method;\n/**\n * {\\@link Headers} instance\n * @type {?}\n */\nRequest.prototype.headers;\n/**\n * Url of the remote resource\n * @type {?}\n */\nRequest.prototype.url;\n/**\n * Type of the request body *\n * @type {?}\n */\nRequest.prototype.contentType;\n/**\n * Enable use credentials\n * @type {?}\n */\nRequest.prototype.withCredentials;\n/**\n * Buffer to store the response\n * @type {?}\n */\nRequest.prototype.responseType;\n}\n\n\nconst /** @type {?} */ noop = function() {};\nconst /** @type {?} */ w = typeof window == 'object' ? window : noop;\nconst /** @type {?} */ FormData = ( /** @type {?} */((w as any)) /** TODO #9100 */)['FormData'] || noop;\nconst /** @type {?} */ Blob = ( /** @type {?} */((w as any)) /** TODO #9100 */)['Blob'] || noop;\nexport const /** @type {?} */ ArrayBuffer = ( /** @type {?} */((w as any)) /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n * \n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n * \n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n * \n * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * var req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod|string;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  body: any;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  params: URLSearchParams;\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @return {?}\n */\nget search(): URLSearchParams { return this.params; }\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @param {?} params\n * @return {?}\n */\nset search(params: URLSearchParams) { this.params = params; }\n  /**\n   * Enable use credentials for a {@link Request}.\n   */\n  withCredentials: boolean;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType;\n/**\n * @param {?=} __0\n */\nconstructor(\n      {method, headers, body, url, search, params, withCredentials,\n       responseType}: RequestOptionsArgs = {}) {\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n/**\n * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * Note that `headers` and `search` will override existing values completely if present in\n * the `options` object. If these values should be merged, it should be done prior to calling\n * `merge` on the `RequestOptions` instance.\n * \n * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new RequestOptions({\n *   method: RequestMethod.Post\n * });\n * var req = new Request(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nprivate _mergeSearchParams(params: string|URLSearchParams|\n                             {[key: string]: any | any[]}): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n/**\n * @param {?=} objParams\n * @return {?}\n */\nprivate _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const /** @type {?} */ params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const /** @type {?} */ value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} params\n * @return {?}\n */\nprivate _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\nfunction RequestOptions_tsickle_Closure_declarations() {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n * @type {?}\n */\nRequestOptions.prototype.method;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.headers;\n/**\n * Body to be used when creating a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.body;\n/**\n * Url with which to perform a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.url;\n/**\n * Search parameters to be included in a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.params;\n/**\n * Enable use credentials for a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.withCredentials;\n/** @type {?} */\nRequestOptions.prototype.responseType;\n}\n\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n * \n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))\n * \n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new BaseRequestOptions();\n * var req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class BaseRequestOptions extends RequestOptions {\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseRequestOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseRequestOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {ɵgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n * \n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n * \n * \\@experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  readyState: ReadyState;\n/**\n * @param {?} req\n * @param {?} browserXHR\n * @param {?=} baseResponseOptions\n */\nconstructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} req\n * @param {?} _xhr\n * @return {?}\n */\nsetDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */ blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\nfunction XHRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRConnection.prototype.request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n * @type {?}\n */\nXHRConnection.prototype.response;\n/** @type {?} */\nXHRConnection.prototype.readyState;\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n * \n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n * \n * \\@experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n/**\n * @param {?=} _cookieName\n * @param {?=} _headerName\n */\nconstructor(\nprivate _cookieName: string = 'XSRF-TOKEN',\nprivate _headerName: string = 'X-XSRF-TOKEN') {}\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {\n    const /** @type {?} */ xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCookieXSRFStrategy.prototype._cookieName;\n/** @type {?} */\nCookieXSRFStrategy.prototype._headerName;\n}\n\n/**\n * Creates {\\@link XHRConnection} instances.\n * \n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n * \n * ### Example\n * \n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({ \n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nexport class XHRBackend implements ConnectionBackend {\n/**\n * @param {?} _browserXHR\n * @param {?} _baseResponseOptions\n * @param {?} _xsrfStrategy\n */\nconstructor(\nprivate _browserXHR: BrowserXhr,\nprivate _baseResponseOptions: ResponseOptions,\nprivate _xsrfStrategy: XSRFStrategy) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\nfunction XHRBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackend.ctorParameters;\n/** @type {?} */\nXHRBackend.prototype._browserXHR;\n/** @type {?} */\nXHRBackend.prototype._baseResponseOptions;\n/** @type {?} */\nXHRBackend.prototype._xsrfStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPConnection implements Connection {\n  /**\n   * The {@link ReadyState} of this request.\n   */\n  readyState: ReadyState;\n\n  /**\n   * The outgoing HTTP request.\n   */\n  request: Request;\n\n  /**\n   * An observable that completes with the response, when the request is finished.\n   */\n  response: Observable<Response>;\n/**\n * Callback called when the JSONP request completes, to notify the application\n * of the new data.\n * @abstract\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {}\n}\n\nfunction JSONPConnection_tsickle_Closure_declarations() {\n/**\n * The {\\@link ReadyState} of this request.\n * @type {?}\n */\nJSONPConnection.prototype.readyState;\n/**\n * The outgoing HTTP request.\n * @type {?}\n */\nJSONPConnection.prototype.request;\n/**\n * An observable that completes with the response, when the request is finished.\n * @type {?}\n */\nJSONPConnection.prototype.response;\n}\n\nexport class JSONPConnection_ extends JSONPConnection {\nprivate _id: string;\nprivate _script: Element;\nprivate _responseData: any;\nprivate _finished: boolean = false;\n/**\n * @param {?} req\n * @param {?} _dom\n * @param {?=} baseResponseOptions\n */\nconstructor(\n      req: Request,\nprivate _dom: BrowserJsonp,\nprivate baseResponseOptions?: ResponseOptions) {\n    super();\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n/**\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\nfunction JSONPConnection__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPConnection_.prototype._id;\n/** @type {?} */\nJSONPConnection_.prototype._script;\n/** @type {?} */\nJSONPConnection_.prototype._responseData;\n/** @type {?} */\nJSONPConnection_.prototype._finished;\n/** @type {?} */\nJSONPConnection_.prototype._dom;\n/** @type {?} */\nJSONPConnection_.prototype.baseResponseOptions;\n}\n\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPBackend extends ConnectionBackend {}\nexport class JSONPBackend_ extends JSONPBackend {\n/**\n * @param {?} _browserJSONP\n * @param {?} _baseResponseOptions\n */\nconstructor(private _browserJSONP: BrowserJsonp,\nprivate _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): JSONPConnection {\n    return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserJsonp, },\n{type: ResponseOptions, },\n];\n}\n\nfunction JSONPBackend__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPBackend_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSONPBackend_.ctorParameters;\n/** @type {?} */\nJSONPBackend_.prototype._browserJSONP;\n/** @type {?} */\nJSONPBackend_.prototype._baseResponseOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nlet /** @type {?} */ _nextRequestId = 0;\nexport const /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\nlet /** @type {?} */ _jsonpConnections: {[key: string]: any} = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const /** @type {?} */ w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\nexport class BrowserJsonp {\n/**\n * @param {?} url\n * @return {?}\n */\nbuild(url: string): any {\n    const /** @type {?} */ node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n/**\n * @return {?}\n */\nnextRequestID(): string { return `__req${_nextRequestId++}`; }\n/**\n * @param {?} id\n * @return {?}\n */\nrequestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n/**\n * @param {?} id\n * @param {?} connection\n * @return {?}\n */\nexposeConnection(id: string, connection: any) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nremoveConnection(id: string) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nsend(node: any) { document.body.appendChild( /** @type {?} */((<Node>(node)))); }\n/**\n * @param {?} node\n * @return {?}\n */\ncleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild( /** @type {?} */((<Node>(node))));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserJsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n/**\n * Creates `Response` instances from provided values.\n * \n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n * \n * ### Example\n * \n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n * \n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n * \n * \\@experimental\n */\nexport class Response extends Body {\n  /**\n   * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n   *\n   * Defaults to \"default\".\n   */\n  type: ResponseType;\n  /**\n   * True if the response's status is within 200-299\n   */\n  ok: boolean;\n  /**\n   * URL of response.\n   *\n   * Defaults to empty string.\n   */\n  url: string;\n  /**\n   * Status code returned by server.\n   *\n   * Defaults to 200.\n   */\n  status: number;\n  /**\n   * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n   * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n   *\n   * Defaults to \"OK\"\n   */\n  statusText: string;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many of the response body's bytes have been loaded, for example if the response is\n   * the result of a progress event.\n   */\n  bytesLoaded: number;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many bytes are expected in the final response body.\n   */\n  totalBytes: number;\n  /**\n   * Headers object based on the `Headers` class in the [Fetch\n   * Spec](https://fetch.spec.whatwg.org/#headers-class).\n   */\n  headers: Headers;\n/**\n * @param {?} responseOptions\n */\nconstructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type;\n    this.url = responseOptions.url;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n\nfunction Response_tsickle_Closure_declarations() {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n * @type {?}\n */\nResponse.prototype.type;\n/**\n * True if the response's status is within 200-299\n * @type {?}\n */\nResponse.prototype.ok;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n * @type {?}\n */\nResponse.prototype.url;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n * @type {?}\n */\nResponse.prototype.status;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n * @type {?}\n */\nResponse.prototype.statusText;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n * @type {?}\n */\nResponse.prototype.bytesLoaded;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n * @type {?}\n */\nResponse.prototype.totalBytes;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n * @type {?}\n */\nResponse.prototype.headers;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nexport abstract class Body {\n/**\n * \\@internal\n */\nprotected _body: any;\n/**\n * Attempts to return body as parsed `JSON` object, or raises an exception.\n * @return {?}\n */\njson(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse( /** @type {?} */((<string>this._body)));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n/**\n * Returns the body as a string, presuming `toString()` can be called on the response body.\n * @return {?}\n */\ntext(): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return String.fromCharCode.apply(null, new Uint16Array( /** @type {?} */((<ArrayBuffer>this._body))));\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n/**\n * Return the body as an ArrayBuffer\n * @return {?}\n */\narrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return /** @type {?} */(( <ArrayBuffer>this._body));\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n/**\n * Returns the request's body as a Blob, assuming that body exists.\n * @return {?}\n */\nblob(): Blob {\n    if (this._body instanceof Blob) {\n      return /** @type {?} */(( <Blob>this._body));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n\nfunction Body_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nBody.prototype._body;\n}\n\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const /** @type {?} */ map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const /** @type {?} */ params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const /** @type {?} */ eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const /** @type {?} */ list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * \\@experimental \n * \n */\nexport class QueryEncoder {\n/**\n * @param {?} k\n * @return {?}\n */\nencodeKey(k: string): string { return standardEncoding(k); }\n/**\n * @param {?} v\n * @return {?}\n */\nencodeValue(v: string): string { return standardEncoding(v); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n * \n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n * \n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n * \n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n * \n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n * \n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n * \n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n/**\n * @param {?=} rawParams\n * @param {?=} queryEncoder\n */\nconstructor(\npublic rawParams: string = '',\nprivate queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n/**\n * @return {?}\n */\nclone(): URLSearchParams {\n    const /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\nhas(param: string): boolean { return this.paramsMap.has(param); }\n/**\n * @param {?} param\n * @return {?}\n */\nget(param: string): string {\n    const /** @type {?} */ storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ngetAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nset(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nsetAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nappend(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nappendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nreplaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ndelete (param: string): void { this.paramsMap.delete(param); }\n}\n\nfunction URLSearchParams_tsickle_Closure_declarations() {\n/** @type {?} */\nURLSearchParams.prototype.paramsMap;\n/** @type {?} */\nURLSearchParams.prototype.rawParams;\n/** @type {?} */\nURLSearchParams.prototype.queryEncoder;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RequestMethod} from './enums';\n/**\n * @param {?} method\n * @return {?}\n */\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const /** @type {?} */ isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nexport function getResponseURL(xhr: any): string {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint16Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Abstract class from which real backends are derived.\n * \n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class ConnectionBackend {\n/**\n * @abstract\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: any) {} }\n/**\n * Abstract class from which real connections are derived.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class Connection {\n  readyState: ReadyState;\n  request: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\nfunction Connection_tsickle_Closure_declarations() {\n/** @type {?} */\nConnection.prototype.readyState;\n/** @type {?} */\nConnection.prototype.request;\n/** @type {?} */\nConnection.prototype.response;\n}\n\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class XSRFStrategy {\n/**\n * @abstract\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request) {} }\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface RequestOptionsArgs {\n  url?: string;\n  method?: string|RequestMethod;\n  /** @deprecated from 4.0.0. Use params instead. */\n  search?: string|URLSearchParams|{[key: string]: any | any[]};\n  params?: string|URLSearchParams|{[key: string]: any | any[]};\n  headers?: Headers;\n  body?: any;\n  withCredentials?: boolean;\n  responseType?: ResponseContentType;\n}\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string; }\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface ResponseOptionsArgs {\n  body?: string|Object|FormData|ArrayBuffer|Blob;\n  status?: number;\n  statusText?: string;\n  headers?: Headers;\n  type?: ResponseType;\n  url?: string;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n * \n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n * \n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n * \n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n * \n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n * \n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n * \n * \\@experimental\n */\nexport class ResponseOptions {\n  // TODO: FormData | Blob\n  /**\n   * String, Object, ArrayBuffer or Blob representing the body of the {@link Response}.\n   */\n  body: string|Object|ArrayBuffer|Blob;\n  /**\n   * Http {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n   * associated with the response.\n   */\n  status: number;\n  /**\n   * Response {@link Headers headers}\n   */\n  headers: Headers;\n/**\n * \\@internal\n */\nstatusText: string;\n/**\n * \\@internal\n */\ntype: ResponseType;\n  url: string;\n/**\n * @param {?=} __0\n */\nconstructor({body, status, headers, statusText, type, url}: ResponseOptionsArgs = {}) {\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n/**\n * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n * override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * This may be useful when sharing a base `ResponseOptions` object inside tests,\n * where certain properties may change from test to test.\n * \n * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: {name: 'Jeff'}\n * });\n * var res = new Response(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('options.url:', options.url); // null\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * console.log('res.url:', res.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\nfunction ResponseOptions_tsickle_Closure_declarations() {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n * @type {?}\n */\nResponseOptions.prototype.body;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n * @type {?}\n */\nResponseOptions.prototype.status;\n/**\n * Response {\\@link Headers headers}\n * @type {?}\n */\nResponseOptions.prototype.headers;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.statusText;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.type;\n/** @type {?} */\nResponseOptions.prototype.url;\n}\n\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n * \n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n * \n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n * \n * \\@experimental\n */\nexport class BaseResponseOptions extends ResponseOptions {\nconstructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseResponseOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseResponseOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseResponseOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n * \n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n * \n * ### Example\n * \n * ```\n * import {Headers} from '\\@angular/http';\n * \n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n * \n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n * \n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n * \n * \\@experimental\n */\nexport class Headers {\n/**\n * \\@internal header names are lower case\n */\n_headers: Map<string, string[]> = new Map();\n/**\n * \\@internal map lower case names to actual names\n */\n_normalizedNames: Map<string, string> = new Map();\n/**\n * @param {?=} headers\n */\nconstructor(headers?: Headers|{[name: string]: any}) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n/**\n * Returns a new Headers instance from the given DOMString of Response Headers\n * @param {?} headersString\n * @return {?}\n */\nstatic fromResponseHeaderString(headersString: string): Headers {\n    const /** @type {?} */ headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const /** @type {?} */ index = line.indexOf(':');\n      if (index > 0) {\n        const /** @type {?} */ name = line.slice(0, index);\n        const /** @type {?} */ value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n/**\n * Appends a header to existing list of header values for a given header name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nappend(name: string, value: string): void {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n/**\n * Deletes all header values for the given name.\n * @param {?} name\n * @return {?}\n */\ndelete (name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (values: string[], name: string, headers: Map<string, string[]>) => void): void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n/**\n * Returns first header that matches given name.\n * @param {?} name\n * @return {?}\n */\nget(name: string): string {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n/**\n * Checks for existence of header by given name.\n * @param {?} name\n * @return {?}\n */\nhas(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n/**\n * Returns the names of the headers\n * @return {?}\n */\nkeys(): string[] { return Array.from(this._normalizedNames.values()); }\n/**\n * Sets or overrides header value for given name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nset(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n/**\n * Returns values of all headers.\n * @return {?}\n */\nvalues(): string[][] { return Array.from(this._headers.values()); }\n/**\n * @return {?}\n */\ntoJSON(): {[name: string]: any} {\n    const /** @type {?} */ serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const /** @type {?} */ split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[this._normalizedNames.get(name)] = split;\n    });\n\n    return serialized;\n  }\n/**\n * Returns list of header values for a given name.\n * @param {?} name\n * @return {?}\n */\ngetAll(name: string): string[] {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) : null;\n  }\n/**\n * This method is not implemented.\n * @return {?}\n */\nentries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate mayBeSetNormalizedName(name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n\nfunction Headers_tsickle_Closure_declarations() {\n/**\n * \\@internal header names are lower case\n * @type {?}\n */\nHeaders.prototype._headers;\n/**\n * \\@internal map lower case names to actual names\n * @type {?}\n */\nHeaders.prototype._normalizedNames;\n}\n\n","\nexport type RequestMethod = number;\nexport let RequestMethod: any = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n\nexport type ReadyState = number;\nexport let ReadyState: any = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n\nexport type ResponseType = number;\nexport let ResponseType: any = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n\nexport type ContentType = number;\nexport let ContentType: any = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n\nexport type ResponseContentType = number;\nexport let ResponseContentType: any = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n * \n * Take care not to evaluate this in non-browser contexts.\n * \n * \\@experimental\n */\nexport class BrowserXhr {\nconstructor() {}\n/**\n * @return {?}\n */\nbuild(): any { return /** @type {?} */(( <any>(new XMLHttpRequest()))); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserXhr.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserXhr.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NgModule","Injectable","ArrayBuffer","ɵgetDOM","Observable"],"mappings":"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"}