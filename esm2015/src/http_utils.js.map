{"version":3,"file":"http_utils.js","sourceRoot":"","sources":["../../../../packages/http/src/http_utils.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,aAAa,EAAC,MAAM,SAAS,CAAC;;;;;AAEtC,MAAM,8BAA8B,MAA8B;IAChE,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC;QAAC,MAAM,CAAC,MAAM,CAAC;IAE9C,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC7B,KAAK,KAAK;YACR,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC;QAC3B,KAAK,MAAM;YACT,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;QAC5B,KAAK,KAAK;YACR,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC;QAC3B,KAAK,QAAQ;YACX,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;QAC9B,KAAK,SAAS;YACZ,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC;QAC/B,KAAK,MAAM;YACT,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;QAC5B,KAAK,OAAO;YACV,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC;KAC9B;IACD,MAAM,IAAI,KAAK,CAAC,uCAAuC,MAAM,qBAAqB,CAAC,CAAC;CACrF;AAED,MAAM,CAAC,uBAAM,SAAS,GAAG,CAAC,MAAc,EAAW,EAAE,CAAC,CAAC,MAAM,IAAI,GAAG,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC;;;;;AAEtF,MAAM,yBAAyB,GAAQ;IACrC,EAAE,CAAC,CAAC,aAAa,IAAI,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC;KACxB;IACD,EAAE,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;KAC/C;IACD,MAAM,CAAC,IAAI,CAAC;CACb;;;;;AAED,MAAM,+BAA+B,KAAa;IAChD,uBAAM,IAAI,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC1C,GAAG,CAAC,CAAC,qBAAI,CAAC,GAAG,CAAC,mBAAE,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACvD,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KAC/B;IACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;CACpB;;;;;AAGD,MAAM,8BAA8B,KAAa;IAC/C,uBAAM,IAAI,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC3C,GAAG,CAAC,CAAC,qBAAI,CAAC,GAAG,CAAC,mBAAE,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACvD,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KAC/B;IACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;CACpB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RequestMethod} from './enums';\n\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const view = new Uint8Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n\n\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const view = new Uint16Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n"]}