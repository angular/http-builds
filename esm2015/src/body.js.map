{"version":3,"file":"body.js","sourceRoot":"","sources":["../../../../packages/http/src/body.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,mBAAmB,EAAC,MAAM,cAAc,CAAC;AACjD,OAAO,EAAC,eAAe,EAAC,MAAM,qBAAqB,CAAC;;;;;;AAOpD,MAAM;;;;;IASJ,IAAI;QACF,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC,KAAK,mBAAS,IAAI,CAAC,KAAK,EAAC,CAAC;SACvC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,YAAY,WAAW,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;SAChC;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;KACnB;;;;;;;;;;;;;;;;;IAgBD,IAAI,CAAC,eAAoC,QAAQ;QAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,YAAY,eAAe,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;SAC9B;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,YAAY,WAAW,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBACrB,KAAK,QAAQ;oBACX,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,WAAW,mBAAC,IAAI,CAAC,KAAoB,EAAC,CAAC,CAAC;gBACrF,KAAK,UAAU;oBACb,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,UAAU,mBAAC,IAAI,CAAC,KAAoB,EAAC,CAAC,CAAC;gBACpF;oBACE,MAAM,IAAI,KAAK,CAAC,mCAAmC,YAAY,EAAE,CAAC,CAAC;aACtE;SACF;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,EAAE,CAAC;SACX;QAED,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;SAC5C;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;KAC9B;;;;;IAKD,WAAW;QACT,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,YAAY,WAAW,CAAC,CAAC,CAAC;YACtC,MAAM,mBAAc,IAAI,CAAC,KAAK,EAAC;SAChC;QAED,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;KACzC;;;;;IAKD,IAAI;QACF,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,YAAY,IAAI,CAAC,CAAC,CAAC;YAC/B,MAAM,mBAAO,IAAI,CAAC,KAAK,EAAC;SACzB;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,YAAY,WAAW,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/B;QAED,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;KAC7E;CACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * HTTP request body used by both {@link Request} and {@link Response}\n * https://fetch.spec.whatwg.org/#body\n */\nexport abstract class Body {\n  /**\n   * @internal\n   */\n  protected _body: any;\n\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   */\n  json(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse(<string>this._body);\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   *\n   * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n   * bytes in the buffer will be interpreted. Valid values are:\n   *\n   * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n   *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n   *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n   *   into consideration. This is the default behavior to avoid breaking apps, but should be\n   *   considered deprecated.\n   *\n   * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n   */\n  text(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array(this._body as ArrayBuffer));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array(this._body as ArrayBuffer));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n\n  /**\n   * Return the body as an ArrayBuffer\n   */\n  arrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return <ArrayBuffer>this._body;\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n\n  /**\n    * Returns the request's body as a Blob, assuming that body exists.\n    */\n  blob(): Blob {\n    if (this._body instanceof Blob) {\n      return <Blob>this._body;\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n"]}