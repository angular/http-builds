{"version":3,"file":"http.js","sources":["../../../../packages/http/index.ts","../../../../packages/http/public_api.ts","../../../../packages/http/src/index.ts","../../../../packages/http/src/version.ts","../../../../packages/http/src/http_module.ts","../../../../packages/http/src/http.ts","../../../../packages/http/src/static_request.ts","../../../../packages/http/src/base_request_options.ts","../../../../packages/http/src/backends/xhr_backend.ts","../../../../packages/http/src/backends/jsonp_backend.ts","../../../../packages/http/src/backends/browser_jsonp.ts","../../../../packages/http/src/static_response.ts","../../../../packages/http/src/body.ts","../../../../packages/http/src/url_search_params.ts","../../../../packages/http/src/http_utils.ts","../../../../packages/http/src/interfaces.ts","../../../../packages/http/src/base_response_options.ts","../../../../packages/http/src/headers.ts","../../../../packages/http/src/enums.ts","../../../../packages/http/src/backends/browser_xhr.ts"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport {BrowserXhr,JSONPBackend,JSONPConnection,CookieXSRFStrategy,XHRBackend,XHRConnection,BaseRequestOptions,RequestOptions,BaseResponseOptions,ResponseOptions,ReadyState,RequestMethod,ResponseContentType,ResponseType,Headers,Http,Jsonp,HttpModule,JsonpModule,Connection,ConnectionBackend,RequestOptionsArgs,ResponseOptionsArgs,XSRFStrategy,Request,Response,QueryEncoder,URLSearchParams,VERSION} from './public_api';\n\nexport {BrowserJsonp as ɵg} from './src/backends/browser_jsonp';\nexport {JSONPBackend_ as ɵa} from './src/backends/jsonp_backend';\nexport {Body as ɵf} from './src/body';\nexport {_createDefaultCookieXSRFStrategy as ɵb,httpFactory as ɵc,jsonpFactory as ɵd} from './src/http_module';\nexport {RequestArgs as ɵe} from './src/interfaces';","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\nexport {BrowserXhr,JSONPBackend,JSONPConnection,CookieXSRFStrategy,XHRBackend,XHRConnection,BaseRequestOptions,RequestOptions,BaseResponseOptions,ResponseOptions,ReadyState,RequestMethod,ResponseContentType,ResponseType,Headers,Http,Jsonp,HttpModule,JsonpModule,Connection,ConnectionBackend,RequestOptionsArgs,ResponseOptionsArgs,XSRFStrategy,Request,Response,QueryEncoder,URLSearchParams,VERSION} from './src/index';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {BrowserXhr} from './backends/browser_xhr';\nexport {JSONPBackend, JSONPConnection} from './backends/jsonp_backend';\nexport {CookieXSRFStrategy, XHRBackend, XHRConnection} from './backends/xhr_backend';\nexport {BaseRequestOptions, RequestOptions} from './base_request_options';\nexport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nexport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nexport {Headers} from './headers';\nexport {Http, Jsonp} from './http';\nexport {HttpModule, JsonpModule} from './http_module';\nexport {Connection, ConnectionBackend, RequestOptionsArgs, ResponseOptionsArgs, XSRFStrategy} from './interfaces';\nexport {Request} from './static_request';\nexport {Response} from './static_response';\nexport {QueryEncoder, URLSearchParams} from './url_search_params';\nexport {VERSION} from './version';\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n/**\n * @deprecated use \\@angular/common/http instead\n */\nexport const /** @type {?} */ VERSION = new Version('5.0.0-beta.5-a1293b2');\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend, JSONPBackend_} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n/**\n * @return {?}\n */\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class HttpModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction HttpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpModule.ctorParameters;\n}\n\n/**\n * The module that includes jsonp's providers\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class JsonpModule {\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    {provide: JSONPBackend, useClass: JSONPBackend_},\n  ],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction JsonpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonpModule.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\n\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestArgs, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs | undefined,\n    method: RequestMethod, url: string): RequestArgs {\n  const /** @type {?} */ newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return /** @type {?} */(( newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    })) as RequestArgs));\n  }\n\n  return /** @type {?} */(( newOptions.merge(new RequestOptions({method, url})) as RequestArgs));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n * \n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n * \n * ### Example\n * \n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({ \n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n * \n * \n * ### Example\n * \n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n * \n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n * \n * ### Example\n * \n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class Http {\n/**\n * @param {?} _backend\n * @param {?} _defaultOptions\n */\nconstructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url)))));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n/**\n * Performs a request with `get` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n/**\n * Performs a request with `post` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n/**\n * Performs a request with `put` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n/**\n * Performs a request with `delete` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n/**\n * Performs a request with `patch` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n/**\n * Performs a request with `head` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n/**\n * Performs a request with `options` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Http_tsickle_Closure_declarations() {\n/** @type {?} */\nHttp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttp.ctorParameters;\n/** @type {?} */\nHttp.prototype._backend;\n/** @type {?} */\nHttp.prototype._defaultOptions;\n}\n\n/**\n * @deprecated use \\@angular/common/http instead\n */\nexport class Jsonp extends Http {\n/**\n * @param {?} backend\n * @param {?} defaultOptions\n */\nconstructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * \n * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n * supported by all current browsers. Because JSONP creates a `<script>` element with\n * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n * source could expose your application to XSS risks. Data exposed by JSONP may also be\n * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n * future security issues (e.g. content sniffing).  For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url))));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Jsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonp.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates `Request` instances from provided values.\n * \n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n * \n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n * \n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n * \n * \\@Injectable() \n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class Request extends Body {\n/**\n * Http method with which to perform the request.\n */\nmethod: RequestMethod;\n/**\n * {\\@link Headers} instance\n */\nheaders: Headers;\n/**\n * Url of the remote resource\n */\nurl: string;\n/**\n * Type of the request body *\n */\n\nprivate contentType: ContentType;\n/**\n * Enable use credentials\n */\nwithCredentials: boolean;\n/**\n * Buffer to store the response\n */\nresponseType: ResponseContentType;\n/**\n * @param {?} requestOptions\n */\nconstructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const /** @type {?} */ url = requestOptions.url;\n    this.url = /** @type {?} */(( requestOptions.url));\n    const /** @type {?} */ paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let /** @type {?} */ params: string;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let /** @type {?} */ prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName( /** @type {?} */((requestOptions.method)));\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = /** @type {?} */(( requestOptions.withCredentials));\n    this.responseType = /** @type {?} */(( requestOptions.responseType));\n  }\n/**\n * Returns the content type enum based on header options.\n * @return {?}\n */\ndetectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n/**\n * Returns the content type of request's body based on its type.\n * @return {?}\n */\ndetectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n/**\n * Returns the request's body according to its type. If body is undefined, return\n * null.\n * @return {?}\n */\ngetBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction Request_tsickle_Closure_declarations() {\n/**\n * Http method with which to perform the request.\n * @type {?}\n */\nRequest.prototype.method;\n/**\n * {\\@link Headers} instance\n * @type {?}\n */\nRequest.prototype.headers;\n/**\n * Url of the remote resource\n * @type {?}\n */\nRequest.prototype.url;\n/**\n * Type of the request body *\n * @type {?}\n */\nRequest.prototype.contentType;\n/**\n * Enable use credentials\n * @type {?}\n */\nRequest.prototype.withCredentials;\n/**\n * Buffer to store the response\n * @type {?}\n */\nRequest.prototype.responseType;\n}\n\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params: {[key: string]: any}): URLSearchParams {\n  const /** @type {?} */ searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const /** @type {?} */ value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nconst /** @type {?} */ noop = function() {};\nconst /** @type {?} */ w = typeof window == 'object' ? window : noop;\nconst /** @type {?} */ FormData = ( /** @type {?} */((w as any)) /** TODO #9100 */)['FormData'] || noop;\nconst /** @type {?} */ Blob = ( /** @type {?} */((w as any)) /** TODO #9100 */)['Blob'] || noop;\nexport const /** @type {?} */ ArrayBuffer: ArrayBufferConstructor =\n    ( /** @type {?} */((w as any)) /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n * \n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n * \n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class RequestOptions {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n */\nmethod: RequestMethod|string|null;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n */\nheaders: Headers|null;\n/**\n * Body to be used when creating a {\\@link Request}.\n */\nbody: any;\n/**\n * Url with which to perform a {\\@link Request}.\n */\nurl: string|null;\n/**\n * Search parameters to be included in a {\\@link Request}.\n */\nparams: URLSearchParams;\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @return {?}\n */\nget search(): URLSearchParams { return this.params; }\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @param {?} params\n * @return {?}\n */\nset search(params: URLSearchParams) { this.params = params; }\n/**\n * Enable use credentials for a {\\@link Request}.\n */\nwithCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n/**\n * @param {?=} opts\n */\nconstructor(opts: RequestOptionsArgs = {}) {\n    const {method, headers, body, url, search, params, withCredentials, responseType} = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n/**\n * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * Note that `headers` and `search` will override existing values completely if present in\n * the `options` object. If these values should be merged, it should be done prior to calling\n * `merge` on the `RequestOptions` instance.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post\n * });\n * const req = new Request(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n/**\n * @param {?=} params\n * @return {?}\n */\n\nprivate _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n/**\n * @param {?=} objParams\n * @return {?}\n */\n\nprivate _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const /** @type {?} */ params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const /** @type {?} */ value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} params\n * @return {?}\n */\n\nprivate _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\nfunction RequestOptions_tsickle_Closure_declarations() {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n * @type {?}\n */\nRequestOptions.prototype.method;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.headers;\n/**\n * Body to be used when creating a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.body;\n/**\n * Url with which to perform a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.url;\n/**\n * Search parameters to be included in a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.params;\n/**\n * Enable use credentials for a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.withCredentials;\n/** @type {?} */\nRequestOptions.prototype.responseType;\n}\n\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n * \n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n * \n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n * \n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n * \n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n * \n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class BaseRequestOptions extends RequestOptions {\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseRequestOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseRequestOptions.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {ɵgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n * \n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n */\nresponse: Observable<Response>;\n  readyState: ReadyState;\n/**\n * @param {?} req\n * @param {?} browserXHR\n * @param {?=} baseResponseOptions\n */\nconstructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const /** @type {?} */ _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const /** @type {?} */ onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let /** @type {?} */ status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let /** @type {?} */ body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const /** @type {?} */ headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const /** @type {?} */ url = getResponseURL(_xhr) || req.url;\n        const /** @type {?} */ statusText: string = _xhr.statusText || 'OK';\n\n        let /** @type {?} */ responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const /** @type {?} */ response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const /** @type {?} */ onError = (err: ErrorEvent) => {\n        let /** @type {?} */ responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader( /** @type {?} */((name)), values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} req\n * @param {?} _xhr\n * @return {?}\n */\nsetDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */ blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\nfunction XHRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRConnection.prototype.request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n * @type {?}\n */\nXHRConnection.prototype.response;\n/** @type {?} */\nXHRConnection.prototype.readyState;\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n * \n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n/**\n * @param {?=} _cookieName\n * @param {?=} _headerName\n */\nconstructor(\nprivate _cookieName: string = 'XSRF-TOKEN',\nprivate _headerName: string = 'X-XSRF-TOKEN') {}\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {\n    const /** @type {?} */ xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCookieXSRFStrategy.prototype._cookieName;\n/** @type {?} */\nCookieXSRFStrategy.prototype._headerName;\n}\n\n/**\n * Creates {\\@link XHRConnection} instances.\n * \n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n * \n * ### Example\n * \n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({ \n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nexport class XHRBackend implements ConnectionBackend {\n/**\n * @param {?} _browserXHR\n * @param {?} _baseResponseOptions\n * @param {?} _xsrfStrategy\n */\nconstructor(\nprivate _browserXHR: BrowserXhr,\nprivate _baseResponseOptions: ResponseOptions,\nprivate _xsrfStrategy: XSRFStrategy) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\nfunction XHRBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackend.ctorParameters;\n/** @type {?} */\nXHRBackend.prototype._browserXHR;\n/** @type {?} */\nXHRBackend.prototype._baseResponseOptions;\n/** @type {?} */\nXHRBackend.prototype._xsrfStrategy;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n * \n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nexport abstract class JSONPConnection implements Connection {\n/**\n * The {\\@link ReadyState} of this request.\n */\nreadyState: ReadyState;\n/**\n * The outgoing HTTP request.\n */\nrequest: Request;\n/**\n * An observable that completes with the response, when the request is finished.\n */\nresponse: Observable<Response>;\n\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   */\n  abstract finished(data?: any): void;\n}\n\nfunction JSONPConnection_tsickle_Closure_declarations() {\n/**\n * The {\\@link ReadyState} of this request.\n * @type {?}\n */\nJSONPConnection.prototype.readyState;\n/**\n * The outgoing HTTP request.\n * @type {?}\n */\nJSONPConnection.prototype.request;\n/**\n * An observable that completes with the response, when the request is finished.\n * @type {?}\n */\nJSONPConnection.prototype.response;\n\n/**\n * Callback called when the JSONP request completes, to notify the application\n * of the new data.\n * @abstract\n * @param {?=} data\n * @return {?}\n */\nJSONPConnection.prototype.finished = function(data) {};\n}\n\nexport class JSONPConnection_ extends JSONPConnection {\nprivate _id: string;\nprivate _script: Element;\nprivate _responseData: any;\nprivate _finished: boolean = false;\n/**\n * @param {?} req\n * @param {?} _dom\n * @param {?=} baseResponseOptions\n */\nconstructor(\n      req: Request,\nprivate _dom: BrowserJsonp,\nprivate baseResponseOptions?: ResponseOptions) {\n    super();\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const /** @type {?} */ id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const /** @type {?} */ callback = _dom.requestCallback(this._id);\n      let /** @type {?} */ url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const /** @type {?} */ script = this._script = _dom.build(url);\n\n      const /** @type {?} */ onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let /** @type {?} */ responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let /** @type {?} */ responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const /** @type {?} */ onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let /** @type {?} */ responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n/**\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\nfunction JSONPConnection__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPConnection_.prototype._id;\n/** @type {?} */\nJSONPConnection_.prototype._script;\n/** @type {?} */\nJSONPConnection_.prototype._responseData;\n/** @type {?} */\nJSONPConnection_.prototype._finished;\n/** @type {?} */\nJSONPConnection_.prototype._dom;\n/** @type {?} */\nJSONPConnection_.prototype.baseResponseOptions;\n}\n\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n * \n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nexport abstract class JSONPBackend extends ConnectionBackend {}\nexport class JSONPBackend_ extends JSONPBackend {\n/**\n * @param {?} _browserJSONP\n * @param {?} _baseResponseOptions\n */\nconstructor(private _browserJSONP: BrowserJsonp,\nprivate _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): JSONPConnection {\n    return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n{type: BrowserJsonp, },\n{type: ResponseOptions, },\n];\n}\n\nfunction JSONPBackend__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPBackend_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSONPBackend_.ctorParameters;\n/** @type {?} */\nJSONPBackend_.prototype._browserJSONP;\n/** @type {?} */\nJSONPBackend_.prototype._baseResponseOptions;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nlet /** @type {?} */ _nextRequestId = 0;\nexport const /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\nlet /** @type {?} */ _jsonpConnections: {[key: string]: any}|null = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const /** @type {?} */ w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\nexport class BrowserJsonp {\n/**\n * @param {?} url\n * @return {?}\n */\nbuild(url: string): any {\n    const /** @type {?} */ node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n/**\n * @return {?}\n */\nnextRequestID(): string { return `__req${_nextRequestId++}`; }\n/**\n * @param {?} id\n * @return {?}\n */\nrequestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n/**\n * @param {?} id\n * @param {?} connection\n * @return {?}\n */\nexposeConnection(id: string, connection: any) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nremoveConnection(id: string) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nsend(node: any) { document.body.appendChild( /** @type {?} */((<Node>(node)))); }\n/**\n * @param {?} node\n * @return {?}\n */\ncleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild( /** @type {?} */((<Node>(node))));\n    }\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction BrowserJsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserJsonp.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n/**\n * Creates `Response` instances from provided values.\n * \n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n * \n * ### Example\n * \n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n * \n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class Response extends Body {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n */\ntype: ResponseType;\n/**\n * True if the response's status is within 200-299\n */\nok: boolean;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n */\nurl: string;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n */\nstatus: number;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n */\nstatusText: string|null;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n */\nbytesLoaded: number;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n */\ntotalBytes: number;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n */\nheaders: Headers|null;\n/**\n * @param {?} responseOptions\n */\nconstructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = /** @type {?} */(( responseOptions.status));\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = /** @type {?} */(( responseOptions.type));\n    this.url = /** @type {?} */(( responseOptions.url));\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n\nfunction Response_tsickle_Closure_declarations() {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n * @type {?}\n */\nResponse.prototype.type;\n/**\n * True if the response's status is within 200-299\n * @type {?}\n */\nResponse.prototype.ok;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n * @type {?}\n */\nResponse.prototype.url;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n * @type {?}\n */\nResponse.prototype.status;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n * @type {?}\n */\nResponse.prototype.statusText;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n * @type {?}\n */\nResponse.prototype.bytesLoaded;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n * @type {?}\n */\nResponse.prototype.totalBytes;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n * @type {?}\n */\nResponse.prototype.headers;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nexport abstract class Body {\n/**\n * \\@internal\n */\nprotected _body: any;\n/**\n * Attempts to return body as parsed `JSON` object, or raises an exception.\n * @return {?}\n */\njson(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse( /** @type {?} */((<string>this._body)));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n/**\n * Returns the body as a string, presuming `toString()` can be called on the response body.\n * \n * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n * bytes in the buffer will be interpreted. Valid values are:\n * \n * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n *   into consideration. This is the default behavior to avoid breaking apps, but should be\n *   considered deprecated.\n * \n * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n * @param {?=} encodingHint\n * @return {?}\n */\ntext(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array( /** @type {?} */((this._body as ArrayBuffer))));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array( /** @type {?} */((this._body as ArrayBuffer))));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n/**\n * Return the body as an ArrayBuffer\n * @return {?}\n */\narrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return /** @type {?} */(( <ArrayBuffer>this._body));\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n/**\n * Returns the request's body as a Blob, assuming that body exists.\n * @return {?}\n */\nblob(): Blob {\n    if (this._body instanceof Blob) {\n      return /** @type {?} */(( <Blob>this._body));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n\nfunction Body_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nBody.prototype._body;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const /** @type {?} */ map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const /** @type {?} */ params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const /** @type {?} */ eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const /** @type {?} */ list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * @deprecated use \\@angular/common/http instead\n * \n */\nexport class QueryEncoder {\n/**\n * @param {?} k\n * @return {?}\n */\nencodeKey(k: string): string { return standardEncoding(k); }\n/**\n * @param {?} v\n * @return {?}\n */\nencodeValue(v: string): string { return standardEncoding(v); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n * \n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n * \n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n * \n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n * \n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n * \n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n * \n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n/**\n * @param {?=} rawParams\n * @param {?=} queryEncoder\n */\nconstructor(\npublic rawParams: string = '',\nprivate queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n/**\n * @return {?}\n */\nclone(): URLSearchParams {\n    const /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\nhas(param: string): boolean { return this.paramsMap.has(param); }\n/**\n * @param {?} param\n * @return {?}\n */\nget(param: string): string|null {\n    const /** @type {?} */ storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ngetAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nset(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nsetAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nappend(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nappendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nreplaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ndelete (param: string): void { this.paramsMap.delete(param); }\n}\n\nfunction URLSearchParams_tsickle_Closure_declarations() {\n/** @type {?} */\nURLSearchParams.prototype.paramsMap;\n/** @type {?} */\nURLSearchParams.prototype.rawParams;\n/** @type {?} */\nURLSearchParams.prototype.queryEncoder;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RequestMethod} from './enums';\n/**\n * @param {?} method\n * @return {?}\n */\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const /** @type {?} */ isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint8Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint16Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Abstract class from which real backends are derived.\n * \n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n * \n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nexport abstract class ConnectionBackend { abstract createConnection(request: any): Connection; }\n\nfunction ConnectionBackend_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} request\n * @return {?}\n */\nConnectionBackend.prototype.createConnection = function(request) {};\n}\n\n/**\n * Abstract class from which real connections are derived.\n * \n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nexport abstract class Connection {\n  readyState: ReadyState;\n  request: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\nfunction Connection_tsickle_Closure_declarations() {\n/** @type {?} */\nConnection.prototype.readyState;\n/** @type {?} */\nConnection.prototype.request;\n/** @type {?} */\nConnection.prototype.response;\n}\n\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n * \n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nexport abstract class XSRFStrategy { abstract configureRequest(req: Request): void; }\n\nfunction XSRFStrategy_tsickle_Closure_declarations() {\n\n/**\n * @abstract\n * @param {?} req\n * @return {?}\n */\nXSRFStrategy.prototype.configureRequest = function(req) {};\n}\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n * \n * @deprecated use \\@angular/common/http instead\n * @record\n */\nexport function RequestOptionsArgs() {}\n\n\nfunction RequestOptionsArgs_tsickle_Closure_declarations() {\n/** @type {?|undefined} */\nRequestOptionsArgs.prototype.url;\n/** @type {?|undefined} */\nRequestOptionsArgs.prototype.method;\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @type {?|undefined}\n */\nRequestOptionsArgs.prototype.search;\n/** @type {?|undefined} */\nRequestOptionsArgs.prototype.params;\n/** @type {?|undefined} */\nRequestOptionsArgs.prototype.headers;\n/** @type {?|undefined} */\nRequestOptionsArgs.prototype.body;\n/** @type {?|undefined} */\nRequestOptionsArgs.prototype.withCredentials;\n/** @type {?|undefined} */\nRequestOptionsArgs.prototype.responseType;\n}\n\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated use @angular/common/http instead\n */\nexport interface RequestOptionsArgs {\n  url?: string|null;\n  method?: string|RequestMethod|null;\n  /** @deprecated from 4.0.0. Use params instead. */\n  search?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  params?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  headers?: Headers|null;\n  body?: any;\n  withCredentials?: boolean|null;\n  responseType?: ResponseContentType|null;\n}\n/**\n * Required structure when constructing new Request();\n * @record\n */\nexport function RequestArgs() {}\n\n\nfunction RequestArgs_tsickle_Closure_declarations() {\n/** @type {?} */\nRequestArgs.prototype.url;\n}\n\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string|null; }\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n * \n * @deprecated use \\@angular/common/http instead\n * @record\n */\nexport function ResponseOptionsArgs() {}\n\n\nfunction ResponseOptionsArgs_tsickle_Closure_declarations() {\n/** @type {?|undefined} */\nResponseOptionsArgs.prototype.body;\n/** @type {?|undefined} */\nResponseOptionsArgs.prototype.status;\n/** @type {?|undefined} */\nResponseOptionsArgs.prototype.statusText;\n/** @type {?|undefined} */\nResponseOptionsArgs.prototype.headers;\n/** @type {?|undefined} */\nResponseOptionsArgs.prototype.type;\n/** @type {?|undefined} */\nResponseOptionsArgs.prototype.url;\n}\n\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated use @angular/common/http instead\n */\nexport interface ResponseOptionsArgs {\n  body?: string|Object|FormData|ArrayBuffer|Blob|null;\n  status?: number|null;\n  statusText?: string|null;\n  headers?: Headers|null;\n  type?: ResponseType|null;\n  url?: string|null;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n * \n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n * \n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n * \n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n * \n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n * \n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class ResponseOptions {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n */\nbody: string|Object|ArrayBuffer|Blob|null;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n */\nstatus: number|null;\n/**\n * Response {\\@link Headers headers}\n */\nheaders: Headers|null;\n/**\n * \\@internal\n */\nstatusText: string|null;\n/**\n * \\@internal\n */\ntype: ResponseType|null;\n  url: string|null;\n/**\n * @param {?=} opts\n */\nconstructor(opts: ResponseOptionsArgs = {}) {\n    const {body, status, headers, statusText, type, url} = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n/**\n * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n * override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * This may be useful when sharing a base `ResponseOptions` object inside tests,\n * where certain properties may change from test to test.\n * \n * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: {name: 'Jeff'}\n * });\n * var res = new Response(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('options.url:', options.url); // null\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * console.log('res.url:', res.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\nfunction ResponseOptions_tsickle_Closure_declarations() {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n * @type {?}\n */\nResponseOptions.prototype.body;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n * @type {?}\n */\nResponseOptions.prototype.status;\n/**\n * Response {\\@link Headers headers}\n * @type {?}\n */\nResponseOptions.prototype.headers;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.statusText;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.type;\n/** @type {?} */\nResponseOptions.prototype.url;\n}\n\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n * \n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n * \n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class BaseResponseOptions extends ResponseOptions {\nconstructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction BaseResponseOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseResponseOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseResponseOptions.ctorParameters;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n * \n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n * \n * ### Example\n * \n * ```\n * import {Headers} from '\\@angular/http';\n * \n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n * \n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n * \n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class Headers {\n/**\n * \\@internal header names are lower case\n */\n_headers: Map<string, string[]> = new Map();\n/**\n * \\@internal map lower case names to actual names\n */\n_normalizedNames: Map<string, string> = new Map();\n/**\n * @param {?=} headers\n */\nconstructor(headers?: Headers|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const /** @type {?} */ values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n/**\n * Returns a new Headers instance from the given DOMString of Response Headers\n * @param {?} headersString\n * @return {?}\n */\nstatic fromResponseHeaderString(headersString: string): Headers {\n    const /** @type {?} */ headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const /** @type {?} */ index = line.indexOf(':');\n      if (index > 0) {\n        const /** @type {?} */ name = line.slice(0, index);\n        const /** @type {?} */ value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n/**\n * Appends a header to existing list of header values for a given header name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nappend(name: string, value: string): void {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n/**\n * Deletes all header values for the given name.\n * @param {?} name\n * @return {?}\n */\ndelete (name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (values: string[], name: string|undefined, headers: Map<string, string[]>) => void):\n      void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n/**\n * Returns first header that matches given name.\n * @param {?} name\n * @return {?}\n */\nget(name: string): string|null {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n/**\n * Checks for existence of header by given name.\n * @param {?} name\n * @return {?}\n */\nhas(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n/**\n * Returns the names of the headers\n * @return {?}\n */\nkeys(): string[] { return Array.from(this._normalizedNames.values()); }\n/**\n * Sets or overrides header value for given name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nset(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n/**\n * Returns values of all headers.\n * @return {?}\n */\nvalues(): string[][] { return Array.from(this._headers.values()); }\n/**\n * @return {?}\n */\ntoJSON(): {[name: string]: any} {\n    const /** @type {?} */ serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const /** @type {?} */ split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[ /** @type {?} */((this._normalizedNames.get(name)))] = split;\n    });\n\n    return serialized;\n  }\n/**\n * Returns list of header values for a given name.\n * @param {?} name\n * @return {?}\n */\ngetAll(name: string): string[]|null {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n/**\n * This method is not implemented.\n * @return {?}\n */\nentries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n/**\n * @param {?} name\n * @return {?}\n */\n\nprivate mayBeSetNormalizedName(name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n\nfunction Headers_tsickle_Closure_declarations() {\n/**\n * \\@internal header names are lower case\n * @type {?}\n */\nHeaders.prototype._headers;\n/**\n * \\@internal map lower case names to actual names\n * @type {?}\n */\nHeaders.prototype._normalizedNames;\n}\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport type RequestMethod = number;\nexport let RequestMethod: any = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n\nexport type ReadyState = number;\nexport let ReadyState: any = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n\nexport type ResponseType = number;\nexport let ResponseType: any = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n\nexport type ContentType = number;\nexport let ContentType: any = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n\nexport type ResponseContentType = number;\nexport let ResponseContentType: any = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n * \n * Take care not to evaluate this in non-browser contexts.\n * \n * @deprecated use \\@angular/common/http instead\n */\nexport class BrowserXhr {\nconstructor() {}\n/**\n * @return {?}\n */\nbuild(): any { return /** @type {?} */(( <any>(new XMLHttpRequest()))); }\nstatic decorators: {type: Function, args?: any[]}[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: {type: Function, args?: any[]}[]}|null)[] = () => [\n];\n}\n\nfunction BrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserXhr.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserXhr.ctorParameters;\n}\n\n"],"names":["ArrayBuffer","Blob","getDOM"],"mappings":"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"}