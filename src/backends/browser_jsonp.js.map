{"version":3,"sources":["../../../../../modules/@angular/http/src/backends/browser_jsonp.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,UAAE,EAAU,MAAA,eAAA,CAAA;AAEnB,IAAI,gBAAe,CAAf,cAAA,GAAiB,CAAA,CAAE;AACvB,MAAM,CAAC,IAAA,gBAAA,CAAM,UAAA,GAAa,cAAA,CAAe;AACzC,IAAI,gBAAA,CAAA,iBAAA,GAA0C,IAAA,CAAK;AACnD;;GAEG;AACH;IACE,IAAM,gBAAgB,CAFhB,CAAA,GAA0B,OAAO,MAAA,IAAU,QAAA,GAAW,MAAA,GAAS,EAAA,CAAG;IAGxE,EAAE,CAAA,CAAA,iBAFG,KAAqB,IAAA,CAAK,CAAC,CAAA;QAG9B,iBAAK,GAFe,CAAA,CAAE,UAAC,CAAU,GAAG,EAAA,CAAG;IAGzC,CAAC;IACD,MAAM,CAFC,iBAAA,CAAkB;AAG3B,CAAC;AACD;IAAA;IAwDA,CAAC;IAvDD;;;OAGG;IACH,4BAFG,GAEH,UAFG,GAAA;QAGC,IAAM,gBAAgB,CAFhB,IAAA,GAAO,QAAA,CAAS,aAAC,CAAa,QAAC,CAAQ,CAAC;QAG9C,IAAI,CAFC,GAAC,GAAK,GAAA,CAAI;QAGf,MAAM,CAFC,IAAA,CAAK;IAGd,CAAC;IACH;;OAEG;IACH,oCAJG,GAIH,cAJ4B,MAAA,CAAO,UAAA,cAAS,EAAgB,CAAE,CAAC,CAAA;IAK/D;;;OAGG;IACH,sCAPG,GAOH,UAPG,EAAA,IAAqC,MAAA,CAAO,UAAI,SAAU,EAAI,cAAE,CAAW,CAAC,CAAA;IAQ/E;;;;OAIG;IACH,uCAXG,GAWH,UAXG,EAAA,EAAA,UAAA;QAYC,IAAM,gBAAgB,CAXhB,WAAA,GAAc,oBAAA,EAAqB,CAAE;QAY3C,WAAW,CAXC,EAAC,CAAE,GAAG,UAAA,CAAW;IAY/B,CAAC;IACH;;;OAGG;IACH,uCAdG,GAcH,UAdG,EAAA;QAeC,IAAM,gBAAgB,CAdhB,WAAA,GAAc,oBAAA,EAAqB,CAAE;QAe3C,WAAW,CAdC,EAAC,CAAE,GAAG,IAAA,CAAK;IAezB,CAAC;IACH;;;OAGG;IACH,2BAhBG,GAgBH,UAhBG,IAAA,IAAiB,QAAA,CAAS,IAAC,CAAI,WAAC,CAAW,gBAAA,CAAA,CAAM,CAAC,IAAC,CAAI,CAAA,CAAC,CAAC,CAAC,CAAA;IAiB7D;;;OAGG;IACH,8BAlBG,GAkBH,UAlBG,IAAA;QAmBC,EAAE,CAAC,CAAC,IAlBC,CAAI,UAAC,CAAU,CAAC,CAAA;YAmBnB,IAAI,CAlBC,UAAC,CAAU,WAAC,CAAW,gBAAA,CAAA,CAAM,CAAC,IAAC,CAAI,CAAA,CAAC,CAAC;QAmB5C,CAAC;IACH,CAAC;IAOH,mBAAC;AAAD,CAxDA,AAwDC;;AAxBM,uBAAA,GAAoC;IAmB3C,EAlBE,IAAA,EAAM,UAAA,EAAW;CAmBlB,CAlBC;AAmBF,kBAAkB;AAjBX,2BAAA,GAAiF,cAAM,OAAA,EAmB7F,EAnB6F,CAmB7F,CAlBC;AAqBF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;AAC5B,CAAC","file":"browser_jsonp.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nlet /** @type {?} */ _nextRequestId = 0;\nexport const /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\nlet /** @type {?} */ _jsonpConnections: {[key: string]: any} = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const /** @type {?} */ w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\nexport class BrowserJsonp {\n/**\n * @param {?} url\n * @return {?}\n */\nbuild(url: string): any {\n    const /** @type {?} */ node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n/**\n * @return {?}\n */\nnextRequestID(): string { return `__req${_nextRequestId++}`; }\n/**\n * @param {?} id\n * @return {?}\n */\nrequestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n/**\n * @param {?} id\n * @param {?} connection\n * @return {?}\n */\nexposeConnection(id: string, connection: any) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nremoveConnection(id: string) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nsend(node: any) { document.body.appendChild( /** @type {?} */((<Node>(node)))); }\n/**\n * @param {?} node\n * @return {?}\n */\ncleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild( /** @type {?} */((<Node>(node))));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserJsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}