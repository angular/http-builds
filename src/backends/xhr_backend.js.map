{"version":3,"sources":["../../../../../modules/@angular/http/src/backends/xhr_backend.ts"],"names":[],"mappings":"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","file":"xhr_backend.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {__platform_browser_private__} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n * \n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n * \n * \\@experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  readyState: ReadyState;\n/**\n * @param {?} req\n * @param {?} browserXHR\n * @param {?=} baseResponseOptions\n */\nconstructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} req\n * @param {?} _xhr\n * @return {?}\n */\nsetDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */ blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\nfunction XHRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRConnection.prototype.request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n * @type {?}\n */\nXHRConnection.prototype.response;\n/** @type {?} */\nXHRConnection.prototype.readyState;\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n * \n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n * \n * \\@experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n/**\n * @param {?=} _cookieName\n * @param {?=} _headerName\n */\nconstructor(\nprivate _cookieName: string = 'XSRF-TOKEN',\nprivate _headerName: string = 'X-XSRF-TOKEN') {}\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {\n    const /** @type {?} */ xsrfToken = __platform_browser_private__.getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCookieXSRFStrategy.prototype._cookieName;\n/** @type {?} */\nCookieXSRFStrategy.prototype._headerName;\n}\n\n/**\n * Creates {\\@link XHRConnection} instances.\n * \n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n * \n * ### Example\n * \n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({ \n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nexport class XHRBackend implements ConnectionBackend {\n/**\n * @param {?} _browserXHR\n * @param {?} _baseResponseOptions\n * @param {?} _xsrfStrategy\n */\nconstructor(\nprivate _browserXHR: BrowserXhr,\nprivate _baseResponseOptions: ResponseOptions,\nprivate _xsrfStrategy: XSRFStrategy) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\nfunction XHRBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackend.ctorParameters;\n/** @type {?} */\nXHRBackend.prototype._browserXHR;\n/** @type {?} */\nXHRBackend.prototype._baseResponseOptions;\n/** @type {?} */\nXHRBackend.prototype._xsrfStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}