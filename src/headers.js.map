{"version":3,"sources":["../../../../modules/@angular/http/src/headers.ts"],"names":[],"mappings":"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","file":"headers.js","sourceRoot":"","sourcesContent":["\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n * \n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n * \n * ### Example\n * \n * ```\n * import {Headers} from '\\@angular/http';\n * \n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n * \n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n * \n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n * \n * \\@experimental\n */\nexport class Headers {\n  /** @internal header names are lower case */\n  _headers: Map<string, string[]> = new Map();\n  /** @internal map lower case names to actual names */\n  _normalizedNames: Map<string, string> = new Map();\n/**\n * @param {?=} headers\n */\nconstructor(headers?: Headers|{[name: string]: any}) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n/**\n * Returns a new Headers instance from the given DOMString of Response Headers\n * @param {?} headersString\n * @return {?}\n */\nstatic fromResponseHeaderString(headersString: string): Headers {\n    const /** @type {?} */ headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const /** @type {?} */ index = line.indexOf(':');\n      if (index > 0) {\n        const /** @type {?} */ name = line.slice(0, index);\n        const /** @type {?} */ value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n/**\n * Appends a header to existing list of header values for a given header name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nappend(name: string, value: string): void {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n/**\n * Deletes all header values for the given name.\n * @param {?} name\n * @return {?}\n */\ndelete (name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (values: string[], name: string, headers: Map<string, string[]>) => void): void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n/**\n * Returns first header that matches given name.\n * @param {?} name\n * @return {?}\n */\nget(name: string): string {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n/**\n * Checks for existence of header by given name.\n * @param {?} name\n * @return {?}\n */\nhas(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n/**\n * Returns the names of the headers\n * @return {?}\n */\nkeys(): string[] { return Array.from(this._normalizedNames.values()); }\n/**\n * Sets or overrides header value for given name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nset(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n/**\n * Returns values of all headers.\n * @return {?}\n */\nvalues(): string[][] { return Array.from(this._headers.values()); }\n/**\n * @return {?}\n */\ntoJSON(): {[name: string]: any} {\n    const /** @type {?} */ serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const /** @type {?} */ split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[this._normalizedNames.get(name)] = split;\n    });\n\n    return serialized;\n  }\n/**\n * Returns list of header values for a given name.\n * @param {?} name\n * @return {?}\n */\ngetAll(name: string): string[] {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) : null;\n  }\n/**\n * This method is not implemented.\n * @return {?}\n */\nentries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate mayBeSetNormalizedName(name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n\nfunction Headers_tsickle_Closure_declarations() {\n/**\n * \\@internal header names are lower case\n * @type {?}\n */\nHeaders.prototype._headers;\n/**\n * \\@internal map lower case names to actual names\n * @type {?}\n */\nHeaders.prototype._normalizedNames;\n}\n\n"]}