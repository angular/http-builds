{"version":3,"sources":["../../../../modules/@angular/http/src/http_utils.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,aAAE,EAAa,MAAA,SAAA,CAAA;AACtB;;;GAGG;AACH,MAHC,8BAAA,MAAA;IAIC,EAAE,CAAC,CAAC,OAHO,MAAA,KAAW,QAAA,CAAS;QAAC,MAAA,CAAO,MAAA,CAAO;IAK9C,MAAM,CAAC,CAAC,MAHC,CAAM,WAAC,EAAW,CAAE,CAAC,CAAA;QAI5B,KAHK,KAAA;YAIH,MAAM,CAHC,aAAA,CAAc,GAAC,CAAG;QAI3B,KAHK,MAAA;YAIH,MAAM,CAHC,aAAA,CAAc,IAAC,CAAI;QAI5B,KAHK,KAAA;YAIH,MAAM,CAHC,aAAA,CAAc,GAAC,CAAG;QAI3B,KAHK,QAAA;YAIH,MAAM,CAHC,aAAA,CAAc,MAAC,CAAM;QAI9B,KAHK,SAAA;YAIH,MAAM,CAHC,aAAA,CAAc,OAAC,CAAO;QAI/B,KAHK,MAAA;YAIH,MAAM,CAHC,aAAA,CAAc,IAAC,CAAI;QAI5B,KAHK,OAAA;YAIH,MAAM,CAHC,aAAA,CAAc,KAAC,CAAK;IAI/B,CAAC;IACD,MAHM,IAAI,KAAA,CAAM,0CAAC,MAAuC,yBAAM,CAAqB,CAAC;AAItF,CAAC;AAED,MAAM,CAHC,IAAA,gBAAA,CAAM,SAAA,GAAY,UAAA,MAAS,IAAoB,OAAA,CAAA,MAAE,IAAS,GAAA,IAAO,MAAA,GAAS,GAAA,CAAI,EAA/B,CAA+B,CAAC;AAItF;;;GAGG;AACH,MANC,yBAAA,GAAA;IAOC,EAAE,CAAC,CAAC,aANC,IAAgB,GAAA,CAAI,CAAC,CAAA;QAOxB,MAAM,CANC,GAAA,CAAI,WAAC,CAAW;IAOzB,CAAC;IACD,EAAE,CAAC,CAAC,kBANC,CAAkB,IAAC,CAAI,GAAC,CAAG,qBAAC,EAAqB,CAAE,CAAC,CAAC,CAAA;QAOxD,MAAM,CANC,GAAA,CAAI,iBAAC,CAAiB,eAAC,CAAe,CAAC;IAOhD,CAAC;IACD,MAAM,CAAC;AACT,CAAC;AACD;;;GAGG;AACH,MATC,8BAAA,KAAA;IAUC,IAAM,gBAAgB,CAThB,IAAA,GAAO,IAAI,WAAA,CAAY,KAAC,CAAK,MAAC,CAAM,CAAC;IAU3C,GAAG,CAAC,CAAC,IATC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAE,gBAAA,CAAC,MAAA,GAAS,KAAA,CAAM,MAAC,EAAO,CAAA,GAAI,MAAA,EAAQ,CAAA,EAAE,EAAG,CAAA;QAUtD,IAAI,CATC,CAAC,CAAC,GAAG,KAAA,CAAM,UAAC,CAAU,CAAC,CAAC,CAAC;IAUhC,CAAC;IACD,MAAM,CATC,IAAA,CAAK,MAAC,CAAM;AAUrB,CAAC","file":"http_utils.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RequestMethod} from './enums';\n/**\n * @param {?} method\n * @return {?}\n */\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const /** @type {?} */ isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nexport function getResponseURL(xhr: any): string {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint16Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n"]}