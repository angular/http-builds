{"version":3,"sources":["../../../../modules/@angular/http/src/static_request.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;AAEH,OAAO,EAAA,IAAE,EAAI,MAAA,QAAA,CAAA;AACb,OAAO,EAAA,WAAE,EAA+C,MAAA,SAAA,CAAA;AACxD,OAAO,EAAA,OAAE,EAAO,MAAA,WAAA,CAAA;AAChB,OAAO,EAAA,mBAAE,EAAmB,MAAA,cAAA,CAAA;AAE5B,OAAO,EAAA,eAAE,EAAe,MAAA,qBAAA,CAAA;AACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCG;AACH;IAGC,2BAAA;IAaD;;OAEG;IACH,iBACG,cAA2B;QAD9B,YACI,iBAAO,SAuBR;QAtBC,mCAAmC;QACnC,IAAM,GAAG,GAAG,cAAc,CAAC,GAAG,CAAC;QAC/B,KAAI,CAAC,GAAG,GAAG,cAAc,CAAC,GAAG,CAAC;QAC9B,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1B,IAAM,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;YAChD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,IAAI,MAAM,GAAG,GAAG,CAAC;gBACjB,EAAE,CAAC,CAAC,KAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;oBAChC,MAAM,GAAG,CAAC,KAAI,CAAC,GAAG,CAAC,KAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC;gBAC7D,CAAC;gBACD,wDAAwD;gBACxD,KAAI,CAAC,GAAG,GAAG,GAAG,GAAG,MAAM,GAAG,MAAM,CAAC;YACnC,CAAC;QACH,CAAC;QACD,KAAI,CAAC,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC;QACjC,KAAI,CAAC,MAAM,GAAG,mBAAmB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACzD,uCAAuC;QACvC,8CAA8C;QAC9C,KAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACnD,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,iBAAiB,EAAE,CAAC;QAC5C,KAAI,CAAC,eAAe,GAAG,cAAc,CAAC,eAAe,CAAC;QACtD,KAAI,CAAC,YAAY,GAAG,cAAc,CAAC,YAAY,CAAC;;IAClD,CAAC;IACH;;;OAGG;IACH,mCACG,GADH;QACI,MAAM,CAAC,CAAC,IACC,CAAI,OAAC,CAAO,GAAC,CAAG,cAAC,CAAc,CAAC,CAAC,CAAA;YAAxC,KACK,kBAAA;gBAAH,MAAM,CACC,WAAA,CAAY,IAAC,CAAI;YAA1B,KACK,mCAAA;gBAAH,MAAM,CACC,WAAA,CAAY,IAAC,CAAI;YAA1B,KACK,qBAAA;gBAAH,MAAM,CACC,WAAA,CAAY,SAAC,CAAS;YAA/B,KACK,YAAA,CAAa;YAAlB,KACK,WAAA;gBAAH,MAAM,CACC,WAAA,CAAY,IAAC,CAAI;YAA1B,KACK,0BAAA;gBAAH,MAAM,CACC,IAAA,CAAK,KAAC,YAAgB,WAAA,GAAc,WAAA,CAAY,YAAC,GAAc,WAAA,CAAY,IAAC,CAAI;YAAzF;gBACE,MAAM,CACC,IAAA,CAAK,yBAAC,EAAyB,CAAE;QAA5C,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,2CACG,GADH;QACI,EAAE,CAAC,CAAC,IACC,CAAI,KAAC,IAAQ,IAAA,CAAK,CAAC,CAAA;YAAtB,MAAM,CACC,WAAA,CAAY,IAAC,CAAI;QAA1B,CAAC;QACC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,YAAgB,eAAA,CAAgB,CAAC,CAAA;YAAhD,MAAM,CACC,WAAA,CAAY,IAAC,CAAI;QAA1B,CAAC;QACC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,YAAgB,QAAA,CAAS,CAAC,CAAA;YAAzC,MAAM,CACC,WAAA,CAAY,SAAC,CAAS;QAA/B,CAAC;QACC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,YAAgB,IAAA,CAAK,CAAC,CAAA;YAArC,MAAM,CACC,WAAA,CAAY,IAAC,CAAI;QAA1B,CAAC;QACC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,YAAgB,WAAA,CAAY,CAAC,CAAA;YAA5C,MAAM,CACC,WAAA,CAAY,YAAC,CAAY;QAAlC,CAAC;QACC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,IAAQ,OAAO,IAAA,CAAK,KAAC,KAAS,QAAA,CAAS,CAAC,CAAA;YAAvD,MAAM,CACC,WAAA,CAAY,IAAC,CAAI;QAA1B,CAAC;QACC,IAAA,CAAK,CAAA;YAAL,MAAM,CACC,WAAA,CAAY,IAAC,CAAI;QAA1B,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,yBACG,GADH;QACI,MAAM,CAAC,CAAC,IACC,CAAI,WAAC,CAAW,CAAC,CAAA;YAAxB,KACK,WAAA,CAAY,IAAC;gBAAhB,MAAM,CACC,IAAA,CAAK,IAAC,EAAI,CAAE;YAArB,KACK,WAAA,CAAY,IAAC;gBAAhB,MAAM,CACC,IAAA,CAAK,IAAC,EAAI,CAAE;YAArB,KACK,WAAA,CAAY,SAAC;gBAAhB,MAAM,CACC,IAAA,CAAK,KAAC,CAAK;YAApB,KACK,WAAA,CAAY,IAAC;gBAAhB,MAAM,CACC,IAAA,CAAK,IAAC,EAAI,CAAE;YAArB,KACK,WAAA,CAAY,IAAC;gBAAhB,MAAM,CACC,IAAA,CAAK,IAAC,EAAI,CAAE;YAArB,KACK,WAAA,CAAY,YAAC;gBAAhB,MAAM,CACC,IAAA,CAAK,WAAC,EAAW,CAAE;YAA5B;gBACE,MAAM,CACC,IAAA,CAAK;QAAhB,CAAC;IACH,CAAC;IACH,cAAC;AAAD,CA7GA,AA6GC,CA1GA,IAAA,GA0GA;;AAED;IACA;;;OAGG;IACH,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC;IACzB;;;OAGG;IACH,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC;IAC1B;;;OAGG;IACH,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC;IACtB;;;OAGG;IACH,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC;IAC9B;;;OAGG;IACH,OAAO,CAAC,SAAS,CAAC,eAAe,CAAC;IAClC;;;OAGG;IACH,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC;AAC/B,CAAC;AAGD,IAAM,gBAAgB,CAjChB,IAAA,GAAO,cAAW,CAAA,CAAG;AAkC3B,IAAM,gBAAgB,CAjChB,CAAA,GAAI,OAAO,MAAA,IAAU,QAAA,GAAW,MAAA,GAAS,IAAA,CAAK;AAkCpD,IAAM,gBAAgB,CAjChB,QAAA,GAAW,CAAA,CAAA,CAAM,CAAA,CAAI,iBAAA,CAAA,CAAmB,UAAC,CAAU,IAAI,IAAA,CAAK;AAkClE,IAAM,gBAAgB,CAjChB,IAAA,GAAO,CAAA,CAAA,CAAM,CAAA,CAAI,iBAAA,CAAA,CAAmB,MAAC,CAAM,IAAI,IAAA,CAAK;AAkC1D,MAAM,CAjCC,IAAA,gBAAA,CAAM,WAAA,GAAc,CAAA,CAAA,CAAM,CAAA,CAAI,iBAAA,CAAA,CAAmB,aAAC,CAAa,IAAI,IAAA,CAAK","file":"static_request.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates `Request` instances from provided values.\n * \n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n * \n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n * \n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n * \n * \\@Injectable() \n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n * \n * \\@experimental\n */\nexport class Request extends Body {\n  /**\n   * Http method with which to perform the request.\n   */\n  method: RequestMethod;\n  /**\n   * {@link Headers} instance\n   */\n  headers: Headers;\n  /** Url of the remote resource */\n  url: string;\nprivate contentType: ContentType;\n  /** Enable use credentials */\n  withCredentials: boolean;\n  /** Buffer to store the response */\n  responseType: ResponseContentType;\n/**\n * @param {?} requestOptions\n */\nconstructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url;\n    if (requestOptions.params) {\n      const params = requestOptions.params.toString();\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials;\n    this.responseType = requestOptions.responseType;\n  }\n/**\n * Returns the content type enum based on header options.\n * @return {?}\n */\ndetectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n/**\n * Returns the content type of request's body based on its type.\n * @return {?}\n */\ndetectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n/**\n * Returns the request's body according to its type. If body is undefined, return\n * null.\n * @return {?}\n */\ngetBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction Request_tsickle_Closure_declarations() {\n/**\n * Http method with which to perform the request.\n * @type {?}\n */\nRequest.prototype.method;\n/**\n * {\\@link Headers} instance\n * @type {?}\n */\nRequest.prototype.headers;\n/**\n * Url of the remote resource\n * @type {?}\n */\nRequest.prototype.url;\n/**\n * Type of the request body *\n * @type {?}\n */\nRequest.prototype.contentType;\n/**\n * Enable use credentials\n * @type {?}\n */\nRequest.prototype.withCredentials;\n/**\n * Buffer to store the response\n * @type {?}\n */\nRequest.prototype.responseType;\n}\n\n\nconst /** @type {?} */ noop = function() {};\nconst /** @type {?} */ w = typeof window == 'object' ? window : noop;\nconst /** @type {?} */ FormData = ( /** @type {?} */((w as any)) /** TODO #9100 */)['FormData'] || noop;\nconst /** @type {?} */ Blob = ( /** @type {?} */((w as any)) /** TODO #9100 */)['Blob'] || noop;\nexport const /** @type {?} */ ArrayBuffer = ( /** @type {?} */((w as any)) /** TODO #9100 */)['ArrayBuffer'] || noop;\n"]}