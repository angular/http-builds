{"version":3,"sources":["../../../../modules/@angular/http/src/base_request_options.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;AAEH,OAAO,EAAA,UAAE,EAAU,MAAA,eAAA,CAAA;AAEnB,OAAO,EAAA,aAAE,EAAkC,MAAA,SAAA,CAAA;AAC3C,OAAO,EAAA,OAAE,EAAO,MAAA,WAAA,CAAA;AAChB,OAAO,EAAA,mBAAE,EAAmB,MAAA,cAAA,CAAA;AAE5B,OAAO,EAAA,eAAE,EAAe,MAAA,qBAAA,CAAA;AACxB;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH;IAyCA;;OAEG;IACH,wBACM,EADqC;YACrC,4BADqC,EACpC,kBAFC,EAAO,oBAAA,EAAS,cAAA,EAAM,YAAA,EAAK,kBAAA,EAAQ,kBAAA,EAAQ,oCAAA,EAG5C,8BAAY;QACf,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,GAAG,mBAAmB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;QAClE,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC;QAChD,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;QACvC,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;QACpC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC;QACxD,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,IAAI,GAAG,eAAe,GAAG,IAAI,CAAC;QACxE,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,IAAI,GAAG,YAAY,GAAG,IAAI,CAAC;IACjE,CAAC;IA5BH,sBACG,kCAAA;QALH;;;WAGG;aACH,cACkC,MAAA,CAAO,IAAA,CAAK,MAAC,CAAM,CAAC,CAAA;QAAtD;;;;WAIG;aACH,UADG,MAAA,IAAqC,IAAA,CAAK,MAAC,GAAQ,MAAA,CAAO,CAAC,CAAA;;;OAJR;IA4BtD;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACH,8BAHG,GAGH,UAHG,OAAA;QAIC,MAAM,CAHC,IAAI,cAAA,CAAe;YAIxB,MAAM,EAHE,OAAA,IAAW,OAAA,CAAQ,MAAC,IAAS,IAAA,GAAO,OAAA,CAAQ,MAAC,GAAQ,IAAA,CAAK,MAAC;YAInE,OAAO,EAHE,OAAA,IAAW,OAAA,CAAQ,OAAC,IAAU,IAAA,GAAO,OAAA,CAAQ,OAAC,GAAS,IAAI,OAAA,CAAQ,IAAC,CAAI,OAAC,CAAO;YAIzF,IAAI,EAHE,OAAA,IAAW,OAAA,CAAQ,IAAC,IAAO,IAAA,GAAO,OAAA,CAAQ,IAAC,GAAM,IAAA,CAAK,IAAC;YAI7D,GAAG,EAHE,OAAA,IAAW,OAAA,CAAQ,GAAC,IAAM,IAAA,GAAO,OAAA,CAAQ,GAAC,GAAK,IAAA,CAAK,GAAC;YAI1D,MAAM,EAHE,OAAA,IAAW,IAAA,CAAK,kBAAC,CAAkB,OAAC,CAAO,MAAC,IAAS,OAAA,CAAQ,MAAC,CAAM;YAI5E,eAAe,EAHE,OAAA,IAAW,OAAA,CAAQ,eAAC,IAAkB,IAAA,GAAO,OAAA,CAAQ,eAAC;gBAIT,IAAI,CAHC,eAAC;YAIpE,YAAY,EAHE,OAAA,IAAW,OAAA,CAAQ,YAAC,IAAe,IAAA,GAAO,OAAA,CAAQ,YAAC;gBAIT,IAAI,CAHC,YAAC;SAI/D,CAHC,CAAC;IAIL,CAAC;IACH;;;OAGG;IALA,2CAAA,GAMH,UANG,MAOsD;QACrD,EAAE,CAAC,CAAC,CANC,MAAC,CAAM;YAAC,MAAA,CAAO,IAAA,CAAK,MAAC,CAAM;QAQhC,EAAE,CAAC,CAAC,MANC,YAAiB,eAAA,CAAgB,CAAC,CAAA;YAOrC,MAAM,CANC,MAAA,CAAO,KAAC,EAAK,CAAE;QAOxB,CAAC;QAED,EAAE,CAAC,CAAC,OANO,MAAA,KAAW,QAAA,CAAS,CAAC,CAAA;YAO9B,MAAM,CANC,IAAI,eAAA,CAAgB,MAAC,CAAM,CAAC;QAOrC,CAAC;QAED,MAAM,CANC,IAAA,CAAK,YAAC,CAAY,MAAC,CAAM,CAAC;IAOnC,CAAC;IACH;;;OAGG;IARA,qCAAA,GASH,UATG,SAAA;QASH,iBAWG;QApBA,0BAAA,EAAA,cAAA;QAUC,IAAM,gBAAgB,CAThB,MAAA,GAAS,IAAI,eAAA,EAAgB,CAAE;QAUrC,MAAM,CATC,IAAC,CAAI,SAAC,CAAS,CAAC,OAAC,CAAO,UAAC,GAAK;YAUnC,IAAM,gBAAgB,CAThB,KAAA,GAAmB,SAAA,CAAU,GAAC,CAAG,CAAC;YAUxC,EAAE,CAAC,CAAC,KATC,CAAK,OAAC,CAAO,KAAC,CAAK,CAAC,CAAC,CAAA;gBAUxB,KAAK,CATC,OAAC,CAAO,UAAC,IAAM,IAAQ,OAAA,KAAA,CAAK,YAAC,CAAY,GAAC,EAAI,IAAA,EAAM,MAAA,CAAO,EAApC,CAAoC,CAAC,CAAC;YAUrE,CAAC;YATC,IAAA,CAAK,CAAA;gBAUL,KAAI,CATC,YAAC,CAAY,GAAC,EAAI,KAAA,EAAO,MAAA,CAAO,CAAC;YAUxC,CAAC;QACH,CAAC,CATC,CAAC;QAUH,MAAM,CATC,MAAA,CAAO;IAUhB,CAAC;IACH;;;;;OAKG;IAbA,qCAAA,GAcH,UAdG,GAAA,EAAA,KAAA,EAAA,MAAA;QAeC,EAAE,CAAC,CAAC,OAdO,KAAA,KAAU,QAAA,CAAS,CAAC,CAAA;YAe7B,KAAK,GAdG,IAAA,CAAK,SAAC,CAAS,KAAC,CAAK,CAAC;QAehC,CAAC;QACD,MAAM,CAdC,MAAC,CAAM,GAAC,EAAI,KAAA,CAAM,CAAC;IAe5B,CAAC;IACH,qBAAC;AAAD,CA7IA,AA6IC,IAAA;;AAED;IACA;;;;OAIG;IACH,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC;IAChC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC;IACjC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;IAC9B;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC;IAC7B;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC;IAChC;;;OAGG;IACH,cAAc,CAAC,SAAS,CAAC,eAAe,CAAC;IACzC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,YAAY,CAAC;AACtC,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6CG;AACH;IAjDC,sCAAA;IAkDD;eAjDG,kBAAA,EAAA,MAAA,EAAA,aAAA,CAAA,GAAA,EAAA,OAAA,EAAA,IAAA,OAAA,EAAA,EAAA,CAAA;IAAA,CAAA;IAwDH,yBAAC;AAAD,CARA,AAQC,CAzDA,cAAA;;AAEM,6BAAA,GAAoC;IAkD3C,EAjDE,IAAA,EAAM,UAAA,EAAW;CAkDlB,CAjDC;AAkDF,kBAAkB;AAhDX,iCAAA,GAAiF,cAAM,OAAA,EAkD7F,EAlD6F,CAkD7F,CAjDC;AAoDF;IACA,gBAAgB;IAChB,kBAAkB,CAAC,UAAU,CAAC;IAC9B;;;OAGG;IACH,kBAAkB,CAAC,cAAc,CAAC;AAClC,CAAC","file":"base_request_options.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n * \n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n * \n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n * \n * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * var req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod|string;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  body: any;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  params: URLSearchParams;\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @return {?}\n */\nget search(): URLSearchParams { return this.params; }\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @param {?} params\n * @return {?}\n */\nset search(params: URLSearchParams) { this.params = params; }\n  /**\n   * Enable use credentials for a {@link Request}.\n   */\n  withCredentials: boolean;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType;\n/**\n * @param {?=} __0\n */\nconstructor(\n      {method, headers, body, url, search, params, withCredentials,\n       responseType}: RequestOptionsArgs = {}) {\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n/**\n * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * Note that `headers` and `search` will override existing values completely if present in\n * the `options` object. If these values should be merged, it should be done prior to calling\n * `merge` on the `RequestOptions` instance.\n * \n * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new RequestOptions({\n *   method: RequestMethod.Post\n * });\n * var req = new Request(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nprivate _mergeSearchParams(params: string|URLSearchParams|\n                             {[key: string]: any | any[]}): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n/**\n * @param {?=} objParams\n * @return {?}\n */\nprivate _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const /** @type {?} */ params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const /** @type {?} */ value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} params\n * @return {?}\n */\nprivate _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\nfunction RequestOptions_tsickle_Closure_declarations() {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n * @type {?}\n */\nRequestOptions.prototype.method;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.headers;\n/**\n * Body to be used when creating a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.body;\n/**\n * Url with which to perform a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.url;\n/**\n * Search parameters to be included in a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.params;\n/**\n * Enable use credentials for a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.withCredentials;\n/** @type {?} */\nRequestOptions.prototype.responseType;\n}\n\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n * \n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))\n * \n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new BaseRequestOptions();\n * var req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class BaseRequestOptions extends RequestOptions {\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseRequestOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseRequestOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}