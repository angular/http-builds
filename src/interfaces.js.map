{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../modules/@angular/http/src/interfaces.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAMH;;;;;;;GAOG;AACH;IAAA;IAMkC,CAAC;IALnC;;;;OAIG;IACH,4CAAgB,GAAhB,UAAiB,OAAY,IAAG,CAAC;IAAC,wBAAC;AAAD,CAAC,AANnC,IAMmC;AACnC;;;;GAIG;AACH;IAAA;IAIA,CAAC;IAAD,iBAAC;AAAD,CAAC,AAJD,IAIC;AAED;IACC,gBAAgB;IACjB,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC;IAC/B,gBAAgB;IACjB,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC;IAC5B,gBAAgB;IACjB,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC9B,CAAC;AAED;;;;GAIG;AACH;IAAA;IAMkC,CAAC;IALnC;;;;OAIG;IACH,uCAAgB,GAAhB,UAAiB,GAAY,IAAG,CAAC;IAAC,mBAAC;AAAD,CAAC,AANnC,IAMmC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n/**\n *  Abstract class from which real backends are derived.\n  * *\n  * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n  * {@link Request}.\n  * *\n * @abstract\n */\nexport abstract class ConnectionBackend {\n/**\n * @abstract\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: any) {} }\n/**\n *  Abstract class from which real connections are derived.\n  * *\n * @abstract\n */\nexport abstract class Connection {\n  readyState: ReadyState;\n  request: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\nfunction Connection_tsickle_Closure_declarations() {\n /** @type {?} */\nConnection.prototype.readyState;\n /** @type {?} */\nConnection.prototype.request;\n /** @type {?} */\nConnection.prototype.response;\n}\n\n/**\n *  An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n  * *\n * @abstract\n */\nexport abstract class XSRFStrategy {\n/**\n * @abstract\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request) {} }\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface RequestOptionsArgs {\n  url?: string;\n  method?: string|RequestMethod;\n  search?: string|URLSearchParams;\n  headers?: Headers;\n  body?: any;\n  withCredentials?: boolean;\n  responseType?: ResponseContentType;\n}\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string; }\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @experimental\n */\nexport type ResponseOptionsArgs = {\n  body?: string | Object | FormData | ArrayBuffer |Â Blob; status?: number; statusText?: string;\n  headers?: Headers;\n  type?: ResponseType;\n  url?: string;\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}